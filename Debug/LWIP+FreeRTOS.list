
LWIP+FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016990  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032bc  08016b60  08016b60  00026b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e1c  08019e1c  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  08019e1c  08019e1c  00029e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019e24  08019e24  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019e24  08019e24  00029e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019e28  08019e28  00029e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08019e2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  08019ec0  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  08019f60  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002ee64  200001d4  0801a000  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2002f038  0801a000  0003f038  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037262  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000081b7  00000000  00000000  00067466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025c8  00000000  00000000  0006f620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002408  00000000  00000000  00071be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038a87  00000000  00000000  00073ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c1b3  00000000  00000000  000aca77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00117e9d  00000000  00000000  000e8c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00200ac7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a848  00000000  00000000  00200b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016b48 	.word	0x08016b48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08016b48 	.word	0x08016b48

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200001f0 	.word	0x200001f0
 80005f4:	200002a4 	.word	0x200002a4

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fd83 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f821 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8e5 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f885 	bl	8000718 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060e:	f000 f8b3 	bl	8000778 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  rtg_main();
 8000612:	f013 fe5d 	bl	80142d0 <rtg_main>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <main+0x48>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f005 fef1 	bl	8006414 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	; (8000644 <main+0x4c>)
 8000636:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000638:	f005 fed5 	bl	80063e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x44>
 800063e:	bf00      	nop
 8000640:	08016b6c 	.word	0x08016b6c
 8000644:	20000a34 	.word	0x20000a34

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f015 f86e 	bl	8015738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066c:	f002 fbf6 	bl	8002e5c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xc8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <SystemClock_Config+0xc8>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xcc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <SystemClock_Config+0xcc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006bc:	2348      	movs	r3, #72	; 0x48
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c4:	2303      	movs	r3, #3
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fbd5 	bl	8002e7c <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f93a 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fe63 	bl	80033c4 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000704:	f000 f924 	bl	8000950 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART3_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800075c:	f003 ff5a 	bl	8004614 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f8f3 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200004a4 	.word	0x200004a4
 8000774:	40004800 	.word	0x40004800

08000778 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2206      	movs	r2, #6
 8000788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	f002 fa05 	bl	8002bca <HAL_PCD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8c3 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000052c 	.word	0x2000052c

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a40      	ldr	r2, [pc, #256]	; (8000908 <MX_GPIO_Init+0x134>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a3a      	ldr	r2, [pc, #232]	; (8000908 <MX_GPIO_Init+0x134>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a34      	ldr	r2, [pc, #208]	; (8000908 <MX_GPIO_Init+0x134>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2e      	ldr	r2, [pc, #184]	; (8000908 <MX_GPIO_Init+0x134>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <MX_GPIO_Init+0x134>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000880:	4822      	ldr	r0, [pc, #136]	; (800090c <MX_GPIO_Init+0x138>)
 8000882:	f002 f96f 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x13c>)
 800088c:	f002 f96a 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481b      	ldr	r0, [pc, #108]	; (8000914 <MX_GPIO_Init+0x140>)
 80008a8:	f001 ffb0 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_GPIO_Init+0x138>)
 80008c6:	f001 ffa1 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008e2:	f001 ff93 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008fa:	f001 ff87 	bl	800280c <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800

08000918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000920:	f004 ff06 	bl	8005730 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f005 fdc1 	bl	80064ac <osDelay>
 800092a:	e7fb      	b.n	8000924 <StartDefaultTask+0xc>

0800092c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093e:	f000 fbf1 	bl	8001124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010000 	.word	0x40010000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 fcbf 	bl	800131c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0aa      	sub	sp, #168	; 0xa8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2284      	movs	r2, #132	; 0x84
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f014 feb3 	bl	8015738 <memset>
  if(huart->Instance==USART3)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <HAL_UART_MspInit+0xb4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d13c      	bne.n	8000a56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 ff42 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009f6:	f7ff ffab 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a44:	2307      	movs	r3, #7
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_UART_MspInit+0xbc>)
 8000a52:	f001 fedb 	bl	800280c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	37a8      	adds	r7, #168	; 0xa8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40004800 	.word	0x40004800
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020c00 	.word	0x40020c00

08000a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ac      	sub	sp, #176	; 0xb0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	2284      	movs	r2, #132	; 0x84
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f014 fe53 	bl	8015738 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a9a:	d159      	bne.n	8000b50 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000aa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 fee1 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ab8:	f7ff ff4a 	bl	8000950 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a25      	ldr	r2, [pc, #148]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ad4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aee:	230a      	movs	r3, #10
 8000af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af8:	4619      	mov	r1, r3
 8000afa:	4818      	ldr	r0, [pc, #96]	; (8000b5c <HAL_PCD_MspInit+0xf0>)
 8000afc:	f001 fe86 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <HAL_PCD_MspInit+0xf0>)
 8000b1c:	f001 fe76 	bl	800280c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6453      	str	r3, [r2, #68]	; 0x44
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	37b0      	adds	r7, #176	; 0xb0
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_InitTick+0xcc>)
 8000b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b74:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <HAL_InitTick+0xcc>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_InitTick+0xcc>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	f107 020c 	add.w	r2, r7, #12
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 fe3c 	bl	8003810 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b98:	f002 fe26 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8000b9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba0:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <HAL_InitTick+0xd0>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <HAL_InitTick+0xd8>)
 8000bb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bd2:	4818      	ldr	r0, [pc, #96]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bd4:	f003 fa3e 	bl	8004054 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d11b      	bne.n	8000c1e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000be6:	4813      	ldr	r0, [pc, #76]	; (8000c34 <HAL_InitTick+0xd4>)
 8000be8:	f003 fa96 	bl	8004118 <HAL_TIM_Base_Start_IT>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d111      	bne.n	8000c1e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bfa:	2019      	movs	r0, #25
 8000bfc:	f000 fbaa 	bl	8001354 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d808      	bhi.n	8000c18 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c06:	2200      	movs	r2, #0
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f000 fb86 	bl	800131c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_InitTick+0xdc>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e002      	b.n	8000c1e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000a38 	.word	0x20000a38
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c72:	f003 fac9 	bl	8004208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000a38 	.word	0x20000a38

08000c80 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <ETH_IRQHandler+0x10>)
 8000c86:	f000 feed 	bl	8001a64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000546c 	.word	0x2000546c

08000c94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	return 1;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_kill>:

int _kill(int pid, int sig)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <_kill+0x20>)
 8000cb0:	2216      	movs	r2, #22
 8000cb2:	601a      	str	r2, [r3, #0]
	return -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	2002f034 	.word	0x2002f034

08000cc8 <_exit>:

void _exit (int status)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffe5 	bl	8000ca4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cda:	e7fe      	b.n	8000cda <_exit+0x12>

08000cdc <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_isatty>:

int _isatty(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
	return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_open>:

int _open(char *path, int flags, ...)
{
 8000d44:	b40e      	push	{r1, r2, r3}
 8000d46:	b480      	push	{r7}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	b003      	add	sp, #12
 8000d5e:	4770      	bx	lr

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d205      	bcs.n	8000d9c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <_sbrk+0x6c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	371c      	adds	r7, #28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	20050000 	.word	0x20050000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000a84 	.word	0x20000a84
 8000dc8:	2002f038 	.word	0x2002f038
 8000dcc:	2002f034 	.word	0x2002f034

08000dd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1e:	f7ff ffd7 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f014 fbc3 	bl	80155ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fbe7 	bl	80005f8 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000e38:	08019e2c 	.word	0x08019e2c
  ldr r2, =_sbss
 8000e3c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000e40:	2002f038 	.word	0x2002f038

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>

08000e46 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <LAN8742_RegisterBusIO+0x28>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d007      	beq.n	8000e6e <LAN8742_RegisterBusIO+0x28>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <LAN8742_RegisterBusIO+0x28>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e014      	b.n	8000e9e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d17c      	bne.n	8000fc4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2220      	movs	r2, #32
 8000edc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	e01c      	b.n	8000f1e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f107 0208 	add.w	r2, r7, #8
 8000eec:	2112      	movs	r1, #18
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	4798      	blx	r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da03      	bge.n	8000f00 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000ef8:	f06f 0304 	mvn.w	r3, #4
 8000efc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000efe:	e00b      	b.n	8000f18 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d105      	bne.n	8000f18 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
         break;
 8000f16:	e005      	b.n	8000f24 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	2b1f      	cmp	r3, #31
 8000f22:	d9df      	bls.n	8000ee4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	d902      	bls.n	8000f32 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f2c:	f06f 0302 	mvn.w	r3, #2
 8000f30:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d145      	bne.n	8000fc4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6810      	ldr	r0, [r2, #0]
 8000f40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f44:	2100      	movs	r1, #0
 8000f46:	4798      	blx	r3
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db37      	blt.n	8000fbe <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6810      	ldr	r0, [r2, #0]
 8000f56:	f107 0208 	add.w	r2, r7, #8
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4798      	blx	r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db28      	blt.n	8000fb6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4798      	blx	r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f6e:	e01c      	b.n	8000faa <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4798      	blx	r3
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f82:	d80e      	bhi.n	8000fa2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6810      	ldr	r0, [r2, #0]
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	2100      	movs	r1, #0
 8000f92:	4798      	blx	r3
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	da07      	bge.n	8000faa <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000f9a:	f06f 0304 	mvn.w	r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
                 break;
 8000fa0:	e010      	b.n	8000fc4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000fa2:	f06f 0301 	mvn.w	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
               break;
 8000fa8:	e00c      	b.n	8000fc4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1dd      	bne.n	8000f70 <LAN8742_Init+0xc6>
 8000fb4:	e006      	b.n	8000fc4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000fb6:	f06f 0304 	mvn.w	r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	e002      	b.n	8000fc4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fbe:	f06f 0303 	mvn.w	r3, #3
 8000fc2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d112      	bne.n	8000ff0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4798      	blx	r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000fd4:	bf00      	nop
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4798      	blx	r3
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fe8:	d9f5      	bls.n	8000fd6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 }
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6810      	ldr	r0, [r2, #0]
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	2101      	movs	r1, #1
 8001014:	4798      	blx	r3
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	da02      	bge.n	8001022 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800101c:	f06f 0304 	mvn.w	r3, #4
 8001020:	e06e      	b.n	8001100 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6810      	ldr	r0, [r2, #0]
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	2101      	movs	r1, #1
 8001030:	4798      	blx	r3
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	da02      	bge.n	800103e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001038:	f06f 0304 	mvn.w	r3, #4
 800103c:	e060      	b.n	8001100 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001048:	2301      	movs	r3, #1
 800104a:	e059      	b.n	8001100 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6810      	ldr	r0, [r2, #0]
 8001054:	f107 020c 	add.w	r2, r7, #12
 8001058:	2100      	movs	r1, #0
 800105a:	4798      	blx	r3
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	da02      	bge.n	8001068 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001062:	f06f 0304 	mvn.w	r3, #4
 8001066:	e04b      	b.n	8001100 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d11b      	bne.n	80010aa <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <LAN8742_GetLinkState+0x90>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001086:	2302      	movs	r3, #2
 8001088:	e03a      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001094:	2303      	movs	r3, #3
 8001096:	e033      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010a2:	2304      	movs	r3, #4
 80010a4:	e02c      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010a6:	2305      	movs	r3, #5
 80010a8:	e02a      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6810      	ldr	r0, [r2, #0]
 80010b2:	f107 020c 	add.w	r2, r7, #12
 80010b6:	211f      	movs	r1, #31
 80010b8:	4798      	blx	r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	da02      	bge.n	80010c6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010c0:	f06f 0304 	mvn.w	r3, #4
 80010c4:	e01c      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010d0:	2306      	movs	r3, #6
 80010d2:	e015      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 031c 	and.w	r3, r3, #28
 80010da:	2b18      	cmp	r3, #24
 80010dc:	d101      	bne.n	80010e2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010de:	2302      	movs	r3, #2
 80010e0:	e00e      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f003 031c 	and.w	r3, r3, #28
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d101      	bne.n	80010f0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e007      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 031c 	and.w	r3, r3, #28
 80010f6:	2b14      	cmp	r3, #20
 80010f8:	d101      	bne.n	80010fe <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010fa:	2304      	movs	r3, #4
 80010fc:	e000      	b.n	8001100 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010fe:	2305      	movs	r3, #5
    }				
  }
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f8fa 	bl	8001306 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	200f      	movs	r0, #15
 8001114:	f7ff fd24 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001118:	f7ff fc20 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008
 8001148:	20000a88 	.word	0x20000a88

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000a88 	.word	0x20000a88

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <__NVIC_SetPriorityGrouping+0x40>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x40>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	05fa0000 	.word	0x05fa0000

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff4c 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132e:	f7ff ff61 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001332:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ffb1 	bl	80012a0 <NVIC_EncodePriority>
 800133e:	4602      	mov	r2, r0
 8001340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff80 	bl	800124c <__NVIC_SetPriority>
}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff54 	bl	8001210 <__NVIC_EnableIRQ>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e06a      	b.n	8001458 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2223      	movs	r2, #35	; 0x23
 8001390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f004 fde3 	bl	8005f60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_ETH_Init+0xf0>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a30      	ldr	r2, [pc, #192]	; (8001460 <HAL_ETH_Init+0xf0>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_ETH_Init+0xf0>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <HAL_ETH_Init+0xf4>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a2b      	ldr	r2, [pc, #172]	; (8001464 <HAL_ETH_Init+0xf4>)
 80013b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_ETH_Init+0xf4>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4927      	ldr	r1, [pc, #156]	; (8001464 <HAL_ETH_Init+0xf4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_ETH_Init+0xf4>)
 80013ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff feb0 	bl	800114c <HAL_GetTick>
 80013ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ee:	e011      	b.n	8001414 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013f0:	f7ff feac 	bl	800114c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013fe:	d909      	bls.n	8001414 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2204      	movs	r2, #4
 8001404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	22e0      	movs	r2, #224	; 0xe0
 800140c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e021      	b.n	8001458 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1e4      	bne.n	80013f0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 ff4c 	bl	80022c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fff3 	bl	8002418 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f001 f849 	bl	80024ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	461a      	mov	r2, r3
 800143e:	2100      	movs	r1, #0
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 ffb1 	bl	80023a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2210      	movs	r2, #16
 8001452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800

08001468 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001476:	2b10      	cmp	r3, #16
 8001478:	d17b      	bne.n	8001572 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2223      	movs	r2, #35	; 0x23
 800147e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_ETH_Start_IT+0x114>)
 80014a6:	430b      	orrs	r3, r1
 80014a8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80014bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2204      	movs	r2, #4
 80014c4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f9fc 	bl	80018c4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0208 	orr.w	r2, r2, #8
 80014da:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fe3d 	bl	8001164 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0204 	orr.w	r2, r2, #4
 8001500:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff fe2a 	bl	8001164 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fd74 	bl	8002006 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001534:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001556:	69d9      	ldr	r1, [r3, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_ETH_Start_IT+0x118>)
 800155e:	430b      	orrs	r3, r1
 8001560:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001564:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2223      	movs	r2, #35	; 0x23
 800156a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
  }
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	00020060 	.word	0x00020060
 8001580:	0001a0c1 	.word	0x0001a0c1

08001584 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001592:	2b23      	cmp	r3, #35	; 0x23
 8001594:	d16e      	bne.n	8001674 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2223      	movs	r2, #35	; 0x23
 800159a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a6:	69d9      	ldr	r1, [r3, #28]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <HAL_ETH_Stop_IT+0xfc>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015b4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015cc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	f023 0302 	bic.w	r3, r3, #2
 80015e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015e4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0204 	bic.w	r2, r2, #4
 80015f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fdb0 	bl	8001164 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fcfa 	bl	8002006 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0208 	bic.w	r2, r2, #8
 8001620:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fd9a 	bl	8001164 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e00e      	b.n	800165c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	3212      	adds	r2, #18
 8001644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001648:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d9ed      	bls.n	800163e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2210      	movs	r2, #16
 800166c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	fffe5f3e 	.word	0xfffe5f3e

08001684 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e045      	b.n	8001734 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ae:	2b23      	cmp	r3, #35	; 0x23
 80016b0:	d13f      	bne.n	8001732 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80016ba:	2201      	movs	r2, #1
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 ff70 	bl	80025a4 <ETH_Prepare_Tx_Descriptors>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d0:	f043 0202 	orr.w	r2, r3, #2
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e02a      	b.n	8001734 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016de:	f3bf 8f4f 	dsb	sy
}
 80016e2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d904      	bls.n	8001700 <HAL_ETH_Transmit_IT+0x7c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	1f1a      	subs	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00d      	beq.n	800172e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171a:	461a      	mov	r2, r3
 800171c:	2304      	movs	r3, #4
 800171e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	461a      	mov	r2, r3
 800172a:	2300      	movs	r3, #0
 800172c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
  }
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d109      	bne.n	8001768 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0a8      	b.n	80018ba <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800176e:	2b23      	cmp	r3, #35	; 0x23
 8001770:	d001      	beq.n	8001776 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0a1      	b.n	80018ba <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	3212      	adds	r2, #18
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178c:	f1c3 0304 	rsb	r3, r3, #4
 8001790:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001792:	e06a      	b.n	800186a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	699a      	ldr	r2, [r3, #24]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <HAL_ETH_ReadData+0x88>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d040      	beq.n	8001846 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00c      	beq.n	8001808 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017f8:	3b04      	subs	r3, #4
 80017fa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001820:	461a      	mov	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	b29b      	uxth	r3, r3
 8001826:	f004 fd67 	bl	80062f8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	441a      	add	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d902      	bls.n	8001858 <HAL_ETH_ReadData+0x11c>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b04      	subs	r3, #4
 8001856:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	3212      	adds	r2, #18
 800185e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001862:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db06      	blt.n	8001880 <HAL_ETH_ReadData+0x144>
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	429a      	cmp	r2, r3
 8001878:	d202      	bcs.n	8001880 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d089      	beq.n	8001794 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	441a      	add	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f815 	bl	80018c4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80018d0:	2301      	movs	r3, #1
 80018d2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018d8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	3212      	adds	r2, #18
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ea:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018ec:	e040      	b.n	8001970 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d112      	bne.n	800191c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 fccc 	bl	8006298 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	74fb      	strb	r3, [r7, #19]
 800190a:	e007      	b.n	800191c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	461a      	mov	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800191c:	7cfb      	ldrb	r3, [r7, #19]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d026      	beq.n	8001970 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <ETH_UpdateDescriptor+0xe4>)
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	e003      	b.n	800193a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001938:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800193a:	f3bf 8f5f 	dmb	sy
}
 800193e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d902      	bls.n	800195e <ETH_UpdateDescriptor+0x9a>
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3b04      	subs	r3, #4
 800195c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	3212      	adds	r2, #18
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	617b      	str	r3, [r7, #20]
      desccount--;
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	3b01      	subs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <ETH_UpdateDescriptor+0xb8>
 8001976:	7cfb      	ldrb	r3, [r7, #19]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1b8      	bne.n	80018ee <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	429a      	cmp	r2, r3
 8001984:	d00c      	beq.n	80019a0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198e:	461a      	mov	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80019a0:	bf00      	nop
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	80004600 	.word	0x80004600

080019ac <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3318      	adds	r3, #24
 80019b8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019ca:	e03f      	b.n	8001a4c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	3304      	adds	r3, #4
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3301      	adds	r3, #1
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d028      	beq.n	8001a4c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68d9      	ldr	r1, [r3, #12]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db1b      	blt.n	8001a48 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3304      	adds	r3, #4
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 fcad 	bl	800637c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	3304      	adds	r3, #4
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3301      	adds	r3, #1
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a46:	e001      	b.n	8001a4c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_ETH_ReleaseTxPacket+0xac>
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1b9      	bne.n	80019cc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d112      	bne.n	8001aa4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8c:	2b40      	cmp	r3, #64	; 0x40
 8001a8e:	d109      	bne.n	8001aa4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_ETH_IRQHandler+0x178>)
 8001a9c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f003 ffc2 	bl	8005a28 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d113      	bne.n	8001ade <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10a      	bne.n	8001ade <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ad6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f003 ffb5 	bl	8005a48 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af0:	d14c      	bne.n	8001b8c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b04:	d142      	bne.n	8001b8c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0c:	f043 0208 	orr.w	r2, r3, #8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b28:	d11a      	bne.n	8001b60 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_ETH_IRQHandler+0x17c>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001b50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b54:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	22e0      	movs	r2, #224	; 0xe0
 8001b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b5e:	e012      	b.n	8001b86 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b84:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f003 ff6e 	bl	8005a68 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d10e      	bne.n	8001bb8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f81c 	bl	8001be8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_ETH_IRQHandler+0x180>)
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_ETH_IRQHandler+0x180>)
 8001bc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bca:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f815 	bl	8001bfc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	00010040 	.word	0x00010040
 8001be0:	007e2000 	.word	0x007e2000
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 031c 	and.w	r3, r3, #28
 8001c2c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	02db      	lsls	r3, r3, #11
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f023 0302 	bic.w	r3, r3, #2
 8001c4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001c60:	f7ff fa74 	bl	800114c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c66:	e00d      	b.n	8001c84 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c68:	f7ff fa70 	bl	800114c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c76:	d301      	bcc.n	8001c7c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e010      	b.n	8001c9e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ec      	bne.n	8001c68 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 031c 	and.w	r3, r3, #28
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	02db      	lsls	r3, r3, #11
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	019b      	lsls	r3, r3, #6
 8001cd4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d00:	f7ff fa24 	bl	800114c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d06:	e00d      	b.n	8001d24 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d08:	f7ff fa20 	bl	800114c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d16:	d301      	bcc.n	8001d1c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e009      	b.n	8001d30 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ec      	bne.n	8001d08 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0d9      	b.n	8001f00 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf14      	ite	ne
 8001e3e:	2301      	movne	r3, #1
 8001e40:	2300      	moveq	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	0c1b      	lsrs	r3, r3, #16
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e00b      	b.n	8001f38 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d105      	bne.n	8001f36 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f88f 	bl	8002050 <ETH_SetMACConfig>

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 031c 	bic.w	r3, r3, #28
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f58:	f001 fc26 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 8001f5c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d908      	bls.n	8001f78 <HAL_ETH_SetMDIOClockRange+0x38>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d804      	bhi.n	8001f78 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f043 0308 	orr.w	r3, r3, #8
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	e027      	b.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d908      	bls.n	8001f92 <HAL_ETH_SetMDIOClockRange+0x52>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d204      	bcs.n	8001f92 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f043 030c 	orr.w	r3, r3, #12
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e01a      	b.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d303      	bcc.n	8001fa2 <HAL_ETH_SetMDIOClockRange+0x62>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d911      	bls.n	8001fc6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d908      	bls.n	8001fbc <HAL_ETH_SetMDIOClockRange+0x7c>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d804      	bhi.n	8001fbc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e005      	b.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e000      	b.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fc6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	611a      	str	r2, [r3, #16]
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	01312cff 	.word	0x01312cff
 8001fdc:	02160ebf 	.word	0x02160ebf
 8001fe0:	03938700 	.word	0x03938700
 8001fe4:	05f5e0ff 	.word	0x05f5e0ff
 8001fe8:	08f0d17f 	.word	0x08f0d17f

08001fec <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002024:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002028:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002036:	2001      	movs	r0, #1
 8002038:	f7ff f894 	bl	8001164 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002046:	6193      	str	r3, [r2, #24]
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4b51      	ldr	r3, [pc, #324]	; (80021ac <ETH_SetMACConfig+0x15c>)
 8002066:	4013      	ands	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	7c1b      	ldrb	r3, [r3, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <ETH_SetMACConfig+0x28>
 8002072:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002076:	e000      	b.n	800207a <ETH_SetMACConfig+0x2a>
 8002078:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	7c5b      	ldrb	r3, [r3, #17]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <ETH_SetMACConfig+0x38>
 8002082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002086:	e000      	b.n	800208a <ETH_SetMACConfig+0x3a>
 8002088:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800208a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002090:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7fdb      	ldrb	r3, [r3, #31]
 8002096:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002098:	431a      	orrs	r2, r3
                        macconf->Speed |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800209e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	7f92      	ldrb	r2, [r2, #30]
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	d102      	bne.n	80020ae <ETH_SetMACConfig+0x5e>
 80020a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ac:	e000      	b.n	80020b0 <ETH_SetMACConfig+0x60>
 80020ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80020b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	7f1b      	ldrb	r3, [r3, #28]
 80020b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	791b      	ldrb	r3, [r3, #4]
 80020c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d102      	bne.n	80020d8 <ETH_SetMACConfig+0x88>
 80020d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d6:	e000      	b.n	80020da <ETH_SetMACConfig+0x8a>
 80020d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	7bdb      	ldrb	r3, [r3, #15]
 80020e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020f2:	4313      	orrs	r3, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff f82a 	bl	8001164 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002126:	4013      	ands	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002136:	2a00      	cmp	r2, #0
 8002138:	d101      	bne.n	800213e <ETH_SetMACConfig+0xee>
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	e000      	b.n	8002140 <ETH_SetMACConfig+0xf0>
 800213e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002140:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002146:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800214e:	2a01      	cmp	r2, #1
 8002150:	d101      	bne.n	8002156 <ETH_SetMACConfig+0x106>
 8002152:	2208      	movs	r2, #8
 8002154:	e000      	b.n	8002158 <ETH_SetMACConfig+0x108>
 8002156:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002158:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002160:	2a01      	cmp	r2, #1
 8002162:	d101      	bne.n	8002168 <ETH_SetMACConfig+0x118>
 8002164:	2204      	movs	r2, #4
 8002166:	e000      	b.n	800216a <ETH_SetMACConfig+0x11a>
 8002168:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800216a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002172:	2a01      	cmp	r2, #1
 8002174:	d101      	bne.n	800217a <ETH_SetMACConfig+0x12a>
 8002176:	2202      	movs	r2, #2
 8002178:	e000      	b.n	800217c <ETH_SetMACConfig+0x12c>
 800217a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217c:	4313      	orrs	r3, r2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002194:	2001      	movs	r0, #1
 8002196:	f7fe ffe5 	bl	8001164 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	ff20810f 	.word	0xff20810f

080021b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <ETH_SetDMAConfig+0x110>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	7b1b      	ldrb	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <ETH_SetDMAConfig+0x2c>
 80021d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021da:	e000      	b.n	80021de <ETH_SetDMAConfig+0x2e>
 80021dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	7b5b      	ldrb	r3, [r3, #13]
 80021e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	7f52      	ldrb	r2, [r2, #29]
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d102      	bne.n	80021f4 <ETH_SetDMAConfig+0x44>
 80021ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021f2:	e000      	b.n	80021f6 <ETH_SetDMAConfig+0x46>
 80021f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	7b9b      	ldrb	r3, [r3, #14]
 80021fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002204:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	7f1b      	ldrb	r3, [r3, #28]
 800220a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800220c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7f9b      	ldrb	r3, [r3, #30]
 8002212:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002214:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800221a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002222:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002224:	4313      	orrs	r3, r2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	461a      	mov	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002246:	2001      	movs	r0, #1
 8002248:	f7fe ff8c 	bl	8001164 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002254:	461a      	mov	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002264:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800226a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002270:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002278:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800227a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002282:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002288:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002292:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002296:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f7fe ff5d 	bl	8001164 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	f8de3f23 	.word	0xf8de3f23

080022c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0a6      	sub	sp, #152	; 0x98
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002300:	2300      	movs	r3, #0
 8002302:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800230a:	2300      	movs	r3, #0
 800230c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002326:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800232a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800232c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002330:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002338:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800233c:	4619      	mov	r1, r3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fe86 	bl	8002050 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002344:	2301      	movs	r3, #1
 8002346:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002348:	2301      	movs	r3, #1
 800234a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002352:	2301      	movs	r3, #1
 8002354:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002370:	2301      	movs	r3, #1
 8002372:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002378:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800237a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800237e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002384:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ff08 	bl	80021b0 <ETH_SetDMAConfig>
}
 80023a0:	bf00      	nop
 80023a2:	3798      	adds	r7, #152	; 0x98
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3305      	adds	r3, #5
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	3204      	adds	r2, #4
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <ETH_MACAddressConfig+0x68>)
 80023ca:	4413      	add	r3, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3303      	adds	r3, #3
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	061a      	lsls	r2, r3, #24
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3302      	adds	r3, #2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3301      	adds	r3, #1
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	4313      	orrs	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <ETH_MACAddressConfig+0x6c>)
 80023fa:	4413      	add	r3, r2
 80023fc:	461a      	mov	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	6013      	str	r3, [r2, #0]
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40028040 	.word	0x40028040
 8002414:	40028044 	.word	0x40028044

08002418 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e03e      	b.n	80024a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68d9      	ldr	r1, [r3, #12]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2200      	movs	r2, #0
 800244e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	3206      	adds	r2, #6
 8002458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d80c      	bhi.n	8002488 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68d9      	ldr	r1, [r3, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	e004      	b.n	8002492 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3301      	adds	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d9bd      	bls.n	8002426 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	611a      	str	r2, [r3, #16]
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e046      	b.n	8002566 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6919      	ldr	r1, [r3, #16]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002514:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800251c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	3212      	adds	r2, #18
 8002532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d80c      	bhi.n	8002556 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6919      	ldr	r1, [r3, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	e004      	b.n	8002560 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3301      	adds	r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d9b5      	bls.n	80024d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002596:	60da      	str	r2, [r3, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b08d      	sub	sp, #52	; 0x34
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3318      	adds	r3, #24
 80025b4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025e6:	d007      	beq.n	80025f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	3304      	adds	r3, #4
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0ff      	b.n	80027fc <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	3301      	adds	r3, #1
 8002600:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4b7d      	ldr	r3, [pc, #500]	; (8002808 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002612:	4013      	ands	r3, r2
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	6852      	ldr	r2, [r2, #4]
 8002618:	431a      	orrs	r2, r3
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	431a      	orrs	r2, r3
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	431a      	orrs	r2, r3
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800267e:	f3bf 8f5f 	dmb	sy
}
 8002682:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002690:	e082      	b.n	8002798 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e005      	b.n	80026be <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	3301      	adds	r3, #1
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d902      	bls.n	80026d0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	3b04      	subs	r3, #4
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026f2:	d007      	beq.n	8002704 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	3304      	adds	r3, #4
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d029      	beq.n	8002758 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002712:	2300      	movs	r3, #0
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
 8002716:	e019      	b.n	800274c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002718:	f3bf 8f5f 	dmb	sy
}
 800271c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	3301      	adds	r3, #1
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	2b03      	cmp	r3, #3
 8002734:	d902      	bls.n	800273c <ETH_Prepare_Tx_Descriptors+0x198>
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	3b04      	subs	r3, #4
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	3301      	adds	r3, #1
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
 800274c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	429a      	cmp	r2, r3
 8002752:	d3e1      	bcc.n	8002718 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002754:	2302      	movs	r3, #2
 8002756:	e051      	b.n	80027fc <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	3301      	adds	r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4b25      	ldr	r3, [pc, #148]	; (8002808 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002774:	4013      	ands	r3, r2
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	6852      	ldr	r2, [r2, #4]
 800277a:	431a      	orrs	r2, r3
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	3301      	adds	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002786:	f3bf 8f5f 	dmb	sy
}
 800278a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	f47f af78 	bne.w	8002692 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e005      	b.n	80027c2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d2:	6979      	ldr	r1, [r7, #20]
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	3304      	adds	r3, #4
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80027e4:	b672      	cpsid	i
}
 80027e6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80027f6:	b662      	cpsie	i
}
 80027f8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3734      	adds	r7, #52	; 0x34
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	ffffe000 	.word	0xffffe000

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e175      	b.n	8002b18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 8164 	bne.w	8002b12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x56>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80be 	beq.w	8002b12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <HAL_GPIO_Init+0x324>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a65      	ldr	r2, [pc, #404]	; (8002b30 <HAL_GPIO_Init+0x324>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_GPIO_Init+0x324>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029ae:	4a61      	ldr	r2, [pc, #388]	; (8002b34 <HAL_GPIO_Init+0x328>)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_GPIO_Init+0x32c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d037      	beq.n	8002a4a <HAL_GPIO_Init+0x23e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_GPIO_Init+0x330>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d031      	beq.n	8002a46 <HAL_GPIO_Init+0x23a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <HAL_GPIO_Init+0x334>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x236>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a55      	ldr	r2, [pc, #340]	; (8002b44 <HAL_GPIO_Init+0x338>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x232>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a54      	ldr	r2, [pc, #336]	; (8002b48 <HAL_GPIO_Init+0x33c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x22e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_GPIO_Init+0x340>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x22a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_GPIO_Init+0x344>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a51      	ldr	r2, [pc, #324]	; (8002b54 <HAL_GPIO_Init+0x348>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x222>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <HAL_GPIO_Init+0x34c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x21e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4f      	ldr	r2, [pc, #316]	; (8002b5c <HAL_GPIO_Init+0x350>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x21a>
 8002a22:	2309      	movs	r3, #9
 8002a24:	e012      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a26:	230a      	movs	r3, #10
 8002a28:	e010      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	e00e      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00c      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a32:	2306      	movs	r3, #6
 8002a34:	e00a      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a36:	2305      	movs	r3, #5
 8002a38:	e008      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e004      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e002      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_GPIO_Init+0x240>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f002 0203 	and.w	r2, r2, #3
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	4093      	lsls	r3, r2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a5c:	4935      	ldr	r1, [pc, #212]	; (8002b34 <HAL_GPIO_Init+0x328>)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8e:	4a34      	ldr	r2, [pc, #208]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a94:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab8:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_GPIO_Init+0x354>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	f67f ae86 	bls.w	800282c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3724      	adds	r7, #36	; 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40013800 	.word	0x40013800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40020800 	.word	0x40020800
 8002b44:	40020c00 	.word	0x40020c00
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40021400 	.word	0x40021400
 8002b50:	40021800 	.word	0x40021800
 8002b54:	40021c00 	.word	0x40021c00
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40022400 	.word	0x40022400
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ba8:	887a      	ldrh	r2, [r7, #2]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4013      	ands	r3, r2
 8002bae:	041a      	lsls	r2, r3, #16
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bcc:	b08f      	sub	sp, #60	; 0x3c
 8002bce:	af0a      	add	r7, sp, #40	; 0x28
 8002bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e116      	b.n	8002e0a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fd ff38 	bl	8000a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 faec 	bl	80051f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	687e      	ldr	r6, [r7, #4]
 8002c28:	466d      	mov	r5, sp
 8002c2a:	f106 0410 	add.w	r4, r6, #16
 8002c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c3e:	1d33      	adds	r3, r6, #4
 8002c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c42:	6838      	ldr	r0, [r7, #0]
 8002c44:	f002 fa80 	bl	8005148 <USB_CoreInit>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0d7      	b.n	8002e0a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 fada 	bl	800521a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	e04a      	b.n	8002d02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	333d      	adds	r3, #61	; 0x3d
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	333c      	adds	r3, #60	; 0x3c
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	b298      	uxth	r0, r3
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3344      	adds	r3, #68	; 0x44
 8002ca8:	4602      	mov	r2, r0
 8002caa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3340      	adds	r3, #64	; 0x40
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3348      	adds	r3, #72	; 0x48
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	334c      	adds	r3, #76	; 0x4c
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3354      	adds	r3, #84	; 0x54
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3af      	bcc.n	8002c6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	e044      	b.n	8002d9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3b5      	bcc.n	8002d12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	687e      	ldr	r6, [r7, #4]
 8002dae:	466d      	mov	r5, sp
 8002db0:	f106 0410 	add.w	r4, r6, #16
 8002db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dc4:	1d33      	adds	r3, r6, #4
 8002dc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	f002 fa73 	bl	80052b4 <USB_DevInit>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e014      	b.n	8002e0a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d102      	bne.n	8002dfe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f80b 	bl	8002e14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fc31 	bl	800566a <USB_DevDisconnect>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	10000003 	.word	0x10000003

08002e5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e291      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8087 	beq.w	8002fae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea0:	4b96      	ldr	r3, [pc, #600]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eac:	4b93      	ldr	r3, [pc, #588]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d112      	bne.n	8002ede <HAL_RCC_OscConfig+0x62>
 8002eb8:	4b90      	ldr	r3, [pc, #576]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec4:	d10b      	bne.n	8002ede <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec6:	4b8d      	ldr	r3, [pc, #564]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d06c      	beq.n	8002fac <HAL_RCC_OscConfig+0x130>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d168      	bne.n	8002fac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e26b      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x7a>
 8002ee8:	4b84      	ldr	r3, [pc, #528]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a83      	ldr	r2, [pc, #524]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e02e      	b.n	8002f54 <HAL_RCC_OscConfig+0xd8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x9c>
 8002efe:	4b7f      	ldr	r3, [pc, #508]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7e      	ldr	r2, [pc, #504]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b7c      	ldr	r3, [pc, #496]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7b      	ldr	r2, [pc, #492]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e01d      	b.n	8002f54 <HAL_RCC_OscConfig+0xd8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0xc0>
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a75      	ldr	r2, [pc, #468]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b73      	ldr	r3, [pc, #460]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a72      	ldr	r2, [pc, #456]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0xd8>
 8002f3c:	4b6f      	ldr	r3, [pc, #444]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a6e      	ldr	r2, [pc, #440]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6b      	ldr	r2, [pc, #428]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f8f6 	bl	800114c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe f8f2 	bl	800114c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e21f      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b61      	ldr	r3, [pc, #388]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0xe8>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe f8e2 	bl	800114c <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe f8de 	bl	800114c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e20b      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	4b57      	ldr	r3, [pc, #348]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x110>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d069      	beq.n	800308e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fba:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc6:	4b4d      	ldr	r3, [pc, #308]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d11c      	bne.n	800300c <HAL_RCC_OscConfig+0x190>
 8002fd2:	4b4a      	ldr	r3, [pc, #296]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d116      	bne.n	800300c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x17a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e1df      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	493d      	ldr	r1, [pc, #244]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	e040      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d023      	beq.n	800305c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003014:	4b39      	ldr	r3, [pc, #228]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a38      	ldr	r2, [pc, #224]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe f894 	bl	800114c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fe f890 	bl	800114c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1bd      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303a:	4b30      	ldr	r3, [pc, #192]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4929      	ldr	r1, [pc, #164]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
 800305a:	e018      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe f870 	bl	800114c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe f86c 	bl	800114c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e199      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d038      	beq.n	800310c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d019      	beq.n	80030d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 80030a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe f84d 	bl	800114c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b6:	f7fe f849 	bl	800114c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e176      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x23a>
 80030d4:	e01a      	b.n	800310c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 80030d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030da:	4a08      	ldr	r2, [pc, #32]	; (80030fc <HAL_RCC_OscConfig+0x280>)
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e2:	f7fe f833 	bl	800114c <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ea:	f7fe f82f 	bl	800114c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d903      	bls.n	8003100 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e15c      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
 80030fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b91      	ldr	r3, [pc, #580]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ee      	bne.n	80030ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a4 	beq.w	8003262 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4b8b      	ldr	r3, [pc, #556]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	4b88      	ldr	r3, [pc, #544]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a87      	ldr	r2, [pc, #540]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b85      	ldr	r3, [pc, #532]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	4b82      	ldr	r3, [pc, #520]	; (800334c <HAL_RCC_OscConfig+0x4d0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d118      	bne.n	8003180 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800314e:	4b7f      	ldr	r3, [pc, #508]	; (800334c <HAL_RCC_OscConfig+0x4d0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7e      	ldr	r2, [pc, #504]	; (800334c <HAL_RCC_OscConfig+0x4d0>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315a:	f7fd fff7 	bl	800114c <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003162:	f7fd fff3 	bl	800114c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	; 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e120      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003174:	4b75      	ldr	r3, [pc, #468]	; (800334c <HAL_RCC_OscConfig+0x4d0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x31a>
 8003188:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	e02d      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x33c>
 800319e:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a69      	ldr	r2, [pc, #420]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	4b67      	ldr	r3, [pc, #412]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a66      	ldr	r2, [pc, #408]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
 80031b6:	e01c      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d10c      	bne.n	80031da <HAL_RCC_OscConfig+0x35e>
 80031c0:	4b61      	ldr	r3, [pc, #388]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a60      	ldr	r2, [pc, #384]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a5d      	ldr	r2, [pc, #372]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
 80031d8:	e00b      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
 80031da:	4b5b      	ldr	r3, [pc, #364]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a5a      	ldr	r2, [pc, #360]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	4a57      	ldr	r2, [pc, #348]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80031ec:	f023 0304 	bic.w	r3, r3, #4
 80031f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d015      	beq.n	8003226 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fd ffa7 	bl	800114c <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fd ffa3 	bl	800114c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e0ce      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ee      	beq.n	8003202 <HAL_RCC_OscConfig+0x386>
 8003224:	e014      	b.n	8003250 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fd ff91 	bl	800114c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fd ff8d 	bl	800114c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0b8      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	4b40      	ldr	r3, [pc, #256]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ee      	bne.n	800322e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d105      	bne.n	8003262 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003256:	4b3c      	ldr	r3, [pc, #240]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a3b      	ldr	r2, [pc, #236]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800325c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80a4 	beq.w	80033b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b08      	cmp	r3, #8
 8003276:	d06b      	beq.n	8003350 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d149      	bne.n	8003314 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a30      	ldr	r2, [pc, #192]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800328a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fd ff5e 	bl	800114c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003294:	f7fd ff5a 	bl	800114c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e087      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	019b      	lsls	r3, r3, #6
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	3b01      	subs	r3, #1
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	4313      	orrs	r3, r2
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80032da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 80032e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd ff2e 	bl	800114c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fd ff2a 	bl	800114c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e057      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x478>
 8003312:	e04f      	b.n	80033b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0b      	ldr	r2, [pc, #44]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800331a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fd ff14 	bl	800114c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003328:	f7fd ff10 	bl	800114c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e03d      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_RCC_OscConfig+0x4cc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x4ac>
 8003346:	e035      	b.n	80033b4 <HAL_RCC_OscConfig+0x538>
 8003348:	40023800 	.word	0x40023800
 800334c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <HAL_RCC_OscConfig+0x544>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d028      	beq.n	80033b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d121      	bne.n	80033b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d11a      	bne.n	80033b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003386:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003388:	4293      	cmp	r3, r2
 800338a:	d111      	bne.n	80033b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	3b01      	subs	r3, #1
 800339a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0d0      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d910      	bls.n	800340c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 020f 	bic.w	r2, r3, #15
 80033f2:	4965      	ldr	r1, [pc, #404]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800342a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003446:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d040      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e073      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06b      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4936      	ldr	r1, [pc, #216]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b8:	f7fd fe48 	bl	800114c <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7fd fe44 	bl	800114c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e053      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d210      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 020f 	bic.w	r2, r3, #15
 80034fe:	4922      	ldr	r1, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003556:	f000 f821 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	; (8003590 <HAL_RCC_ClockConfig+0x1cc>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1d0>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1d4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd faf2 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023c00 	.word	0x40023c00
 800358c:	40023800 	.word	0x40023800
 8003590:	08019b84 	.word	0x08019b84
 8003594:	20000000 	.word	0x20000000
 8003598:	20000004 	.word	0x20000004

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a0:	b094      	sub	sp, #80	; 0x50
 80035a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	647b      	str	r3, [r7, #68]	; 0x44
 80035a8:	2300      	movs	r3, #0
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ac:	2300      	movs	r3, #0
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b4:	4b79      	ldr	r3, [pc, #484]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d00d      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x40>
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	f200 80e1 	bhi.w	8003788 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ce:	e0db      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d4:	e0db      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d6:	4b73      	ldr	r3, [pc, #460]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80035d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035da:	e0d8      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035dc:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	2200      	movs	r2, #0
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
 8003606:	2300      	movs	r3, #0
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
 800360a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800360e:	4622      	mov	r2, r4
 8003610:	462b      	mov	r3, r5
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	0159      	lsls	r1, r3, #5
 800361c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003620:	0150      	lsls	r0, r2, #5
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4621      	mov	r1, r4
 8003628:	1a51      	subs	r1, r2, r1
 800362a:	6139      	str	r1, [r7, #16]
 800362c:	4629      	mov	r1, r5
 800362e:	eb63 0301 	sbc.w	r3, r3, r1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003640:	4659      	mov	r1, fp
 8003642:	018b      	lsls	r3, r1, #6
 8003644:	4651      	mov	r1, sl
 8003646:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364a:	4651      	mov	r1, sl
 800364c:	018a      	lsls	r2, r1, #6
 800364e:	4651      	mov	r1, sl
 8003650:	ebb2 0801 	subs.w	r8, r2, r1
 8003654:	4659      	mov	r1, fp
 8003656:	eb63 0901 	sbc.w	r9, r3, r1
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800366e:	4690      	mov	r8, r2
 8003670:	4699      	mov	r9, r3
 8003672:	4623      	mov	r3, r4
 8003674:	eb18 0303 	adds.w	r3, r8, r3
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	462b      	mov	r3, r5
 800367c:	eb49 0303 	adc.w	r3, r9, r3
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800368e:	4629      	mov	r1, r5
 8003690:	024b      	lsls	r3, r1, #9
 8003692:	4621      	mov	r1, r4
 8003694:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003698:	4621      	mov	r1, r4
 800369a:	024a      	lsls	r2, r1, #9
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a2:	2200      	movs	r2, #0
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ac:	f7fc fe08 	bl	80002c0 <__aeabi_uldivmod>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4613      	mov	r3, r2
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b8:	e058      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	099b      	lsrs	r3, r3, #6
 80036c0:	2200      	movs	r2, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	4611      	mov	r1, r2
 80036c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	2300      	movs	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	f04f 0000 	mov.w	r0, #0
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	0159      	lsls	r1, r3, #5
 80036e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e6:	0150      	lsls	r0, r2, #5
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4641      	mov	r1, r8
 80036ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80036f2:	4649      	mov	r1, r9
 80036f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003704:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003708:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800370c:	ebb2 040a 	subs.w	r4, r2, sl
 8003710:	eb63 050b 	sbc.w	r5, r3, fp
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	00eb      	lsls	r3, r5, #3
 800371e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003722:	00e2      	lsls	r2, r4, #3
 8003724:	4614      	mov	r4, r2
 8003726:	461d      	mov	r5, r3
 8003728:	4643      	mov	r3, r8
 800372a:	18e3      	adds	r3, r4, r3
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	464b      	mov	r3, r9
 8003730:	eb45 0303 	adc.w	r3, r5, r3
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003742:	4629      	mov	r1, r5
 8003744:	028b      	lsls	r3, r1, #10
 8003746:	4621      	mov	r1, r4
 8003748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800374c:	4621      	mov	r1, r4
 800374e:	028a      	lsls	r2, r1, #10
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003756:	2200      	movs	r2, #0
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	61fa      	str	r2, [r7, #28]
 800375c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003760:	f7fc fdae 	bl	80002c0 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4613      	mov	r3, r2
 800376a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	3301      	adds	r3, #1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800377c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800377e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003786:	e002      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800378c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003790:	4618      	mov	r0, r3
 8003792:	3750      	adds	r7, #80	; 0x50
 8003794:	46bd      	mov	sp, r7
 8003796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	007a1200 	.word	0x007a1200

080037a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c4:	f7ff fff0 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0a9b      	lsrs	r3, r3, #10
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08019b94 	.word	0x08019b94

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037ec:	f7ff ffdc 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0b5b      	lsrs	r3, r3, #13
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4903      	ldr	r1, [pc, #12]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800
 800380c:	08019b94 	.word	0x08019b94

08003810 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	220f      	movs	r2, #15
 800381e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003820:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_GetClockConfig+0x5c>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <HAL_RCC_GetClockConfig+0x5c>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <HAL_RCC_GetClockConfig+0x5c>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_GetClockConfig+0x5c>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_RCC_GetClockConfig+0x60>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 020f 	and.w	r2, r3, #15
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	601a      	str	r2, [r3, #0]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40023c00 	.word	0x40023c00

08003874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d012      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800389c:	4b69      	ldr	r3, [pc, #420]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a68      	ldr	r2, [pc, #416]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038a6:	6093      	str	r3, [r2, #8]
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	4964      	ldr	r1, [pc, #400]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d017      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ce:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	4959      	ldr	r1, [pc, #356]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d017      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800390a:	4b4e      	ldr	r3, [pc, #312]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	494a      	ldr	r1, [pc, #296]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003946:	2301      	movs	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 808b 	beq.w	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a39      	ldr	r2, [pc, #228]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
 8003964:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fd fbe6 	bl	800114c <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fd fbe2 	bl	800114c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e357      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d035      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d02e      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039e8:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d114      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd fbaa 	bl	800114c <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fd fba6 	bl	800114c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e319      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ee      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2a:	d111      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	4901      	ldr	r1, [pc, #4]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	0ffffcff 	.word	0x0ffffcff
 8003a50:	4baa      	ldr	r3, [pc, #680]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4aa9      	ldr	r2, [pc, #676]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a5a:	6093      	str	r3, [r2, #8]
 8003a5c:	4ba7      	ldr	r3, [pc, #668]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	49a4      	ldr	r1, [pc, #656]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a7a:	4ba0      	ldr	r3, [pc, #640]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	4a9e      	ldr	r2, [pc, #632]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a8a:	4b9c      	ldr	r3, [pc, #624]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	4999      	ldr	r1, [pc, #612]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa8:	4b94      	ldr	r3, [pc, #592]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab6:	4991      	ldr	r1, [pc, #580]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aca:	4b8c      	ldr	r3, [pc, #560]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	4988      	ldr	r1, [pc, #544]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aec:	4b83      	ldr	r3, [pc, #524]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	4980      	ldr	r1, [pc, #512]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b0e:	4b7b      	ldr	r3, [pc, #492]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4977      	ldr	r1, [pc, #476]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b30:	4b72      	ldr	r3, [pc, #456]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	496f      	ldr	r1, [pc, #444]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b52:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f023 020c 	bic.w	r2, r3, #12
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b60:	4966      	ldr	r1, [pc, #408]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	495e      	ldr	r1, [pc, #376]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b96:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	4955      	ldr	r1, [pc, #340]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb8:	4b50      	ldr	r3, [pc, #320]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	494d      	ldr	r1, [pc, #308]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bda:	4b48      	ldr	r3, [pc, #288]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	4944      	ldr	r1, [pc, #272]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	493c      	ldr	r1, [pc, #240]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c1e:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	4933      	ldr	r1, [pc, #204]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c40:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4e:	492b      	ldr	r1, [pc, #172]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d011      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c70:	4922      	ldr	r1, [pc, #136]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca2:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb0:	4912      	ldr	r1, [pc, #72]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd4:	4909      	ldr	r1, [pc, #36]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d006      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80d9 	beq.w	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cf0:	4b02      	ldr	r3, [pc, #8]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a01      	ldr	r2, [pc, #4]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cfa:	e001      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d02:	f7fd fa23 	bl	800114c <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d0a:	f7fd fa1f 	bl	800114c <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d901      	bls.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e194      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d1c:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d021      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11d      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d3c:	4b64      	ldr	r3, [pc, #400]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d4a:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d50:	0e1b      	lsrs	r3, r3, #24
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	019a      	lsls	r2, r3, #6
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	071b      	lsls	r3, r3, #28
 8003d70:	4957      	ldr	r1, [pc, #348]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da2:	d129      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003da4:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	0f1b      	lsrs	r3, r3, #28
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	071b      	lsls	r3, r3, #28
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de6:	f023 021f 	bic.w	r2, r3, #31
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	3b01      	subs	r3, #1
 8003df0:	4937      	ldr	r1, [pc, #220]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01d      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e04:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0a:	0e1b      	lsrs	r3, r3, #24
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e12:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e18:	0f1b      	lsrs	r3, r3, #28
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	019a      	lsls	r2, r3, #6
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	071b      	lsls	r3, r3, #28
 8003e38:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d011      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	019a      	lsls	r2, r3, #6
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	041b      	lsls	r3, r3, #16
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	071b      	lsls	r3, r3, #28
 8003e68:	4919      	ldr	r1, [pc, #100]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fd f966 	bl	800114c <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e84:	f7fd f962 	bl	800114c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0d7      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 80cd 	bne.w	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb6:	f7fd f949 	bl	800114c <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ebe:	f7fd f945 	bl	800114c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d903      	bls.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0ba      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ed0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ed4:	4b5e      	ldr	r3, [pc, #376]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee0:	d0ed      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d12a      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f0a:	4b51      	ldr	r3, [pc, #324]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f18:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	0f1b      	lsrs	r3, r3, #28
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	019a      	lsls	r2, r3, #6
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	071b      	lsls	r3, r3, #28
 8003f3e:	4944      	ldr	r1, [pc, #272]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f46:	4b42      	ldr	r3, [pc, #264]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	493d      	ldr	r1, [pc, #244]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d022      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f74:	d11d      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	0e1b      	lsrs	r3, r3, #24
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	0f1b      	lsrs	r3, r3, #28
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	019a      	lsls	r2, r3, #6
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	4929      	ldr	r1, [pc, #164]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d028      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	0e1b      	lsrs	r3, r3, #24
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	4917      	ldr	r1, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4911      	ldr	r1, [pc, #68]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fd f896 	bl	800114c <HAL_GetTick>
 8004020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004024:	f7fd f892 	bl	800114c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e007      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004042:	d1ef      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800

08004054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e049      	b.n	80040fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f841 	bl	8004102 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 fa00 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d001      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e054      	b.n	80041da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d022      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415a:	d01d      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a22      	ldr	r2, [pc, #136]	; (80041ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d018      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d013      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00e      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <HAL_TIM_Base_Start_IT+0xe4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_TIM_Base_Start_IT+0xe8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d115      	bne.n	80041c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_TIM_Base_Start_IT+0xec>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d015      	beq.n	80041d6 <HAL_TIM_Base_Start_IT+0xbe>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	d011      	beq.n	80041d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c2:	e008      	b.n	80041d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	e000      	b.n	80041d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40010400 	.word	0x40010400
 80041fc:	40014000 	.word	0x40014000
 8004200:	40001800 	.word	0x40001800
 8004204:	00010007 	.word	0x00010007

08004208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b02      	cmp	r3, #2
 800421c:	d122      	bne.n	8004264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b02      	cmp	r3, #2
 800422a:	d11b      	bne.n	8004264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0202 	mvn.w	r2, #2
 8004234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f905 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8f7 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f908 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b04      	cmp	r3, #4
 8004270:	d122      	bne.n	80042b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d11b      	bne.n	80042b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0204 	mvn.w	r2, #4
 8004288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8db 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8cd 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f8de 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d122      	bne.n	800430c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d11b      	bne.n	800430c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0208 	mvn.w	r2, #8
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2204      	movs	r2, #4
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8b1 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8a3 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8b4 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b10      	cmp	r3, #16
 8004318:	d122      	bne.n	8004360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b10      	cmp	r3, #16
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0210 	mvn.w	r2, #16
 8004330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2208      	movs	r2, #8
 8004336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f887 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f879 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f88a 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d10e      	bne.n	800438c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b01      	cmp	r3, #1
 800437a:	d107      	bne.n	800438c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0201 	mvn.w	r2, #1
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc fad0 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d10e      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d107      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f91a 	bl	80045ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c6:	d10e      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b80      	cmp	r3, #128	; 0x80
 80043d4:	d107      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f90d 	bl	8004600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d10e      	bne.n	8004412 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d107      	bne.n	8004412 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800440a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f838 	bl	8004482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d10e      	bne.n	800443e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b20      	cmp	r3, #32
 800442c:	d107      	bne.n	800443e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0220 	mvn.w	r2, #32
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8cd 	bl	80045d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a40      	ldr	r2, [pc, #256]	; (80045ac <TIM_Base_SetConfig+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d00f      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3d      	ldr	r2, [pc, #244]	; (80045b0 <TIM_Base_SetConfig+0x118>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3c      	ldr	r2, [pc, #240]	; (80045b4 <TIM_Base_SetConfig+0x11c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3b      	ldr	r2, [pc, #236]	; (80045b8 <TIM_Base_SetConfig+0x120>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3a      	ldr	r2, [pc, #232]	; (80045bc <TIM_Base_SetConfig+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2f      	ldr	r2, [pc, #188]	; (80045ac <TIM_Base_SetConfig+0x114>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d027      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2c      	ldr	r2, [pc, #176]	; (80045b0 <TIM_Base_SetConfig+0x118>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d023      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2b      	ldr	r2, [pc, #172]	; (80045b4 <TIM_Base_SetConfig+0x11c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01f      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2a      	ldr	r2, [pc, #168]	; (80045b8 <TIM_Base_SetConfig+0x120>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a29      	ldr	r2, [pc, #164]	; (80045bc <TIM_Base_SetConfig+0x124>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d017      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <TIM_Base_SetConfig+0x128>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a27      	ldr	r2, [pc, #156]	; (80045c4 <TIM_Base_SetConfig+0x12c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00f      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <TIM_Base_SetConfig+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00b      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a25      	ldr	r2, [pc, #148]	; (80045cc <TIM_Base_SetConfig+0x134>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <TIM_Base_SetConfig+0x138>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a23      	ldr	r2, [pc, #140]	; (80045d4 <TIM_Base_SetConfig+0x13c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <TIM_Base_SetConfig+0x114>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_Base_SetConfig+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <TIM_Base_SetConfig+0x124>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	615a      	str	r2, [r3, #20]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800
 80045b8:	40000c00 	.word	0x40000c00
 80045bc:	40010400 	.word	0x40010400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800
 80045cc:	40001800 	.word	0x40001800
 80045d0:	40001c00 	.word	0x40001c00
 80045d4:	40002000 	.word	0x40002000

080045d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e040      	b.n	80046a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc f9b8 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	; 0x24
 8004640:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f974 	bl	8004940 <UART_SetConfig>
 8004658:	4603      	mov	r3, r0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e022      	b.n	80046a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fbcc 	bl	8004e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800467e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800468e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fc53 	bl	8004f4c <UART_CheckIdleState>
 80046a6:	4603      	mov	r3, r0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d171      	bne.n	80047ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Transmit+0x24>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e06a      	b.n	80047ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2221      	movs	r2, #33	; 0x21
 80046e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e6:	f7fc fd31 	bl	800114c <HAL_GetTick>
 80046ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d108      	bne.n	8004718 <HAL_UART_Transmit+0x68>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e003      	b.n	8004720 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004720:	e02c      	b.n	800477c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fc44 	bl	8004fba <UART_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e038      	b.n	80047ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3302      	adds	r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e007      	b.n	800476a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1cc      	bne.n	8004722 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fc11 	bl	8004fba <UART_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e005      	b.n	80047ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e000      	b.n	80047ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b08a      	sub	sp, #40	; 0x28
 80047ba:	af02      	add	r7, sp, #8
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	f040 80b1 	bne.w	8004934 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_UART_Receive+0x28>
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0a9      	b.n	8004936 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2222      	movs	r2, #34	; 0x22
 80047ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f8:	f7fc fca8 	bl	800114c <HAL_GetTick>
 80047fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004816:	d10e      	bne.n	8004836 <HAL_UART_Receive+0x80>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d105      	bne.n	800482c <HAL_UART_Receive+0x76>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004826:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800482a:	e02d      	b.n	8004888 <HAL_UART_Receive+0xd2>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22ff      	movs	r2, #255	; 0xff
 8004830:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004834:	e028      	b.n	8004888 <HAL_UART_Receive+0xd2>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10d      	bne.n	800485a <HAL_UART_Receive+0xa4>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_UART_Receive+0x9a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	22ff      	movs	r2, #255	; 0xff
 800484a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800484e:	e01b      	b.n	8004888 <HAL_UART_Receive+0xd2>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	227f      	movs	r2, #127	; 0x7f
 8004854:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004858:	e016      	b.n	8004888 <HAL_UART_Receive+0xd2>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004862:	d10d      	bne.n	8004880 <HAL_UART_Receive+0xca>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_UART_Receive+0xc0>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	227f      	movs	r2, #127	; 0x7f
 8004870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004874:	e008      	b.n	8004888 <HAL_UART_Receive+0xd2>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	223f      	movs	r2, #63	; 0x3f
 800487a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800487e:	e003      	b.n	8004888 <HAL_UART_Receive+0xd2>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800488e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004898:	d108      	bne.n	80048ac <HAL_UART_Receive+0xf6>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e003      	b.n	80048b4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80048b4:	e032      	b.n	800491c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2120      	movs	r1, #32
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fb7a 	bl	8004fba <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e032      	b.n	8004936 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10c      	bne.n	80048f0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	b29a      	uxth	r2, r3
 80048de:	8a7b      	ldrh	r3, [r7, #18]
 80048e0:	4013      	ands	r3, r2
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	3302      	adds	r3, #2
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	e00c      	b.n	800490a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	8a7b      	ldrh	r3, [r7, #18]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	4013      	ands	r3, r2
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	3301      	adds	r3, #1
 8004908:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1c6      	bne.n	80048b6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4ba6      	ldr	r3, [pc, #664]	; (8004c04 <UART_SetConfig+0x2c4>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	6979      	ldr	r1, [r7, #20]
 8004974:	430b      	orrs	r3, r1
 8004976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a94      	ldr	r2, [pc, #592]	; (8004c08 <UART_SetConfig+0x2c8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d120      	bne.n	80049fe <UART_SetConfig+0xbe>
 80049bc:	4b93      	ldr	r3, [pc, #588]	; (8004c0c <UART_SetConfig+0x2cc>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d816      	bhi.n	80049f8 <UART_SetConfig+0xb8>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x90>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049e7 	.word	0x080049e7
 80049dc:	080049f3 	.word	0x080049f3
 80049e0:	2301      	movs	r3, #1
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e150      	b.n	8004c88 <UART_SetConfig+0x348>
 80049e6:	2302      	movs	r3, #2
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e14d      	b.n	8004c88 <UART_SetConfig+0x348>
 80049ec:	2304      	movs	r3, #4
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e14a      	b.n	8004c88 <UART_SetConfig+0x348>
 80049f2:	2308      	movs	r3, #8
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e147      	b.n	8004c88 <UART_SetConfig+0x348>
 80049f8:	2310      	movs	r3, #16
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e144      	b.n	8004c88 <UART_SetConfig+0x348>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a83      	ldr	r2, [pc, #524]	; (8004c10 <UART_SetConfig+0x2d0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d132      	bne.n	8004a6e <UART_SetConfig+0x12e>
 8004a08:	4b80      	ldr	r3, [pc, #512]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d828      	bhi.n	8004a68 <UART_SetConfig+0x128>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0xdc>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a69 	.word	0x08004a69
 8004a24:	08004a69 	.word	0x08004a69
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a5d 	.word	0x08004a5d
 8004a30:	08004a69 	.word	0x08004a69
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004a69 	.word	0x08004a69
 8004a3c:	08004a57 	.word	0x08004a57
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a69 	.word	0x08004a69
 8004a4c:	08004a63 	.word	0x08004a63
 8004a50:	2300      	movs	r3, #0
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e118      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a56:	2302      	movs	r3, #2
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e115      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e112      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a62:	2308      	movs	r3, #8
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e10f      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e10c      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a68      	ldr	r2, [pc, #416]	; (8004c14 <UART_SetConfig+0x2d4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d120      	bne.n	8004aba <UART_SetConfig+0x17a>
 8004a78:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a82:	2b30      	cmp	r3, #48	; 0x30
 8004a84:	d013      	beq.n	8004aae <UART_SetConfig+0x16e>
 8004a86:	2b30      	cmp	r3, #48	; 0x30
 8004a88:	d814      	bhi.n	8004ab4 <UART_SetConfig+0x174>
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d009      	beq.n	8004aa2 <UART_SetConfig+0x162>
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d810      	bhi.n	8004ab4 <UART_SetConfig+0x174>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <UART_SetConfig+0x15c>
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d006      	beq.n	8004aa8 <UART_SetConfig+0x168>
 8004a9a:	e00b      	b.n	8004ab4 <UART_SetConfig+0x174>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e0f2      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e0ef      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e0ec      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e0e9      	b.n	8004c88 <UART_SetConfig+0x348>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e0e6      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a56      	ldr	r2, [pc, #344]	; (8004c18 <UART_SetConfig+0x2d8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d120      	bne.n	8004b06 <UART_SetConfig+0x1c6>
 8004ac4:	4b51      	ldr	r3, [pc, #324]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ace:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad0:	d013      	beq.n	8004afa <UART_SetConfig+0x1ba>
 8004ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad4:	d814      	bhi.n	8004b00 <UART_SetConfig+0x1c0>
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d009      	beq.n	8004aee <UART_SetConfig+0x1ae>
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d810      	bhi.n	8004b00 <UART_SetConfig+0x1c0>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <UART_SetConfig+0x1a8>
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d006      	beq.n	8004af4 <UART_SetConfig+0x1b4>
 8004ae6:	e00b      	b.n	8004b00 <UART_SetConfig+0x1c0>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e0cc      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e0c9      	b.n	8004c88 <UART_SetConfig+0x348>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e0c6      	b.n	8004c88 <UART_SetConfig+0x348>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e0c3      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e0c0      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a44      	ldr	r2, [pc, #272]	; (8004c1c <UART_SetConfig+0x2dc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d125      	bne.n	8004b5c <UART_SetConfig+0x21c>
 8004b10:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1e:	d017      	beq.n	8004b50 <UART_SetConfig+0x210>
 8004b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b24:	d817      	bhi.n	8004b56 <UART_SetConfig+0x216>
 8004b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2a:	d00b      	beq.n	8004b44 <UART_SetConfig+0x204>
 8004b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b30:	d811      	bhi.n	8004b56 <UART_SetConfig+0x216>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <UART_SetConfig+0x1fe>
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d006      	beq.n	8004b4a <UART_SetConfig+0x20a>
 8004b3c:	e00b      	b.n	8004b56 <UART_SetConfig+0x216>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e0a1      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b44:	2302      	movs	r3, #2
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e09e      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e09b      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b50:	2308      	movs	r3, #8
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e098      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b56:	2310      	movs	r3, #16
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e095      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <UART_SetConfig+0x2e0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d125      	bne.n	8004bb2 <UART_SetConfig+0x272>
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b74:	d017      	beq.n	8004ba6 <UART_SetConfig+0x266>
 8004b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7a:	d817      	bhi.n	8004bac <UART_SetConfig+0x26c>
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b80:	d00b      	beq.n	8004b9a <UART_SetConfig+0x25a>
 8004b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b86:	d811      	bhi.n	8004bac <UART_SetConfig+0x26c>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <UART_SetConfig+0x254>
 8004b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b90:	d006      	beq.n	8004ba0 <UART_SetConfig+0x260>
 8004b92:	e00b      	b.n	8004bac <UART_SetConfig+0x26c>
 8004b94:	2301      	movs	r3, #1
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e076      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e073      	b.n	8004c88 <UART_SetConfig+0x348>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e070      	b.n	8004c88 <UART_SetConfig+0x348>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e06d      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bac:	2310      	movs	r3, #16
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e06a      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <UART_SetConfig+0x2e4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d138      	bne.n	8004c2e <UART_SetConfig+0x2ee>
 8004bbc:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bca:	d017      	beq.n	8004bfc <UART_SetConfig+0x2bc>
 8004bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd0:	d82a      	bhi.n	8004c28 <UART_SetConfig+0x2e8>
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	d00b      	beq.n	8004bf0 <UART_SetConfig+0x2b0>
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d824      	bhi.n	8004c28 <UART_SetConfig+0x2e8>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <UART_SetConfig+0x2aa>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	d006      	beq.n	8004bf6 <UART_SetConfig+0x2b6>
 8004be8:	e01e      	b.n	8004c28 <UART_SetConfig+0x2e8>
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e04b      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e048      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e045      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e042      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c02:	bf00      	nop
 8004c04:	efff69f3 	.word	0xefff69f3
 8004c08:	40011000 	.word	0x40011000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40004400 	.word	0x40004400
 8004c14:	40004800 	.word	0x40004800
 8004c18:	40004c00 	.word	0x40004c00
 8004c1c:	40005000 	.word	0x40005000
 8004c20:	40011400 	.word	0x40011400
 8004c24:	40007800 	.word	0x40007800
 8004c28:	2310      	movs	r3, #16
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e02c      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a72      	ldr	r2, [pc, #456]	; (8004dfc <UART_SetConfig+0x4bc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d125      	bne.n	8004c84 <UART_SetConfig+0x344>
 8004c38:	4b71      	ldr	r3, [pc, #452]	; (8004e00 <UART_SetConfig+0x4c0>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c46:	d017      	beq.n	8004c78 <UART_SetConfig+0x338>
 8004c48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c4c:	d817      	bhi.n	8004c7e <UART_SetConfig+0x33e>
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c52:	d00b      	beq.n	8004c6c <UART_SetConfig+0x32c>
 8004c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c58:	d811      	bhi.n	8004c7e <UART_SetConfig+0x33e>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <UART_SetConfig+0x326>
 8004c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c62:	d006      	beq.n	8004c72 <UART_SetConfig+0x332>
 8004c64:	e00b      	b.n	8004c7e <UART_SetConfig+0x33e>
 8004c66:	2300      	movs	r3, #0
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e00d      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e00a      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c72:	2304      	movs	r3, #4
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e007      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e004      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c7e:	2310      	movs	r3, #16
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e001      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c84:	2310      	movs	r3, #16
 8004c86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d15b      	bne.n	8004d4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d828      	bhi.n	8004cea <UART_SetConfig+0x3aa>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <UART_SetConfig+0x360>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cc5 	.word	0x08004cc5
 8004ca4:	08004ccd 	.word	0x08004ccd
 8004ca8:	08004cd5 	.word	0x08004cd5
 8004cac:	08004ceb 	.word	0x08004ceb
 8004cb0:	08004cdb 	.word	0x08004cdb
 8004cb4:	08004ceb 	.word	0x08004ceb
 8004cb8:	08004ceb 	.word	0x08004ceb
 8004cbc:	08004ceb 	.word	0x08004ceb
 8004cc0:	08004ce3 	.word	0x08004ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc4:	f7fe fd7c 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8004cc8:	61b8      	str	r0, [r7, #24]
        break;
 8004cca:	e013      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ccc:	f7fe fd8c 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004cd0:	61b8      	str	r0, [r7, #24]
        break;
 8004cd2:	e00f      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd4:	4b4b      	ldr	r3, [pc, #300]	; (8004e04 <UART_SetConfig+0x4c4>)
 8004cd6:	61bb      	str	r3, [r7, #24]
        break;
 8004cd8:	e00c      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cda:	f7fe fc5f 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004cde:	61b8      	str	r0, [r7, #24]
        break;
 8004ce0:	e008      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce6:	61bb      	str	r3, [r7, #24]
        break;
 8004ce8:	e004      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8004cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d074      	beq.n	8004de4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	005a      	lsls	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	441a      	add	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	2b0f      	cmp	r3, #15
 8004d14:	d916      	bls.n	8004d44 <UART_SetConfig+0x404>
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1c:	d212      	bcs.n	8004d44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f023 030f 	bic.w	r3, r3, #15
 8004d26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	89fb      	ldrh	r3, [r7, #14]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	89fa      	ldrh	r2, [r7, #14]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	e04f      	b.n	8004de4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	77bb      	strb	r3, [r7, #30]
 8004d48:	e04c      	b.n	8004de4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d4a:	7ffb      	ldrb	r3, [r7, #31]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d828      	bhi.n	8004da2 <UART_SetConfig+0x462>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x418>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004d93 	.word	0x08004d93
 8004d6c:	08004da3 	.word	0x08004da3
 8004d70:	08004da3 	.word	0x08004da3
 8004d74:	08004da3 	.word	0x08004da3
 8004d78:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fe fd20 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8004d80:	61b8      	str	r0, [r7, #24]
        break;
 8004d82:	e013      	b.n	8004dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d84:	f7fe fd30 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004d88:	61b8      	str	r0, [r7, #24]
        break;
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <UART_SetConfig+0x4c4>)
 8004d8e:	61bb      	str	r3, [r7, #24]
        break;
 8004d90:	e00c      	b.n	8004dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d92:	f7fe fc03 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004d96:	61b8      	str	r0, [r7, #24]
        break;
 8004d98:	e008      	b.n	8004dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	61bb      	str	r3, [r7, #24]
        break;
 8004da0:	e004      	b.n	8004dac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	77bb      	strb	r3, [r7, #30]
        break;
 8004daa:	bf00      	nop
    }

    if (pclk != 0U)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d018      	beq.n	8004de4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	085a      	lsrs	r2, r3, #1
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	441a      	add	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b0f      	cmp	r3, #15
 8004dca:	d909      	bls.n	8004de0 <UART_SetConfig+0x4a0>
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d205      	bcs.n	8004de0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	e001      	b.n	8004de4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004df0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40007c00 	.word	0x40007c00
 8004e00:	40023800 	.word	0x40023800
 8004e04:	00f42400 	.word	0x00f42400

08004e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f06:	d10a      	bne.n	8004f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f5c:	f7fc f8f6 	bl	800114c <HAL_GetTick>
 8004f60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d10e      	bne.n	8004f8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f81b 	bl	8004fba <UART_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e011      	b.n	8004fb2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b09c      	sub	sp, #112	; 0x70
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fca:	e0a7      	b.n	800511c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	f000 80a3 	beq.w	800511c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd6:	f7fc f8b9 	bl	800114c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d302      	bcc.n	8004fec <UART_WaitOnFlagUntilTimeout+0x32>
 8004fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d13f      	bne.n	800506c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005000:	667b      	str	r3, [r7, #100]	; 0x64
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800500c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005010:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e6      	bne.n	8004fec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	663b      	str	r3, [r7, #96]	; 0x60
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3308      	adds	r3, #8
 800503c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800503e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005040:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800504c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e5      	bne.n	800501e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e068      	b.n	800513e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d050      	beq.n	800511c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005088:	d148      	bne.n	800511c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005092:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	637b      	str	r3, [r7, #52]	; 0x34
 80050b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e6      	bne.n	8005094 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3308      	adds	r3, #8
 80050cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	613b      	str	r3, [r7, #16]
   return(result);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050e6:	623a      	str	r2, [r7, #32]
 80050e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	69f9      	ldr	r1, [r7, #28]
 80050ec:	6a3a      	ldr	r2, [r7, #32]
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e5      	bne.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e010      	b.n	800513e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4013      	ands	r3, r2
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	429a      	cmp	r2, r3
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	429a      	cmp	r2, r3
 8005138:	f43f af48 	beq.w	8004fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3770      	adds	r7, #112	; 0x70
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005148:	b084      	sub	sp, #16
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	f107 001c 	add.w	r0, r7, #28
 8005156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	2b01      	cmp	r3, #1
 800515e:	d120      	bne.n	80051a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <USB_CoreInit+0xac>)
 8005172:	4013      	ands	r3, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa96 	bl	80056c8 <USB_CoreReset>
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e010      	b.n	80051c4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa8a 	bl	80056c8 <USB_CoreReset>
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d10b      	bne.n	80051e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f043 0206 	orr.w	r2, r3, #6
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f043 0220 	orr.w	r2, r3, #32
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ee:	b004      	add	sp, #16
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	ffbdffbf 	.word	0xffbdffbf

080051f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f023 0201 	bic.w	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d115      	bne.n	8005268 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005248:	2001      	movs	r0, #1
 800524a:	f7fb ff8b 	bl	8001164 <HAL_Delay>
      ms++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa29 	bl	80056ac <USB_GetMode>
 800525a:	4603      	mov	r3, r0
 800525c:	2b01      	cmp	r3, #1
 800525e:	d01e      	beq.n	800529e <USB_SetCurrentMode+0x84>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b31      	cmp	r3, #49	; 0x31
 8005264:	d9f0      	bls.n	8005248 <USB_SetCurrentMode+0x2e>
 8005266:	e01a      	b.n	800529e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d115      	bne.n	800529a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800527a:	2001      	movs	r0, #1
 800527c:	f7fb ff72 	bl	8001164 <HAL_Delay>
      ms++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa10 	bl	80056ac <USB_GetMode>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <USB_SetCurrentMode+0x84>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b31      	cmp	r3, #49	; 0x31
 8005296:	d9f0      	bls.n	800527a <USB_SetCurrentMode+0x60>
 8005298:	e001      	b.n	800529e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e005      	b.n	80052aa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b32      	cmp	r3, #50	; 0x32
 80052a2:	d101      	bne.n	80052a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b4:	b084      	sub	sp, #16
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e009      	b.n	80052e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3340      	adds	r3, #64	; 0x40
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3301      	adds	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0e      	cmp	r3, #14
 80052ec:	d9f2      	bls.n	80052d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d11c      	bne.n	800532e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005302:	f043 0302 	orr.w	r3, r3, #2
 8005306:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e005      	b.n	800533a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005340:	461a      	mov	r2, r3
 8005342:	2300      	movs	r3, #0
 8005344:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534c:	4619      	mov	r1, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005354:	461a      	mov	r2, r3
 8005356:	680b      	ldr	r3, [r1, #0]
 8005358:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10c      	bne.n	800537a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005366:	2100      	movs	r1, #0
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f965 	bl	8005638 <USB_SetDevSpeed>
 800536e:	e008      	b.n	8005382 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005370:	2101      	movs	r1, #1
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f960 	bl	8005638 <USB_SetDevSpeed>
 8005378:	e003      	b.n	8005382 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800537a:	2103      	movs	r1, #3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f95b 	bl	8005638 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005382:	2110      	movs	r1, #16
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f8f3 	bl	8005570 <USB_FlushTxFifo>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f91f 	bl	80055d8 <USB_FlushRxFifo>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	461a      	mov	r2, r3
 80053b8:	2300      	movs	r3, #0
 80053ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	461a      	mov	r2, r3
 80053c4:	2300      	movs	r3, #0
 80053c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	e043      	b.n	8005456 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e4:	d118      	bne.n	8005418 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	461a      	mov	r2, r3
 80053fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e013      	b.n	800542a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	461a      	mov	r2, r3
 8005410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e008      	b.n	800542a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	461a      	mov	r2, r3
 8005426:	2300      	movs	r3, #0
 8005428:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	461a      	mov	r2, r3
 8005438:	2300      	movs	r3, #0
 800543a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	461a      	mov	r2, r3
 800544a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800544e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	3301      	adds	r3, #1
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d3b7      	bcc.n	80053ce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	e043      	b.n	80054ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800547a:	d118      	bne.n	80054ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	461a      	mov	r2, r3
 8005490:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e013      	b.n	80054c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	461a      	mov	r2, r3
 80054a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	e008      	b.n	80054c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	461a      	mov	r2, r3
 80054bc:	2300      	movs	r3, #0
 80054be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	461a      	mov	r2, r3
 80054ce:	2300      	movs	r3, #0
 80054d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054de:	461a      	mov	r2, r3
 80054e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3301      	adds	r3, #1
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d3b7      	bcc.n	8005464 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005506:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005514:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f043 0210 	orr.w	r2, r3, #16
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <USB_DevInit+0x2b4>)
 800552e:	4313      	orrs	r3, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f043 0208 	orr.w	r2, r3, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d105      	bne.n	8005558 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <USB_DevInit+0x2b8>)
 8005552:	4313      	orrs	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005564:	b004      	add	sp, #16
 8005566:	4770      	bx	lr
 8005568:	803c3800 	.word	0x803c3800
 800556c:	40000004 	.word	0x40000004

08005570 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3301      	adds	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <USB_FlushTxFifo+0x64>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d901      	bls.n	8005590 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e01b      	b.n	80055c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	daf2      	bge.n	800557e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	019b      	lsls	r3, r3, #6
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <USB_FlushTxFifo+0x64>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e006      	b.n	80055c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d0f0      	beq.n	80055a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	00030d40 	.word	0x00030d40

080055d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a11      	ldr	r2, [pc, #68]	; (8005634 <USB_FlushRxFifo+0x5c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e018      	b.n	8005628 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	daf2      	bge.n	80055e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2210      	movs	r2, #16
 8005606:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3301      	adds	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4a08      	ldr	r2, [pc, #32]	; (8005634 <USB_FlushRxFifo+0x5c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e006      	b.n	8005628 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b10      	cmp	r3, #16
 8005624:	d0f0      	beq.n	8005608 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	00030d40 	.word	0x00030d40

08005638 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	68f9      	ldr	r1, [r7, #12]
 8005654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005684:	f023 0303 	bic.w	r3, r3, #3
 8005688:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0301 	and.w	r3, r3, #1
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a13      	ldr	r2, [pc, #76]	; (800572c <USB_CoreReset+0x64>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e01b      	b.n	800571e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	daf2      	bge.n	80056d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f043 0201 	orr.w	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4a09      	ldr	r2, [pc, #36]	; (800572c <USB_CoreReset+0x64>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e006      	b.n	800571e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	d0f0      	beq.n	80056fe <USB_CoreReset+0x36>

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	00030d40 	.word	0x00030d40

08005730 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005730:	b5b0      	push	{r4, r5, r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005736:	4b96      	ldr	r3, [pc, #600]	; (8005990 <MX_LWIP_Init+0x260>)
 8005738:	22c0      	movs	r2, #192	; 0xc0
 800573a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800573c:	4b94      	ldr	r3, [pc, #592]	; (8005990 <MX_LWIP_Init+0x260>)
 800573e:	22a8      	movs	r2, #168	; 0xa8
 8005740:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 7;
 8005742:	4b93      	ldr	r3, [pc, #588]	; (8005990 <MX_LWIP_Init+0x260>)
 8005744:	2207      	movs	r2, #7
 8005746:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8005748:	4b91      	ldr	r3, [pc, #580]	; (8005990 <MX_LWIP_Init+0x260>)
 800574a:	2202      	movs	r2, #2
 800574c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800574e:	4b91      	ldr	r3, [pc, #580]	; (8005994 <MX_LWIP_Init+0x264>)
 8005750:	22ff      	movs	r2, #255	; 0xff
 8005752:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005754:	4b8f      	ldr	r3, [pc, #572]	; (8005994 <MX_LWIP_Init+0x264>)
 8005756:	22ff      	movs	r2, #255	; 0xff
 8005758:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800575a:	4b8e      	ldr	r3, [pc, #568]	; (8005994 <MX_LWIP_Init+0x264>)
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005760:	4b8c      	ldr	r3, [pc, #560]	; (8005994 <MX_LWIP_Init+0x264>)
 8005762:	2200      	movs	r2, #0
 8005764:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005766:	4b8c      	ldr	r3, [pc, #560]	; (8005998 <MX_LWIP_Init+0x268>)
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800576c:	4b8a      	ldr	r3, [pc, #552]	; (8005998 <MX_LWIP_Init+0x268>)
 800576e:	2200      	movs	r2, #0
 8005770:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005772:	4b89      	ldr	r3, [pc, #548]	; (8005998 <MX_LWIP_Init+0x268>)
 8005774:	2200      	movs	r2, #0
 8005776:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005778:	4b87      	ldr	r3, [pc, #540]	; (8005998 <MX_LWIP_Init+0x268>)
 800577a:	2200      	movs	r2, #0
 800577c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800577e:	2100      	movs	r1, #0
 8005780:	2000      	movs	r0, #0
 8005782:	f003 febb 	bl	80094fc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005786:	4b82      	ldr	r3, [pc, #520]	; (8005990 <MX_LWIP_Init+0x260>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	061a      	lsls	r2, r3, #24
 800578c:	4b80      	ldr	r3, [pc, #512]	; (8005990 <MX_LWIP_Init+0x260>)
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	041b      	lsls	r3, r3, #16
 8005792:	431a      	orrs	r2, r3
 8005794:	4b7e      	ldr	r3, [pc, #504]	; (8005990 <MX_LWIP_Init+0x260>)
 8005796:	789b      	ldrb	r3, [r3, #2]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	4313      	orrs	r3, r2
 800579c:	4a7c      	ldr	r2, [pc, #496]	; (8005990 <MX_LWIP_Init+0x260>)
 800579e:	78d2      	ldrb	r2, [r2, #3]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	061a      	lsls	r2, r3, #24
 80057a4:	4b7a      	ldr	r3, [pc, #488]	; (8005990 <MX_LWIP_Init+0x260>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	0619      	lsls	r1, r3, #24
 80057aa:	4b79      	ldr	r3, [pc, #484]	; (8005990 <MX_LWIP_Init+0x260>)
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	4319      	orrs	r1, r3
 80057b2:	4b77      	ldr	r3, [pc, #476]	; (8005990 <MX_LWIP_Init+0x260>)
 80057b4:	789b      	ldrb	r3, [r3, #2]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	430b      	orrs	r3, r1
 80057ba:	4975      	ldr	r1, [pc, #468]	; (8005990 <MX_LWIP_Init+0x260>)
 80057bc:	78c9      	ldrb	r1, [r1, #3]
 80057be:	430b      	orrs	r3, r1
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057c6:	431a      	orrs	r2, r3
 80057c8:	4b71      	ldr	r3, [pc, #452]	; (8005990 <MX_LWIP_Init+0x260>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	0619      	lsls	r1, r3, #24
 80057ce:	4b70      	ldr	r3, [pc, #448]	; (8005990 <MX_LWIP_Init+0x260>)
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	4319      	orrs	r1, r3
 80057d6:	4b6e      	ldr	r3, [pc, #440]	; (8005990 <MX_LWIP_Init+0x260>)
 80057d8:	789b      	ldrb	r3, [r3, #2]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	430b      	orrs	r3, r1
 80057de:	496c      	ldr	r1, [pc, #432]	; (8005990 <MX_LWIP_Init+0x260>)
 80057e0:	78c9      	ldrb	r1, [r1, #3]
 80057e2:	430b      	orrs	r3, r1
 80057e4:	0a1b      	lsrs	r3, r3, #8
 80057e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057ea:	431a      	orrs	r2, r3
 80057ec:	4b68      	ldr	r3, [pc, #416]	; (8005990 <MX_LWIP_Init+0x260>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	0619      	lsls	r1, r3, #24
 80057f2:	4b67      	ldr	r3, [pc, #412]	; (8005990 <MX_LWIP_Init+0x260>)
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	4319      	orrs	r1, r3
 80057fa:	4b65      	ldr	r3, [pc, #404]	; (8005990 <MX_LWIP_Init+0x260>)
 80057fc:	789b      	ldrb	r3, [r3, #2]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	430b      	orrs	r3, r1
 8005802:	4963      	ldr	r1, [pc, #396]	; (8005990 <MX_LWIP_Init+0x260>)
 8005804:	78c9      	ldrb	r1, [r1, #3]
 8005806:	430b      	orrs	r3, r1
 8005808:	0e1b      	lsrs	r3, r3, #24
 800580a:	4313      	orrs	r3, r2
 800580c:	4a63      	ldr	r2, [pc, #396]	; (800599c <MX_LWIP_Init+0x26c>)
 800580e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005810:	4b60      	ldr	r3, [pc, #384]	; (8005994 <MX_LWIP_Init+0x264>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	061a      	lsls	r2, r3, #24
 8005816:	4b5f      	ldr	r3, [pc, #380]	; (8005994 <MX_LWIP_Init+0x264>)
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	431a      	orrs	r2, r3
 800581e:	4b5d      	ldr	r3, [pc, #372]	; (8005994 <MX_LWIP_Init+0x264>)
 8005820:	789b      	ldrb	r3, [r3, #2]
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	4313      	orrs	r3, r2
 8005826:	4a5b      	ldr	r2, [pc, #364]	; (8005994 <MX_LWIP_Init+0x264>)
 8005828:	78d2      	ldrb	r2, [r2, #3]
 800582a:	4313      	orrs	r3, r2
 800582c:	061a      	lsls	r2, r3, #24
 800582e:	4b59      	ldr	r3, [pc, #356]	; (8005994 <MX_LWIP_Init+0x264>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	0619      	lsls	r1, r3, #24
 8005834:	4b57      	ldr	r3, [pc, #348]	; (8005994 <MX_LWIP_Init+0x264>)
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	041b      	lsls	r3, r3, #16
 800583a:	4319      	orrs	r1, r3
 800583c:	4b55      	ldr	r3, [pc, #340]	; (8005994 <MX_LWIP_Init+0x264>)
 800583e:	789b      	ldrb	r3, [r3, #2]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	430b      	orrs	r3, r1
 8005844:	4953      	ldr	r1, [pc, #332]	; (8005994 <MX_LWIP_Init+0x264>)
 8005846:	78c9      	ldrb	r1, [r1, #3]
 8005848:	430b      	orrs	r3, r1
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005850:	431a      	orrs	r2, r3
 8005852:	4b50      	ldr	r3, [pc, #320]	; (8005994 <MX_LWIP_Init+0x264>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	0619      	lsls	r1, r3, #24
 8005858:	4b4e      	ldr	r3, [pc, #312]	; (8005994 <MX_LWIP_Init+0x264>)
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	4319      	orrs	r1, r3
 8005860:	4b4c      	ldr	r3, [pc, #304]	; (8005994 <MX_LWIP_Init+0x264>)
 8005862:	789b      	ldrb	r3, [r3, #2]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	430b      	orrs	r3, r1
 8005868:	494a      	ldr	r1, [pc, #296]	; (8005994 <MX_LWIP_Init+0x264>)
 800586a:	78c9      	ldrb	r1, [r1, #3]
 800586c:	430b      	orrs	r3, r1
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005874:	431a      	orrs	r2, r3
 8005876:	4b47      	ldr	r3, [pc, #284]	; (8005994 <MX_LWIP_Init+0x264>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	0619      	lsls	r1, r3, #24
 800587c:	4b45      	ldr	r3, [pc, #276]	; (8005994 <MX_LWIP_Init+0x264>)
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	4319      	orrs	r1, r3
 8005884:	4b43      	ldr	r3, [pc, #268]	; (8005994 <MX_LWIP_Init+0x264>)
 8005886:	789b      	ldrb	r3, [r3, #2]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	430b      	orrs	r3, r1
 800588c:	4941      	ldr	r1, [pc, #260]	; (8005994 <MX_LWIP_Init+0x264>)
 800588e:	78c9      	ldrb	r1, [r1, #3]
 8005890:	430b      	orrs	r3, r1
 8005892:	0e1b      	lsrs	r3, r3, #24
 8005894:	4313      	orrs	r3, r2
 8005896:	4a42      	ldr	r2, [pc, #264]	; (80059a0 <MX_LWIP_Init+0x270>)
 8005898:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800589a:	4b3f      	ldr	r3, [pc, #252]	; (8005998 <MX_LWIP_Init+0x268>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	061a      	lsls	r2, r3, #24
 80058a0:	4b3d      	ldr	r3, [pc, #244]	; (8005998 <MX_LWIP_Init+0x268>)
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	041b      	lsls	r3, r3, #16
 80058a6:	431a      	orrs	r2, r3
 80058a8:	4b3b      	ldr	r3, [pc, #236]	; (8005998 <MX_LWIP_Init+0x268>)
 80058aa:	789b      	ldrb	r3, [r3, #2]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	4313      	orrs	r3, r2
 80058b0:	4a39      	ldr	r2, [pc, #228]	; (8005998 <MX_LWIP_Init+0x268>)
 80058b2:	78d2      	ldrb	r2, [r2, #3]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	061a      	lsls	r2, r3, #24
 80058b8:	4b37      	ldr	r3, [pc, #220]	; (8005998 <MX_LWIP_Init+0x268>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	0619      	lsls	r1, r3, #24
 80058be:	4b36      	ldr	r3, [pc, #216]	; (8005998 <MX_LWIP_Init+0x268>)
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	4319      	orrs	r1, r3
 80058c6:	4b34      	ldr	r3, [pc, #208]	; (8005998 <MX_LWIP_Init+0x268>)
 80058c8:	789b      	ldrb	r3, [r3, #2]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	430b      	orrs	r3, r1
 80058ce:	4932      	ldr	r1, [pc, #200]	; (8005998 <MX_LWIP_Init+0x268>)
 80058d0:	78c9      	ldrb	r1, [r1, #3]
 80058d2:	430b      	orrs	r3, r1
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058da:	431a      	orrs	r2, r3
 80058dc:	4b2e      	ldr	r3, [pc, #184]	; (8005998 <MX_LWIP_Init+0x268>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	0619      	lsls	r1, r3, #24
 80058e2:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <MX_LWIP_Init+0x268>)
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	4319      	orrs	r1, r3
 80058ea:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <MX_LWIP_Init+0x268>)
 80058ec:	789b      	ldrb	r3, [r3, #2]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	430b      	orrs	r3, r1
 80058f2:	4929      	ldr	r1, [pc, #164]	; (8005998 <MX_LWIP_Init+0x268>)
 80058f4:	78c9      	ldrb	r1, [r1, #3]
 80058f6:	430b      	orrs	r3, r1
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058fe:	431a      	orrs	r2, r3
 8005900:	4b25      	ldr	r3, [pc, #148]	; (8005998 <MX_LWIP_Init+0x268>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	0619      	lsls	r1, r3, #24
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <MX_LWIP_Init+0x268>)
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	4319      	orrs	r1, r3
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <MX_LWIP_Init+0x268>)
 8005910:	789b      	ldrb	r3, [r3, #2]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	430b      	orrs	r3, r1
 8005916:	4920      	ldr	r1, [pc, #128]	; (8005998 <MX_LWIP_Init+0x268>)
 8005918:	78c9      	ldrb	r1, [r1, #3]
 800591a:	430b      	orrs	r3, r1
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	4313      	orrs	r3, r2
 8005920:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <MX_LWIP_Init+0x274>)
 8005922:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005924:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <MX_LWIP_Init+0x278>)
 8005926:	9302      	str	r3, [sp, #8]
 8005928:	4b20      	ldr	r3, [pc, #128]	; (80059ac <MX_LWIP_Init+0x27c>)
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	2300      	movs	r3, #0
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <MX_LWIP_Init+0x274>)
 8005932:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <MX_LWIP_Init+0x270>)
 8005934:	4919      	ldr	r1, [pc, #100]	; (800599c <MX_LWIP_Init+0x26c>)
 8005936:	481e      	ldr	r0, [pc, #120]	; (80059b0 <MX_LWIP_Init+0x280>)
 8005938:	f004 ff1e 	bl	800a778 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800593c:	481c      	ldr	r0, [pc, #112]	; (80059b0 <MX_LWIP_Init+0x280>)
 800593e:	f005 f8cd 	bl	800aadc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005942:	4b1b      	ldr	r3, [pc, #108]	; (80059b0 <MX_LWIP_Init+0x280>)
 8005944:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005954:	4816      	ldr	r0, [pc, #88]	; (80059b0 <MX_LWIP_Init+0x280>)
 8005956:	f005 f8d1 	bl	800aafc <netif_set_up>
 800595a:	e002      	b.n	8005962 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800595c:	4814      	ldr	r0, [pc, #80]	; (80059b0 <MX_LWIP_Init+0x280>)
 800595e:	f005 f939 	bl	800abd4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005962:	4914      	ldr	r1, [pc, #80]	; (80059b4 <MX_LWIP_Init+0x284>)
 8005964:	4812      	ldr	r0, [pc, #72]	; (80059b0 <MX_LWIP_Init+0x280>)
 8005966:	f005 f9cb 	bl	800ad00 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <MX_LWIP_Init+0x288>)
 800596c:	1d3c      	adds	r4, r7, #4
 800596e:	461d      	mov	r5, r3
 8005970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005974:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	490c      	ldr	r1, [pc, #48]	; (80059b0 <MX_LWIP_Init+0x280>)
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fd47 	bl	8006414 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005986:	bf00      	nop
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bdb0      	pop	{r4, r5, r7, pc}
 800598e:	bf00      	nop
 8005990:	20000acc 	.word	0x20000acc
 8005994:	20000ad0 	.word	0x20000ad0
 8005998:	20000ad4 	.word	0x20000ad4
 800599c:	20000ac0 	.word	0x20000ac0
 80059a0:	20000ac4 	.word	0x20000ac4
 80059a4:	20000ac8 	.word	0x20000ac8
 80059a8:	08009439 	.word	0x08009439
 80059ac:	08005eb5 	.word	0x08005eb5
 80059b0:	20000a8c 	.word	0x20000a8c
 80059b4:	080059bd 	.word	0x080059bd
 80059b8:	08016b90 	.word	0x08016b90

080059bc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80059e2:	2320      	movs	r3, #32
 80059e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80059e6:	f3bf 8f4f 	dsb	sy
}
 80059ea:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80059ec:	e00b      	b.n	8005a06 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80059ee:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <SCB_InvalidateDCache_by_Addr+0x54>)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dcf0      	bgt.n	80059ee <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005a0c:	f3bf 8f4f 	dsb	sy
}
 8005a10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a12:	f3bf 8f6f 	isb	sy
}
 8005a16:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005a30:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <HAL_ETH_RxCpltCallback+0x1c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fe37 	bl	80066a8 <osSemaphoreRelease>
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20005464 	.word	0x20005464

08005a48 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <HAL_ETH_TxCpltCallback+0x1c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fe27 	bl	80066a8 <osSemaphoreRelease>
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20005468 	.word	0x20005468

08005a68 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7fc fabb 	bl	8001fec <HAL_ETH_GetDMAError>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b80      	cmp	r3, #128	; 0x80
 8005a7e:	d104      	bne.n	8005a8a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <HAL_ETH_ErrorCallback+0x2c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fe0f 	bl	80066a8 <osSemaphoreRelease>
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20005464 	.word	0x20005464

08005a98 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a98:	b5b0      	push	{r4, r5, r7, lr}
 8005a9a:	b0a8      	sub	sp, #160	; 0xa0
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8005ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ab6:	2264      	movs	r2, #100	; 0x64
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f00f fe3c 	bl	8015738 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005ac0:	4b85      	ldr	r3, [pc, #532]	; (8005cd8 <low_level_init+0x240>)
 8005ac2:	4a86      	ldr	r2, [pc, #536]	; (8005cdc <low_level_init+0x244>)
 8005ac4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8005ad2:	23e1      	movs	r3, #225	; 0xe1
 8005ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005aea:	4a7b      	ldr	r2, [pc, #492]	; (8005cd8 <low_level_init+0x240>)
 8005aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005af2:	4b79      	ldr	r3, [pc, #484]	; (8005cd8 <low_level_init+0x240>)
 8005af4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005af8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005afa:	4b77      	ldr	r3, [pc, #476]	; (8005cd8 <low_level_init+0x240>)
 8005afc:	4a78      	ldr	r2, [pc, #480]	; (8005ce0 <low_level_init+0x248>)
 8005afe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005b00:	4b75      	ldr	r3, [pc, #468]	; (8005cd8 <low_level_init+0x240>)
 8005b02:	4a78      	ldr	r2, [pc, #480]	; (8005ce4 <low_level_init+0x24c>)
 8005b04:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005b06:	4b74      	ldr	r3, [pc, #464]	; (8005cd8 <low_level_init+0x240>)
 8005b08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005b0c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005b0e:	4872      	ldr	r0, [pc, #456]	; (8005cd8 <low_level_init+0x240>)
 8005b10:	f7fb fc2e 	bl	8001370 <HAL_ETH_Init>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005b1a:	2238      	movs	r2, #56	; 0x38
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4872      	ldr	r0, [pc, #456]	; (8005ce8 <low_level_init+0x250>)
 8005b20:	f00f fe0a 	bl	8015738 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005b24:	4b70      	ldr	r3, [pc, #448]	; (8005ce8 <low_level_init+0x250>)
 8005b26:	2221      	movs	r2, #33	; 0x21
 8005b28:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005b2a:	4b6f      	ldr	r3, [pc, #444]	; (8005ce8 <low_level_init+0x250>)
 8005b2c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005b30:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005b32:	4b6d      	ldr	r3, [pc, #436]	; (8005ce8 <low_level_init+0x250>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005b38:	486c      	ldr	r0, [pc, #432]	; (8005cec <low_level_init+0x254>)
 8005b3a:	f004 fcd7 	bl	800a4ec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2206      	movs	r2, #6
 8005b42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005b46:	4b64      	ldr	r3, [pc, #400]	; (8005cd8 <low_level_init+0x240>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005b52:	4b61      	ldr	r3, [pc, #388]	; (8005cd8 <low_level_init+0x240>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	785a      	ldrb	r2, [r3, #1]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005b5e:	4b5e      	ldr	r3, [pc, #376]	; (8005cd8 <low_level_init+0x240>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	789a      	ldrb	r2, [r3, #2]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005b6a:	4b5b      	ldr	r3, [pc, #364]	; (8005cd8 <low_level_init+0x240>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	78da      	ldrb	r2, [r3, #3]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005b76:	4b58      	ldr	r3, [pc, #352]	; (8005cd8 <low_level_init+0x240>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	791a      	ldrb	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005b82:	4b55      	ldr	r3, [pc, #340]	; (8005cd8 <low_level_init+0x240>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	795a      	ldrb	r2, [r3, #5]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005b94:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b9c:	f043 030a 	orr.w	r3, r3, #10
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005ba8:	2203      	movs	r2, #3
 8005baa:	2100      	movs	r1, #0
 8005bac:	2001      	movs	r0, #1
 8005bae:	f001 f82d 	bl	8006c0c <xQueueGenericCreate>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4a4e      	ldr	r2, [pc, #312]	; (8005cf0 <low_level_init+0x258>)
 8005bb6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005bb8:	2203      	movs	r2, #3
 8005bba:	2100      	movs	r1, #0
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	f001 f825 	bl	8006c0c <xQueueGenericCreate>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4a4b      	ldr	r2, [pc, #300]	; (8005cf4 <low_level_init+0x25c>)
 8005bc6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005bc8:	4b4b      	ldr	r3, [pc, #300]	; (8005cf8 <low_level_init+0x260>)
 8005bca:	f107 0408 	add.w	r4, r7, #8
 8005bce:	461d      	mov	r5, r3
 8005bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005bdc:	f107 0308 	add.w	r3, r7, #8
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fc16 	bl	8006414 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005be8:	4944      	ldr	r1, [pc, #272]	; (8005cfc <low_level_init+0x264>)
 8005bea:	4845      	ldr	r0, [pc, #276]	; (8005d00 <low_level_init+0x268>)
 8005bec:	f7fb f92b 	bl	8000e46 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005bf0:	4843      	ldr	r0, [pc, #268]	; (8005d00 <low_level_init+0x268>)
 8005bf2:	f7fb f95a 	bl	8000eaa <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005bf6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d165      	bne.n	8005cca <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005bfe:	4840      	ldr	r0, [pc, #256]	; (8005d00 <low_level_init+0x268>)
 8005c00:	f7fb f9fb 	bl	8000ffa <LAN8742_GetLinkState>
 8005c04:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	dc06      	bgt.n	8005c1e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f005 f845 	bl	800aca0 <netif_set_link_down>
      netif_set_down(netif);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f004 ffdc 	bl	800abd4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005c1c:	e057      	b.n	8005cce <low_level_init+0x236>
      switch (PHYLinkState)
 8005c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c22:	3b02      	subs	r3, #2
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d82b      	bhi.n	8005c80 <low_level_init+0x1e8>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <low_level_init+0x198>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c53 	.word	0x08005c53
 8005c38:	08005c63 	.word	0x08005c63
 8005c3c:	08005c73 	.word	0x08005c73
        duplex = ETH_FULLDUPLEX_MODE;
 8005c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005c48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005c50:	e01f      	b.n	8005c92 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005c60:	e017      	b.n	8005c92 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005c62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005c70:	e00f      	b.n	8005c92 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005c7e:	e008      	b.n	8005c92 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005c80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005c90:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c96:	4619      	mov	r1, r3
 8005c98:	480f      	ldr	r0, [pc, #60]	; (8005cd8 <low_level_init+0x240>)
 8005c9a:	f7fc f84d 	bl	8001d38 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ca2:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8005ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ca8:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4809      	ldr	r0, [pc, #36]	; (8005cd8 <low_level_init+0x240>)
 8005cb2:	f7fc f92b 	bl	8001f0c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005cb6:	4808      	ldr	r0, [pc, #32]	; (8005cd8 <low_level_init+0x240>)
 8005cb8:	f7fb fbd6 	bl	8001468 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f004 ff1d 	bl	800aafc <netif_set_up>
    netif_set_link_up(netif);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f004 ffb8 	bl	800ac38 <netif_set_link_up>
}
 8005cc8:	e001      	b.n	8005cce <low_level_init+0x236>
    Error_Handler();
 8005cca:	f7fa fe41 	bl	8000950 <Error_Handler>
}
 8005cce:	bf00      	nop
 8005cd0:	37a0      	adds	r7, #160	; 0xa0
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	2000546c 	.word	0x2000546c
 8005cdc:	40028000 	.word	0x40028000
 8005ce0:	20000134 	.word	0x20000134
 8005ce4:	20000094 	.word	0x20000094
 8005ce8:	2000551c 	.word	0x2000551c
 8005cec:	08019b9c 	.word	0x08019b9c
 8005cf0:	20005464 	.word	0x20005464
 8005cf4:	20005468 	.word	0x20005468
 8005cf8:	08016bb4 	.word	0x08016bb4
 8005cfc:	2000000c 	.word	0x2000000c
 8005d00:	20005554 	.word	0x20005554

08005d04 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b092      	sub	sp, #72	; 0x48
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005d1c:	f107 030c 	add.w	r3, r7, #12
 8005d20:	2230      	movs	r2, #48	; 0x30
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f00f fd07 	bl	8015738 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	2230      	movs	r2, #48	; 0x30
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f00f fd00 	bl	8015738 <memset>

  for(q = p; q != NULL; q = q->next)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3c:	e045      	b.n	8005dca <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d902      	bls.n	8005d4a <low_level_output+0x46>
      return ERR_IF;
 8005d44:	f06f 030b 	mvn.w	r3, #11
 8005d48:	e065      	b.n	8005e16 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d50:	4613      	mov	r3, r2
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	3348      	adds	r3, #72	; 0x48
 8005d5a:	443b      	add	r3, r7
 8005d5c:	3b3c      	subs	r3, #60	; 0x3c
 8005d5e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d62:	895b      	ldrh	r3, [r3, #10]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d68:	4613      	mov	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	3348      	adds	r3, #72	; 0x48
 8005d72:	443b      	add	r3, r7
 8005d74:	3b38      	subs	r3, #56	; 0x38
 8005d76:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d011      	beq.n	8005da2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	f107 000c 	add.w	r0, r7, #12
 8005d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d88:	460b      	mov	r3, r1
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	440b      	add	r3, r1
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	18c1      	adds	r1, r0, r3
 8005d92:	4613      	mov	r3, r2
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	3348      	adds	r3, #72	; 0x48
 8005d9c:	443b      	add	r3, r7
 8005d9e:	3b34      	subs	r3, #52	; 0x34
 8005da0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dac:	4613      	mov	r3, r2
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	3348      	adds	r3, #72	; 0x48
 8005db6:	443b      	add	r3, r7
 8005db8:	3b34      	subs	r3, #52	; 0x34
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1b6      	bne.n	8005d3e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	891b      	ldrh	r3, [r3, #8]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <low_level_output+0x11c>)
 8005dd8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005dda:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <low_level_output+0x11c>)
 8005ddc:	f107 030c 	add.w	r3, r7, #12
 8005de0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005de2:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <low_level_output+0x11c>)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005de8:	6838      	ldr	r0, [r7, #0]
 8005dea:	f005 fbdd 	bl	800b5a8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005dee:	490c      	ldr	r1, [pc, #48]	; (8005e20 <low_level_output+0x11c>)
 8005df0:	480c      	ldr	r0, [pc, #48]	; (8005e24 <low_level_output+0x120>)
 8005df2:	f7fb fc47 	bl	8001684 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005df6:	bf00      	nop
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <low_level_output+0x124>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fc03 	bl	800660c <osSemaphoreWait>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f5      	bne.n	8005df8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005e0c:	4805      	ldr	r0, [pc, #20]	; (8005e24 <low_level_output+0x120>)
 8005e0e:	f7fb fdcd 	bl	80019ac <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005e12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3748      	adds	r7, #72	; 0x48
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	2000551c 	.word	0x2000551c
 8005e24:	2000546c 	.word	0x2000546c
 8005e28:	20005468 	.word	0x20005468

08005e2c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <low_level_input+0x2c>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d105      	bne.n	8005e4c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	4619      	mov	r1, r3
 8005e46:	4805      	ldr	r0, [pc, #20]	; (8005e5c <low_level_input+0x30>)
 8005e48:	f7fb fc78 	bl	800173c <HAL_ETH_ReadData>
  }

  return p;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20005460 	.word	0x20005460
 8005e5c:	2000546c 	.word	0x2000546c

08005e60 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <ethernetif_input+0x50>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f04f 31ff 	mov.w	r1, #4294967295
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fbc7 	bl	800660c <osSemaphoreWait>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f5      	bne.n	8005e70 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005e84:	68b8      	ldr	r0, [r7, #8]
 8005e86:	f7ff ffd1 	bl	8005e2c <low_level_input>
 8005e8a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	4798      	blx	r3
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f005 fada 	bl	800b45c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1ea      	bne.n	8005e84 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005eae:	e7df      	b.n	8005e70 <ethernetif_input+0x10>
 8005eb0:	20005464 	.word	0x20005464

08005eb4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <ethernetif_init+0x1c>
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <ethernetif_init+0x48>)
 8005ec4:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005ec8:	490d      	ldr	r1, [pc, #52]	; (8005f00 <ethernetif_init+0x4c>)
 8005eca:	480e      	ldr	r0, [pc, #56]	; (8005f04 <ethernetif_init+0x50>)
 8005ecc:	f00f fd2e 	bl	801592c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2273      	movs	r2, #115	; 0x73
 8005ed4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2274      	movs	r2, #116	; 0x74
 8005edc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <ethernetif_init+0x54>)
 8005ee4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <ethernetif_init+0x58>)
 8005eea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fdd3 	bl	8005a98 <low_level_init>

  return ERR_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	08016bd0 	.word	0x08016bd0
 8005f00:	08016bec 	.word	0x08016bec
 8005f04:	08016bfc 	.word	0x08016bfc
 8005f08:	080123b1 	.word	0x080123b1
 8005f0c:	08005d05 	.word	0x08005d05

08005f10 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005f1c:	68f9      	ldr	r1, [r7, #12]
 8005f1e:	4809      	ldr	r0, [pc, #36]	; (8005f44 <pbuf_free_custom+0x34>)
 8005f20:	f004 fbd4 	bl	800a6cc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005f24:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <pbuf_free_custom+0x38>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d107      	bne.n	8005f3c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <pbuf_free_custom+0x38>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005f32:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <pbuf_free_custom+0x3c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fbb6 	bl	80066a8 <osSemaphoreRelease>
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	08019b9c 	.word	0x08019b9c
 8005f48:	20005460 	.word	0x20005460
 8005f4c:	20005464 	.word	0x20005464

08005f50 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f54:	f7fb f8fa 	bl	800114c <HAL_GetTick>
 8005f58:	4603      	mov	r3, r0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08e      	sub	sp, #56	; 0x38
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a52      	ldr	r2, [pc, #328]	; (80060c8 <HAL_ETH_MspInit+0x168>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	f040 809e 	bne.w	80060c0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f84:	4b51      	ldr	r3, [pc, #324]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	4a50      	ldr	r2, [pc, #320]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f90:	4b4e      	ldr	r3, [pc, #312]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	4b4b      	ldr	r3, [pc, #300]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	4a4a      	ldr	r2, [pc, #296]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa8:	4b48      	ldr	r3, [pc, #288]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4b45      	ldr	r3, [pc, #276]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	4a44      	ldr	r2, [pc, #272]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8005fc0:	4b42      	ldr	r3, [pc, #264]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fcc:	4b3f      	ldr	r3, [pc, #252]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	4a3e      	ldr	r2, [pc, #248]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fd2:	f043 0304 	orr.w	r3, r3, #4
 8005fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd8:	4b3c      	ldr	r3, [pc, #240]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe4:	4b39      	ldr	r3, [pc, #228]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	4a38      	ldr	r2, [pc, #224]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff0:	4b36      	ldr	r3, [pc, #216]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ffc:	4b33      	ldr	r3, [pc, #204]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	4a32      	ldr	r2, [pc, #200]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8006002:	f043 0302 	orr.w	r3, r3, #2
 8006006:	6313      	str	r3, [r2, #48]	; 0x30
 8006008:	4b30      	ldr	r3, [pc, #192]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006014:	4b2d      	ldr	r3, [pc, #180]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	4a2c      	ldr	r2, [pc, #176]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 800601a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601e:	6313      	str	r3, [r2, #48]	; 0x30
 8006020:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <HAL_ETH_MspInit+0x16c>)
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800602c:	2332      	movs	r3, #50	; 0x32
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006030:	2302      	movs	r3, #2
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006034:	2300      	movs	r3, #0
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006038:	2303      	movs	r3, #3
 800603a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800603c:	230b      	movs	r3, #11
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006044:	4619      	mov	r1, r3
 8006046:	4822      	ldr	r0, [pc, #136]	; (80060d0 <HAL_ETH_MspInit+0x170>)
 8006048:	f7fc fbe0 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800604c:	2386      	movs	r3, #134	; 0x86
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006050:	2302      	movs	r3, #2
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006054:	2300      	movs	r3, #0
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006058:	2303      	movs	r3, #3
 800605a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800605c:	230b      	movs	r3, #11
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006064:	4619      	mov	r1, r3
 8006066:	481b      	ldr	r0, [pc, #108]	; (80060d4 <HAL_ETH_MspInit+0x174>)
 8006068:	f7fc fbd0 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800606c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006072:	2302      	movs	r3, #2
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006076:	2300      	movs	r3, #0
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800607a:	2303      	movs	r3, #3
 800607c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800607e:	230b      	movs	r3, #11
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006086:	4619      	mov	r1, r3
 8006088:	4813      	ldr	r0, [pc, #76]	; (80060d8 <HAL_ETH_MspInit+0x178>)
 800608a:	f7fc fbbf 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800608e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006094:	2302      	movs	r3, #2
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006098:	2300      	movs	r3, #0
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800609c:	2303      	movs	r3, #3
 800609e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060a0:	230b      	movs	r3, #11
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80060a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a8:	4619      	mov	r1, r3
 80060aa:	480c      	ldr	r0, [pc, #48]	; (80060dc <HAL_ETH_MspInit+0x17c>)
 80060ac:	f7fc fbae 	bl	800280c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80060b0:	2200      	movs	r2, #0
 80060b2:	2105      	movs	r1, #5
 80060b4:	203d      	movs	r0, #61	; 0x3d
 80060b6:	f7fb f931 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80060ba:	203d      	movs	r0, #61	; 0x3d
 80060bc:	f7fb f94a 	bl	8001354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80060c0:	bf00      	nop
 80060c2:	3738      	adds	r7, #56	; 0x38
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40028000 	.word	0x40028000
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40020800 	.word	0x40020800
 80060d4:	40020000 	.word	0x40020000
 80060d8:	40020400 	.word	0x40020400
 80060dc:	40021800 	.word	0x40021800

080060e0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80060e4:	4802      	ldr	r0, [pc, #8]	; (80060f0 <ETH_PHY_IO_Init+0x10>)
 80060e6:	f7fb ff2b 	bl	8001f40 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	2000546c 	.word	0x2000546c

080060f4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return 0;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	68f9      	ldr	r1, [r7, #12]
 8006116:	4807      	ldr	r0, [pc, #28]	; (8006134 <ETH_PHY_IO_ReadReg+0x30>)
 8006118:	f7fb fd7a 	bl	8001c10 <HAL_ETH_ReadPHYRegister>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
 8006126:	e000      	b.n	800612a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	2000546c 	.word	0x2000546c

08006138 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	68f9      	ldr	r1, [r7, #12]
 800614a:	4807      	ldr	r0, [pc, #28]	; (8006168 <ETH_PHY_IO_WriteReg+0x30>)
 800614c:	f7fb fdab 	bl	8001ca6 <HAL_ETH_WritePHYRegister>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
 800615a:	e000      	b.n	800615e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	2000546c 	.word	0x2000546c

0800616c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006170:	f7fa ffec 	bl	800114c <HAL_GetTick>
 8006174:	4603      	mov	r3, r0
}
 8006176:	4618      	mov	r0, r3
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b0a0      	sub	sp, #128	; 0x80
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006184:	f107 0308 	add.w	r3, r7, #8
 8006188:	2264      	movs	r2, #100	; 0x64
 800618a:	2100      	movs	r1, #0
 800618c:	4618      	mov	r0, r3
 800618e:	f00f fad3 	bl	8015738 <memset>
  int32_t PHYLinkState = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	67fb      	str	r3, [r7, #124]	; 0x7c
 800619a:	2300      	movs	r3, #0
 800619c:	67bb      	str	r3, [r7, #120]	; 0x78
 800619e:	2300      	movs	r3, #0
 80061a0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80061a6:	483a      	ldr	r0, [pc, #232]	; (8006290 <ethernet_link_thread+0x114>)
 80061a8:	f7fa ff27 	bl	8000ffa <LAN8742_GetLinkState>
 80061ac:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80061ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061b4:	089b      	lsrs	r3, r3, #2
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00c      	beq.n	80061da <ethernet_link_thread+0x5e>
 80061c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	dc09      	bgt.n	80061da <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80061c6:	4833      	ldr	r0, [pc, #204]	; (8006294 <ethernet_link_thread+0x118>)
 80061c8:	f7fb f9dc 	bl	8001584 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80061cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061ce:	f004 fd01 	bl	800abd4 <netif_set_down>
    netif_set_link_down(netif);
 80061d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061d4:	f004 fd64 	bl	800aca0 <netif_set_link_down>
 80061d8:	e055      	b.n	8006286 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80061da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d14e      	bne.n	8006286 <ethernet_link_thread+0x10a>
 80061e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	dd4b      	ble.n	8006286 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80061ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f0:	3b02      	subs	r3, #2
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d82a      	bhi.n	800624c <ethernet_link_thread+0xd0>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <ethernet_link_thread+0x80>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	0800620d 	.word	0x0800620d
 8006200:	0800621f 	.word	0x0800621f
 8006204:	0800622f 	.word	0x0800622f
 8006208:	0800623f 	.word	0x0800623f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800620c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006210:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006216:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006218:	2301      	movs	r3, #1
 800621a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800621c:	e017      	b.n	800624e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800621e:	2300      	movs	r3, #0
 8006220:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006226:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006228:	2301      	movs	r3, #1
 800622a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800622c:	e00f      	b.n	800624e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800622e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006232:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006234:	2300      	movs	r3, #0
 8006236:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006238:	2301      	movs	r3, #1
 800623a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800623c:	e007      	b.n	800624e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800623e:	2300      	movs	r3, #0
 8006240:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006242:	2300      	movs	r3, #0
 8006244:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006246:	2301      	movs	r3, #1
 8006248:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800624a:	e000      	b.n	800624e <ethernet_link_thread+0xd2>
    default:
      break;
 800624c:	bf00      	nop
    }

    if(linkchanged)
 800624e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d018      	beq.n	8006286 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	4619      	mov	r1, r3
 800625a:	480e      	ldr	r0, [pc, #56]	; (8006294 <ethernet_link_thread+0x118>)
 800625c:	f7fb fd6c 	bl	8001d38 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006262:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006266:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006268:	f107 0308 	add.w	r3, r7, #8
 800626c:	4619      	mov	r1, r3
 800626e:	4809      	ldr	r0, [pc, #36]	; (8006294 <ethernet_link_thread+0x118>)
 8006270:	f7fb fe4c 	bl	8001f0c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006274:	4807      	ldr	r0, [pc, #28]	; (8006294 <ethernet_link_thread+0x118>)
 8006276:	f7fb f8f7 	bl	8001468 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800627a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800627c:	f004 fc3e 	bl	800aafc <netif_set_up>
      netif_set_link_up(netif);
 8006280:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006282:	f004 fcd9 	bl	800ac38 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006286:	2064      	movs	r0, #100	; 0x64
 8006288:	f000 f910 	bl	80064ac <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800628c:	e78b      	b.n	80061a6 <ethernet_link_thread+0x2a>
 800628e:	bf00      	nop
 8006290:	20005554 	.word	0x20005554
 8006294:	2000546c 	.word	0x2000546c

08006298 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80062a0:	4812      	ldr	r0, [pc, #72]	; (80062ec <HAL_ETH_RxAllocateCallback+0x54>)
 80062a2:	f004 f99f 	bl	800a5e4 <memp_malloc_pool>
 80062a6:	60f8      	str	r0, [r7, #12]
  if (p)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d014      	beq.n	80062d8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f103 0220 	add.w	r2, r3, #32
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a0d      	ldr	r2, [pc, #52]	; (80062f0 <HAL_ETH_RxAllocateCallback+0x58>)
 80062bc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80062c6:	9201      	str	r2, [sp, #4]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2241      	movs	r2, #65	; 0x41
 80062ce:	2100      	movs	r1, #0
 80062d0:	2000      	movs	r0, #0
 80062d2:	f004 ff09 	bl	800b0e8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80062d6:	e005      	b.n	80062e4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80062d8:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	08019b9c 	.word	0x08019b9c
 80062f0:	08005f11 	.word	0x08005f11
 80062f4:	20005460 	.word	0x20005460

080062f8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3b20      	subs	r3, #32
 8006316:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2200      	movs	r2, #0
 8006322:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	887a      	ldrh	r2, [r7, #2]
 8006328:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d103      	bne.n	800633a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e003      	b.n	8006342 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e009      	b.n	8006364 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	891a      	ldrh	r2, [r3, #8]
 8006354:	887b      	ldrh	r3, [r7, #2]
 8006356:	4413      	add	r3, r2
 8006358:	b29a      	uxth	r2, r3
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f2      	bne.n	8006350 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800636a:	887b      	ldrh	r3, [r7, #2]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fb2e 	bl	80059d0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006374:	bf00      	nop
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f005 f869 	bl	800b45c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	4603      	mov	r3, r0
 800639a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80063a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063a4:	2b84      	cmp	r3, #132	; 0x84
 80063a6:	d005      	beq.n	80063b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80063a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	3303      	adds	r3, #3
 80063b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80063b4:	68fb      	ldr	r3, [r7, #12]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063c8:	f3ef 8305 	mrs	r3, IPSR
 80063cc:	607b      	str	r3, [r7, #4]
  return(result);
 80063ce:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf14      	ite	ne
 80063d4:	2301      	movne	r3, #1
 80063d6:	2300      	moveq	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063ea:	f001 fc89 	bl	8007d00 <vTaskStartScheduler>
  
  return osOK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80063f8:	f7ff ffe3 	bl	80063c2 <inHandlerMode>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006402:	f001 fda7 	bl	8007f54 <xTaskGetTickCountFromISR>
 8006406:	4603      	mov	r3, r0
 8006408:	e002      	b.n	8006410 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800640a:	f001 fd93 	bl	8007f34 <xTaskGetTickCount>
 800640e:	4603      	mov	r3, r0
  }
}
 8006410:	4618      	mov	r0, r3
 8006412:	bd80      	pop	{r7, pc}

08006414 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006416:	b089      	sub	sp, #36	; 0x24
 8006418:	af04      	add	r7, sp, #16
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d020      	beq.n	8006468 <osThreadCreate+0x54>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01c      	beq.n	8006468 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685c      	ldr	r4, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681d      	ldr	r5, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691e      	ldr	r6, [r3, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff ffa6 	bl	8006392 <makeFreeRtosPriority>
 8006446:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	9100      	str	r1, [sp, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	4632      	mov	r2, r6
 800645a:	4629      	mov	r1, r5
 800645c:	4620      	mov	r0, r4
 800645e:	f001 fa67 	bl	8007930 <xTaskCreateStatic>
 8006462:	4603      	mov	r3, r0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e01c      	b.n	80064a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685c      	ldr	r4, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006474:	b29e      	uxth	r6, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff ff88 	bl	8006392 <makeFreeRtosPriority>
 8006482:	4602      	mov	r2, r0
 8006484:	f107 030c 	add.w	r3, r7, #12
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	9200      	str	r2, [sp, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	4632      	mov	r2, r6
 8006490:	4629      	mov	r1, r5
 8006492:	4620      	mov	r0, r4
 8006494:	f001 faaf 	bl	80079f6 <xTaskCreate>
 8006498:	4603      	mov	r3, r0
 800649a:	2b01      	cmp	r3, #1
 800649c:	d001      	beq.n	80064a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	e000      	b.n	80064a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80064a2:	68fb      	ldr	r3, [r7, #12]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <osDelay+0x16>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	e000      	b.n	80064c4 <osDelay+0x18>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fbe5 	bl	8007c94 <vTaskDelay>
  
  return osOK;
 80064ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4619      	mov	r1, r3
 80064ea:	2001      	movs	r0, #1
 80064ec:	f000 fc21 	bl	8006d32 <xQueueCreateMutexStatic>
 80064f0:	4603      	mov	r3, r0
 80064f2:	e003      	b.n	80064fc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80064f4:	2001      	movs	r0, #1
 80064f6:	f000 fc04 	bl	8006d02 <xQueueCreateMutex>
 80064fa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <osMutexWait+0x18>
    return osErrorParameter;
 8006518:	2380      	movs	r3, #128	; 0x80
 800651a:	e03a      	b.n	8006592 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d103      	bne.n	8006530 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e009      	b.n	8006544 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d006      	beq.n	8006544 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <osMutexWait+0x40>
      ticks = 1;
 8006540:	2301      	movs	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006544:	f7ff ff3d 	bl	80063c2 <inHandlerMode>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d017      	beq.n	800657e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800654e:	f107 0308 	add.w	r3, r7, #8
 8006552:	461a      	mov	r2, r3
 8006554:	2100      	movs	r1, #0
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f83c 	bl	80075d4 <xQueueReceiveFromISR>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d001      	beq.n	8006566 <osMutexWait+0x62>
      return osErrorOS;
 8006562:	23ff      	movs	r3, #255	; 0xff
 8006564:	e015      	b.n	8006592 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d011      	beq.n	8006590 <osMutexWait+0x8c>
 800656c:	4b0b      	ldr	r3, [pc, #44]	; (800659c <osMutexWait+0x98>)
 800656e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	e008      	b.n	8006590 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 ff13 	bl	80073ac <xQueueSemaphoreTake>
 8006586:	4603      	mov	r3, r0
 8006588:	2b01      	cmp	r3, #1
 800658a:	d001      	beq.n	8006590 <osMutexWait+0x8c>
    return osErrorOS;
 800658c:	23ff      	movs	r3, #255	; 0xff
 800658e:	e000      	b.n	8006592 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80065b0:	f7ff ff07 	bl	80063c2 <inHandlerMode>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d016      	beq.n	80065e8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fd77 	bl	80070b4 <xQueueGiveFromISR>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d001      	beq.n	80065d0 <osMutexRelease+0x30>
      return osErrorOS;
 80065cc:	23ff      	movs	r3, #255	; 0xff
 80065ce:	e017      	b.n	8006600 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d013      	beq.n	80065fe <osMutexRelease+0x5e>
 80065d6:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <osMutexRelease+0x68>)
 80065d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	e00a      	b.n	80065fe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80065e8:	2300      	movs	r3, #0
 80065ea:	2200      	movs	r2, #0
 80065ec:	2100      	movs	r1, #0
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fbba 	bl	8006d68 <xQueueGenericSend>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d001      	beq.n	80065fe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80065fa:	23ff      	movs	r3, #255	; 0xff
 80065fc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80065fe:	68fb      	ldr	r3, [r7, #12]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006616:	2300      	movs	r3, #0
 8006618:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006620:	2380      	movs	r3, #128	; 0x80
 8006622:	e03a      	b.n	800669a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d103      	bne.n	8006638 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e009      	b.n	800664c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d006      	beq.n	800664c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <osSemaphoreWait+0x40>
      ticks = 1;
 8006648:	2301      	movs	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800664c:	f7ff feb9 	bl	80063c2 <inHandlerMode>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d017      	beq.n	8006686 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006656:	f107 0308 	add.w	r3, r7, #8
 800665a:	461a      	mov	r2, r3
 800665c:	2100      	movs	r1, #0
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 ffb8 	bl	80075d4 <xQueueReceiveFromISR>
 8006664:	4603      	mov	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d001      	beq.n	800666e <osSemaphoreWait+0x62>
      return osErrorOS;
 800666a:	23ff      	movs	r3, #255	; 0xff
 800666c:	e015      	b.n	800669a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d011      	beq.n	8006698 <osSemaphoreWait+0x8c>
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <osSemaphoreWait+0x98>)
 8006676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	e008      	b.n	8006698 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fe8f 	bl	80073ac <xQueueSemaphoreTake>
 800668e:	4603      	mov	r3, r0
 8006690:	2b01      	cmp	r3, #1
 8006692:	d001      	beq.n	8006698 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006694:	23ff      	movs	r3, #255	; 0xff
 8006696:	e000      	b.n	800669a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	e000ed04 	.word	0xe000ed04

080066a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80066b8:	f7ff fe83 	bl	80063c2 <inHandlerMode>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80066c2:	f107 0308 	add.w	r3, r7, #8
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fcf3 	bl	80070b4 <xQueueGiveFromISR>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d001      	beq.n	80066d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80066d4:	23ff      	movs	r3, #255	; 0xff
 80066d6:	e017      	b.n	8006708 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d013      	beq.n	8006706 <osSemaphoreRelease+0x5e>
 80066de:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <osSemaphoreRelease+0x68>)
 80066e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	e00a      	b.n	8006706 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80066f0:	2300      	movs	r3, #0
 80066f2:	2200      	movs	r2, #0
 80066f4:	2100      	movs	r1, #0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fb36 	bl	8006d68 <xQueueGenericSend>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006702:	23ff      	movs	r3, #255	; 0xff
 8006704:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006706:	68fb      	ldr	r3, [r7, #12]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b085      	sub	sp, #20
 8006718:	af02      	add	r7, sp, #8
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <osMessageCreate+0x36>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00d      	beq.n	800674a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6859      	ldr	r1, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2400      	movs	r4, #0
 8006740:	9400      	str	r4, [sp, #0]
 8006742:	f000 f9e1 	bl	8006b08 <xQueueGenericCreateStatic>
 8006746:	4603      	mov	r3, r0
 8006748:	e008      	b.n	800675c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	4619      	mov	r1, r3
 8006756:	f000 fa59 	bl	8006c0c <xQueueGenericCreate>
 800675a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bd90      	pop	{r4, r7, pc}

08006764 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <osMessagePut+0x1e>
    ticks = 1;
 800677e:	2301      	movs	r3, #1
 8006780:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006782:	f7ff fe1e 	bl	80063c2 <inHandlerMode>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d018      	beq.n	80067be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800678c:	f107 0210 	add.w	r2, r7, #16
 8006790:	f107 0108 	add.w	r1, r7, #8
 8006794:	2300      	movs	r3, #0
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fbec 	bl	8006f74 <xQueueGenericSendFromISR>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d001      	beq.n	80067a6 <osMessagePut+0x42>
      return osErrorOS;
 80067a2:	23ff      	movs	r3, #255	; 0xff
 80067a4:	e018      	b.n	80067d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d014      	beq.n	80067d6 <osMessagePut+0x72>
 80067ac:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <osMessagePut+0x7c>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	e00b      	b.n	80067d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80067be:	f107 0108 	add.w	r1, r7, #8
 80067c2:	2300      	movs	r3, #0
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 face 	bl	8006d68 <xQueueGenericSend>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d001      	beq.n	80067d6 <osMessagePut+0x72>
      return osErrorOS;
 80067d2:	23ff      	movs	r3, #255	; 0xff
 80067d4:	e000      	b.n	80067d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80067e4:	b590      	push	{r4, r7, lr}
 80067e6:	b08b      	sub	sp, #44	; 0x2c
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	617b      	str	r3, [r7, #20]
    return event;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	461c      	mov	r4, r3
 8006806:	f107 0314 	add.w	r3, r7, #20
 800680a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800680e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006812:	e054      	b.n	80068be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006814:	2300      	movs	r3, #0
 8006816:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006822:	d103      	bne.n	800682c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
 800682a:	e009      	b.n	8006840 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d006      	beq.n	8006840 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <osMessageGet+0x5c>
      ticks = 1;
 800683c:	2301      	movs	r3, #1
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006840:	f7ff fdbf 	bl	80063c2 <inHandlerMode>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01c      	beq.n	8006884 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800684a:	f107 0220 	add.w	r2, r7, #32
 800684e:	f107 0314 	add.w	r3, r7, #20
 8006852:	3304      	adds	r3, #4
 8006854:	4619      	mov	r1, r3
 8006856:	68b8      	ldr	r0, [r7, #8]
 8006858:	f000 febc 	bl	80075d4 <xQueueReceiveFromISR>
 800685c:	4603      	mov	r3, r0
 800685e:	2b01      	cmp	r3, #1
 8006860:	d102      	bne.n	8006868 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006862:	2310      	movs	r3, #16
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e001      	b.n	800686c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01d      	beq.n	80068ae <osMessageGet+0xca>
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <osMessageGet+0xe4>)
 8006874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	e014      	b.n	80068ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	3304      	adds	r3, #4
 800688a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688c:	4619      	mov	r1, r3
 800688e:	68b8      	ldr	r0, [r7, #8]
 8006890:	f000 fca6 	bl	80071e0 <xQueueReceive>
 8006894:	4603      	mov	r3, r0
 8006896:	2b01      	cmp	r3, #1
 8006898:	d102      	bne.n	80068a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800689a:	2310      	movs	r3, #16
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e006      	b.n	80068ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <osMessageGet+0xc6>
 80068a6:	2300      	movs	r3, #0
 80068a8:	e000      	b.n	80068ac <osMessageGet+0xc8>
 80068aa:	2340      	movs	r3, #64	; 0x40
 80068ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	461c      	mov	r4, r3
 80068b2:	f107 0314 	add.w	r3, r7, #20
 80068b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	372c      	adds	r7, #44	; 0x2c
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd90      	pop	{r4, r7, pc}
 80068c6:	bf00      	nop
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f103 0208 	add.w	r2, r3, #8
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f103 0208 	add.w	r2, r3, #8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f103 0208 	add.w	r2, r3, #8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d103      	bne.n	800698e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e00c      	b.n	80069a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3308      	adds	r3, #8
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e002      	b.n	800699c <vListInsert+0x2e>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d2f6      	bcs.n	8006996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6892      	ldr	r2, [r2, #8]
 80069f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6852      	ldr	r2, [r2, #4]
 8006a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d103      	bne.n	8006a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	1e5a      	subs	r2, r3, #1
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10c      	bne.n	8006a62 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	b672      	cpsid	i
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	b662      	cpsie	i
 8006a5c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006a62:	f002 f8e3 	bl	8008c2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	441a      	add	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	3b01      	subs	r3, #1
 8006a94:	68f9      	ldr	r1, [r7, #12]
 8006a96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	22ff      	movs	r2, #255	; 0xff
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	22ff      	movs	r2, #255	; 0xff
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d114      	bne.n	8006ae2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01a      	beq.n	8006af6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3310      	adds	r3, #16
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 fb9b 	bl	8008200 <xTaskRemoveFromEventList>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d012      	beq.n	8006af6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <xQueueGenericReset+0xd0>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	e009      	b.n	8006af6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3310      	adds	r3, #16
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff fef0 	bl	80068cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3324      	adds	r3, #36	; 0x24
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff feeb 	bl	80068cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006af6:	f002 f8cd 	bl	8008c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006afa:	2301      	movs	r3, #1
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	; 0x38
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10c      	bne.n	8006b36 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	b672      	cpsid	i
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	b662      	cpsie	i
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10c      	bne.n	8006b56 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	b672      	cpsid	i
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	b662      	cpsie	i
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <xQueueGenericCreateStatic+0x5a>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <xQueueGenericCreateStatic+0x5e>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <xQueueGenericCreateStatic+0x60>
 8006b66:	2300      	movs	r3, #0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10c      	bne.n	8006b86 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	b672      	cpsid	i
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	b662      	cpsie	i
 8006b80:	623b      	str	r3, [r7, #32]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <xQueueGenericCreateStatic+0x8a>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericCreateStatic+0x8e>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericCreateStatic+0x90>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10c      	bne.n	8006bb6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	b672      	cpsid	i
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	b662      	cpsie	i
 8006bb0:	61fb      	str	r3, [r7, #28]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bb6:	2348      	movs	r3, #72	; 0x48
 8006bb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b48      	cmp	r3, #72	; 0x48
 8006bbe:	d00c      	beq.n	8006bda <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	b672      	cpsid	i
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	b662      	cpsie	i
 8006bd4:	61bb      	str	r3, [r7, #24]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00d      	beq.n	8006c02 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f847 	bl	8006c90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3730      	adds	r7, #48	; 0x30
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10c      	bne.n	8006c3a <xQueueGenericCreate+0x2e>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	b672      	cpsid	i
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	b662      	cpsie	i
 8006c34:	613b      	str	r3, [r7, #16]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	e004      	b.n	8006c50 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	fb02 f303 	mul.w	r3, r2, r3
 8006c4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	3348      	adds	r3, #72	; 0x48
 8006c54:	4618      	mov	r0, r3
 8006c56:	f002 f915 	bl	8008e84 <pvPortMalloc>
 8006c5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d011      	beq.n	8006c86 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	3348      	adds	r3, #72	; 0x48
 8006c6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c74:	79fa      	ldrb	r2, [r7, #7]
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f805 	bl	8006c90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c86:	69bb      	ldr	r3, [r7, #24]
	}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3720      	adds	r7, #32
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e002      	b.n	8006cb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	69b8      	ldr	r0, [r7, #24]
 8006cc2:	f7ff feb7 	bl	8006a34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00e      	beq.n	8006cfa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f837 	bl	8006d68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b086      	sub	sp, #24
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	4603      	mov	r3, r0
 8006d0a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6939      	ldr	r1, [r7, #16]
 8006d1a:	6978      	ldr	r0, [r7, #20]
 8006d1c:	f7ff ff76 	bl	8006c0c <xQueueGenericCreate>
 8006d20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff ffd3 	bl	8006cce <prvInitialiseMutex>

		return xNewQueue;
 8006d28:	68fb      	ldr	r3, [r7, #12]
	}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b088      	sub	sp, #32
 8006d36:	af02      	add	r7, sp, #8
 8006d38:	4603      	mov	r3, r0
 8006d3a:	6039      	str	r1, [r7, #0]
 8006d3c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	6939      	ldr	r1, [r7, #16]
 8006d50:	6978      	ldr	r0, [r7, #20]
 8006d52:	f7ff fed9 	bl	8006b08 <xQueueGenericCreateStatic>
 8006d56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff ffb8 	bl	8006cce <prvInitialiseMutex>

		return xNewQueue;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
	}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08e      	sub	sp, #56	; 0x38
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d76:	2300      	movs	r3, #0
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10c      	bne.n	8006d9e <xQueueGenericSend+0x36>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	b672      	cpsid	i
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	b662      	cpsie	i
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <xQueueGenericSend+0x44>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <xQueueGenericSend+0x48>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <xQueueGenericSend+0x4a>
 8006db0:	2300      	movs	r3, #0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10c      	bne.n	8006dd0 <xQueueGenericSend+0x68>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	b672      	cpsid	i
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	b662      	cpsie	i
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d103      	bne.n	8006dde <xQueueGenericSend+0x76>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <xQueueGenericSend+0x7a>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <xQueueGenericSend+0x7c>
 8006de2:	2300      	movs	r3, #0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10c      	bne.n	8006e02 <xQueueGenericSend+0x9a>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	b672      	cpsid	i
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	b662      	cpsie	i
 8006dfc:	623b      	str	r3, [r7, #32]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e02:	f001 fbc5 	bl	8008590 <xTaskGetSchedulerState>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d102      	bne.n	8006e12 <xQueueGenericSend+0xaa>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <xQueueGenericSend+0xae>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueGenericSend+0xb0>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10c      	bne.n	8006e36 <xQueueGenericSend+0xce>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	b672      	cpsid	i
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	b662      	cpsie	i
 8006e30:	61fb      	str	r3, [r7, #28]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e36:	f001 fef9 	bl	8008c2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <xQueueGenericSend+0xe4>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d129      	bne.n	8006ea0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e52:	f000 fc5d 	bl	8007710 <prvCopyDataToQueue>
 8006e56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	3324      	adds	r3, #36	; 0x24
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 f9cb 	bl	8008200 <xTaskRemoveFromEventList>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d013      	beq.n	8006e98 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e70:	4b3f      	ldr	r3, [pc, #252]	; (8006f70 <xQueueGenericSend+0x208>)
 8006e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	e00a      	b.n	8006e98 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d007      	beq.n	8006e98 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e88:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <xQueueGenericSend+0x208>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e98:	f001 fefc 	bl	8008c94 <vPortExitCritical>
				return pdPASS;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e063      	b.n	8006f68 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ea6:	f001 fef5 	bl	8008c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e05c      	b.n	8006f68 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb4:	f107 0314 	add.w	r3, r7, #20
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 fa05 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec2:	f001 fee7 	bl	8008c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec6:	f000 ff89 	bl	8007ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eca:	f001 feaf 	bl	8008c2c <vPortEnterCritical>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d103      	bne.n	8006ee4 <xQueueGenericSend+0x17c>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eea:	b25b      	sxtb	r3, r3
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d103      	bne.n	8006efa <xQueueGenericSend+0x192>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006efa:	f001 fecb 	bl	8008c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006efe:	1d3a      	adds	r2, r7, #4
 8006f00:	f107 0314 	add.w	r3, r7, #20
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 f9f4 	bl	80082f4 <xTaskCheckForTimeOut>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d124      	bne.n	8006f5c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f14:	f000 fcf4 	bl	8007900 <prvIsQueueFull>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d018      	beq.n	8006f50 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	3310      	adds	r3, #16
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 f944 	bl	80081b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f2e:	f000 fc7f 	bl	8007830 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f32:	f000 ff61 	bl	8007df8 <xTaskResumeAll>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f af7c 	bne.w	8006e36 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <xQueueGenericSend+0x208>)
 8006f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	e772      	b.n	8006e36 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f52:	f000 fc6d 	bl	8007830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f56:	f000 ff4f 	bl	8007df8 <xTaskResumeAll>
 8006f5a:	e76c      	b.n	8006e36 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f5e:	f000 fc67 	bl	8007830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f62:	f000 ff49 	bl	8007df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3738      	adds	r7, #56	; 0x38
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08e      	sub	sp, #56	; 0x38
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10c      	bne.n	8006fa6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	b672      	cpsid	i
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	b662      	cpsie	i
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <xQueueGenericSendFromISR+0x40>
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <xQueueGenericSendFromISR+0x44>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <xQueueGenericSendFromISR+0x46>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10c      	bne.n	8006fd8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	b672      	cpsid	i
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	b662      	cpsie	i
 8006fd2:	623b      	str	r3, [r7, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d103      	bne.n	8006fe6 <xQueueGenericSendFromISR+0x72>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <xQueueGenericSendFromISR+0x76>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e000      	b.n	8006fec <xQueueGenericSendFromISR+0x78>
 8006fea:	2300      	movs	r3, #0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10c      	bne.n	800700a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	b672      	cpsid	i
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	b662      	cpsie	i
 8007004:	61fb      	str	r3, [r7, #28]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800700a:	f001 fef7 	bl	8008dfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800700e:	f3ef 8211 	mrs	r2, BASEPRI
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	b672      	cpsid	i
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	b662      	cpsie	i
 8007026:	61ba      	str	r2, [r7, #24]
 8007028:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800702a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800702c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <xQueueGenericSendFromISR+0xcc>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d12c      	bne.n	800709a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007050:	f000 fb5e 	bl	8007710 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007054:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d112      	bne.n	8007084 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	d016      	beq.n	8007094 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	3324      	adds	r3, #36	; 0x24
 800706a:	4618      	mov	r0, r3
 800706c:	f001 f8c8 	bl	8008200 <xTaskRemoveFromEventList>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00e      	beq.n	8007094 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e007      	b.n	8007094 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007084:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007088:	3301      	adds	r3, #1
 800708a:	b2db      	uxtb	r3, r3
 800708c:	b25a      	sxtb	r2, r3
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007094:	2301      	movs	r3, #1
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007098:	e001      	b.n	800709e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800709a:	2300      	movs	r3, #0
 800709c:	637b      	str	r3, [r7, #52]	; 0x34
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3738      	adds	r7, #56	; 0x38
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08e      	sub	sp, #56	; 0x38
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10c      	bne.n	80070e2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	b672      	cpsid	i
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	b662      	cpsie	i
 80070dc:	623b      	str	r3, [r7, #32]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00c      	beq.n	8007104 <xQueueGiveFromISR+0x50>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	b672      	cpsid	i
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	b662      	cpsie	i
 80070fe:	61fb      	str	r3, [r7, #28]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d103      	bne.n	8007114 <xQueueGiveFromISR+0x60>
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <xQueueGiveFromISR+0x64>
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <xQueueGiveFromISR+0x66>
 8007118:	2300      	movs	r3, #0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10c      	bne.n	8007138 <xQueueGiveFromISR+0x84>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	b672      	cpsid	i
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	b662      	cpsie	i
 8007132:	61bb      	str	r3, [r7, #24]
}
 8007134:	bf00      	nop
 8007136:	e7fe      	b.n	8007136 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007138:	f001 fe60 	bl	8008dfc <vPortValidateInterruptPriority>
	__asm volatile
 800713c:	f3ef 8211 	mrs	r2, BASEPRI
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	b672      	cpsid	i
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	b662      	cpsie	i
 8007154:	617a      	str	r2, [r7, #20]
 8007156:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007158:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007168:	429a      	cmp	r2, r3
 800716a:	d22b      	bcs.n	80071c4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800717e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d112      	bne.n	80071ae <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d016      	beq.n	80071be <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	3324      	adds	r3, #36	; 0x24
 8007194:	4618      	mov	r0, r3
 8007196:	f001 f833 	bl	8008200 <xTaskRemoveFromEventList>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2201      	movs	r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e007      	b.n	80071be <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071b2:	3301      	adds	r3, #1
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	b25a      	sxtb	r2, r3
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071be:	2301      	movs	r3, #1
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	e001      	b.n	80071c8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071c4:	2300      	movs	r3, #0
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f383 8811 	msr	BASEPRI, r3
}
 80071d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3738      	adds	r7, #56	; 0x38
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	; 0x30
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10c      	bne.n	8007214 <xQueueReceive+0x34>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	b672      	cpsid	i
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	b662      	cpsie	i
 800720e:	623b      	str	r3, [r7, #32]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <xQueueReceive+0x42>
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <xQueueReceive+0x46>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <xQueueReceive+0x48>
 8007226:	2300      	movs	r3, #0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10c      	bne.n	8007246 <xQueueReceive+0x66>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	b672      	cpsid	i
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	b662      	cpsie	i
 8007240:	61fb      	str	r3, [r7, #28]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007246:	f001 f9a3 	bl	8008590 <xTaskGetSchedulerState>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <xQueueReceive+0x76>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <xQueueReceive+0x7a>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueReceive+0x7c>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10c      	bne.n	800727a <xQueueReceive+0x9a>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	b672      	cpsid	i
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	b662      	cpsie	i
 8007274:	61bb      	str	r3, [r7, #24]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800727a:	f001 fcd7 	bl	8008c2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01f      	beq.n	80072ca <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800728e:	f000 faa9 	bl	80077e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	1e5a      	subs	r2, r3, #1
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00f      	beq.n	80072c2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	3310      	adds	r3, #16
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 ffaa 	bl	8008200 <xTaskRemoveFromEventList>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072b2:	4b3d      	ldr	r3, [pc, #244]	; (80073a8 <xQueueReceive+0x1c8>)
 80072b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072c2:	f001 fce7 	bl	8008c94 <vPortExitCritical>
				return pdPASS;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e069      	b.n	800739e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d103      	bne.n	80072d8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072d0:	f001 fce0 	bl	8008c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e062      	b.n	800739e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072de:	f107 0310 	add.w	r3, r7, #16
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fff0 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072e8:	2301      	movs	r3, #1
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072ec:	f001 fcd2 	bl	8008c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072f0:	f000 fd74 	bl	8007ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072f4:	f001 fc9a 	bl	8008c2c <vPortEnterCritical>
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072fe:	b25b      	sxtb	r3, r3
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d103      	bne.n	800730e <xQueueReceive+0x12e>
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007314:	b25b      	sxtb	r3, r3
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d103      	bne.n	8007324 <xQueueReceive+0x144>
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007324:	f001 fcb6 	bl	8008c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007328:	1d3a      	adds	r2, r7, #4
 800732a:	f107 0310 	add.w	r3, r7, #16
 800732e:	4611      	mov	r1, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f000 ffdf 	bl	80082f4 <xTaskCheckForTimeOut>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d123      	bne.n	8007384 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800733c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733e:	f000 fac9 	bl	80078d4 <prvIsQueueEmpty>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d017      	beq.n	8007378 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	3324      	adds	r3, #36	; 0x24
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	4611      	mov	r1, r2
 8007350:	4618      	mov	r0, r3
 8007352:	f000 ff2f 	bl	80081b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007358:	f000 fa6a 	bl	8007830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800735c:	f000 fd4c 	bl	8007df8 <xTaskResumeAll>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d189      	bne.n	800727a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007366:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <xQueueReceive+0x1c8>)
 8007368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	e780      	b.n	800727a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800737a:	f000 fa59 	bl	8007830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800737e:	f000 fd3b 	bl	8007df8 <xTaskResumeAll>
 8007382:	e77a      	b.n	800727a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007386:	f000 fa53 	bl	8007830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800738a:	f000 fd35 	bl	8007df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800738e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007390:	f000 faa0 	bl	80078d4 <prvIsQueueEmpty>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	f43f af6f 	beq.w	800727a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800739c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3730      	adds	r7, #48	; 0x30
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	; 0x38
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073be:	2300      	movs	r3, #0
 80073c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10c      	bne.n	80073e2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	b672      	cpsid	i
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	b662      	cpsie	i
 80073dc:	623b      	str	r3, [r7, #32]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	b672      	cpsid	i
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	b662      	cpsie	i
 80073fe:	61fb      	str	r3, [r7, #28]
}
 8007400:	bf00      	nop
 8007402:	e7fe      	b.n	8007402 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007404:	f001 f8c4 	bl	8008590 <xTaskGetSchedulerState>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <xQueueSemaphoreTake+0x68>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <xQueueSemaphoreTake+0x6c>
 8007414:	2301      	movs	r3, #1
 8007416:	e000      	b.n	800741a <xQueueSemaphoreTake+0x6e>
 8007418:	2300      	movs	r3, #0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10c      	bne.n	8007438 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	b672      	cpsid	i
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	b662      	cpsie	i
 8007432:	61bb      	str	r3, [r7, #24]
}
 8007434:	bf00      	nop
 8007436:	e7fe      	b.n	8007436 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007438:	f001 fbf8 	bl	8008c2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	2b00      	cmp	r3, #0
 8007446:	d024      	beq.n	8007492 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	1e5a      	subs	r2, r3, #1
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d104      	bne.n	8007462 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007458:	f001 fa60 	bl	800891c <pvTaskIncrementMutexHeldCount>
 800745c:	4602      	mov	r2, r0
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00f      	beq.n	800748a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	3310      	adds	r3, #16
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fec6 	bl	8008200 <xTaskRemoveFromEventList>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800747a:	4b55      	ldr	r3, [pc, #340]	; (80075d0 <xQueueSemaphoreTake+0x224>)
 800747c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800748a:	f001 fc03 	bl	8008c94 <vPortExitCritical>
				return pdPASS;
 800748e:	2301      	movs	r3, #1
 8007490:	e099      	b.n	80075c6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d113      	bne.n	80074c0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00c      	beq.n	80074b8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	b672      	cpsid	i
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	b662      	cpsie	i
 80074b2:	617b      	str	r3, [r7, #20]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80074b8:	f001 fbec 	bl	8008c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074bc:	2300      	movs	r3, #0
 80074be:	e082      	b.n	80075c6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074c6:	f107 030c 	add.w	r3, r7, #12
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fefc 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074d4:	f001 fbde 	bl	8008c94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074d8:	f000 fc80 	bl	8007ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074dc:	f001 fba6 	bl	8008c2c <vPortEnterCritical>
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074e6:	b25b      	sxtb	r3, r3
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d103      	bne.n	80074f6 <xQueueSemaphoreTake+0x14a>
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074fc:	b25b      	sxtb	r3, r3
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007502:	d103      	bne.n	800750c <xQueueSemaphoreTake+0x160>
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800750c:	f001 fbc2 	bl	8008c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007510:	463a      	mov	r2, r7
 8007512:	f107 030c 	add.w	r3, r7, #12
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f000 feeb 	bl	80082f4 <xTaskCheckForTimeOut>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d132      	bne.n	800758a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007526:	f000 f9d5 	bl	80078d4 <prvIsQueueEmpty>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d026      	beq.n	800757e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007538:	f001 fb78 	bl	8008c2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4618      	mov	r0, r3
 8007542:	f001 f843 	bl	80085cc <xTaskPriorityInherit>
 8007546:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007548:	f001 fba4 	bl	8008c94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	3324      	adds	r3, #36	; 0x24
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fe2d 	bl	80081b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800755a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800755c:	f000 f968 	bl	8007830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007560:	f000 fc4a 	bl	8007df8 <xTaskResumeAll>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	f47f af66 	bne.w	8007438 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800756c:	4b18      	ldr	r3, [pc, #96]	; (80075d0 <xQueueSemaphoreTake+0x224>)
 800756e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	e75c      	b.n	8007438 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800757e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007580:	f000 f956 	bl	8007830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007584:	f000 fc38 	bl	8007df8 <xTaskResumeAll>
 8007588:	e756      	b.n	8007438 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800758a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800758c:	f000 f950 	bl	8007830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007590:	f000 fc32 	bl	8007df8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007596:	f000 f99d 	bl	80078d4 <prvIsQueueEmpty>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	f43f af4b 	beq.w	8007438 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80075a8:	f001 fb40 	bl	8008c2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80075ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075ae:	f000 f897 	bl	80076e0 <prvGetDisinheritPriorityAfterTimeout>
 80075b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 f910 	bl	80087e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80075c0:	f001 fb68 	bl	8008c94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3738      	adds	r7, #56	; 0x38
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08e      	sub	sp, #56	; 0x38
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10c      	bne.n	8007604 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	b672      	cpsid	i
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	b662      	cpsie	i
 80075fe:	623b      	str	r3, [r7, #32]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <xQueueReceiveFromISR+0x3e>
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <xQueueReceiveFromISR+0x42>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <xQueueReceiveFromISR+0x44>
 8007616:	2300      	movs	r3, #0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10c      	bne.n	8007636 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	b672      	cpsid	i
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	b662      	cpsie	i
 8007630:	61fb      	str	r3, [r7, #28]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007636:	f001 fbe1 	bl	8008dfc <vPortValidateInterruptPriority>
	__asm volatile
 800763a:	f3ef 8211 	mrs	r2, BASEPRI
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	b672      	cpsid	i
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	b662      	cpsie	i
 8007652:	61ba      	str	r2, [r7, #24]
 8007654:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007656:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	2b00      	cmp	r3, #0
 8007664:	d02f      	beq.n	80076c6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800766c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007674:	f000 f8b6 	bl	80077e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	1e5a      	subs	r2, r3, #1
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007688:	d112      	bne.n	80076b0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d016      	beq.n	80076c0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	3310      	adds	r3, #16
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fdb2 	bl	8008200 <xTaskRemoveFromEventList>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e007      	b.n	80076c0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80076b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b4:	3301      	adds	r3, #1
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	b25a      	sxtb	r2, r3
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80076c0:	2301      	movs	r3, #1
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
 80076c4:	e001      	b.n	80076ca <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f383 8811 	msr	BASEPRI, r3
}
 80076d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3738      	adds	r7, #56	; 0x38
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d006      	beq.n	80076fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f1c3 0307 	rsb	r3, r3, #7
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e001      	b.n	8007702 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007702:	68fb      	ldr	r3, [r7, #12]
	}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10d      	bne.n	800774a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d14d      	bne.n	80077d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 ffc6 	bl	80086cc <xTaskPriorityDisinherit>
 8007740:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	609a      	str	r2, [r3, #8]
 8007748:	e043      	b.n	80077d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d119      	bne.n	8007784 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6858      	ldr	r0, [r3, #4]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007758:	461a      	mov	r2, r3
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	f00d ffc4 	bl	80156e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	441a      	add	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	d32b      	bcc.n	80077d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	605a      	str	r2, [r3, #4]
 8007782:	e026      	b.n	80077d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68d8      	ldr	r0, [r3, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	461a      	mov	r2, r3
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	f00d ffaa 	bl	80156e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	425b      	negs	r3, r3
 800779e:	441a      	add	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d207      	bcs.n	80077c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	425b      	negs	r3, r3
 80077ba:	441a      	add	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d105      	bne.n	80077d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077da:	697b      	ldr	r3, [r7, #20]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d018      	beq.n	8007828 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	441a      	add	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	429a      	cmp	r2, r3
 800780e:	d303      	bcc.n	8007818 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68d9      	ldr	r1, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	461a      	mov	r2, r3
 8007822:	6838      	ldr	r0, [r7, #0]
 8007824:	f00d ff60 	bl	80156e8 <memcpy>
	}
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007838:	f001 f9f8 	bl	8008c2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007842:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007844:	e011      	b.n	800786a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d012      	beq.n	8007874 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3324      	adds	r3, #36	; 0x24
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fcd4 	bl	8008200 <xTaskRemoveFromEventList>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800785e:	f000 fdaf 	bl	80083c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	3b01      	subs	r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800786a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	dce9      	bgt.n	8007846 <prvUnlockQueue+0x16>
 8007872:	e000      	b.n	8007876 <prvUnlockQueue+0x46>
					break;
 8007874:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	22ff      	movs	r2, #255	; 0xff
 800787a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800787e:	f001 fa09 	bl	8008c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007882:	f001 f9d3 	bl	8008c2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800788c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800788e:	e011      	b.n	80078b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d012      	beq.n	80078be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3310      	adds	r3, #16
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fcaf 	bl	8008200 <xTaskRemoveFromEventList>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078a8:	f000 fd8a 	bl	80083c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dce9      	bgt.n	8007890 <prvUnlockQueue+0x60>
 80078bc:	e000      	b.n	80078c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	22ff      	movs	r2, #255	; 0xff
 80078c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80078c8:	f001 f9e4 	bl	8008c94 <vPortExitCritical>
}
 80078cc:	bf00      	nop
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078dc:	f001 f9a6 	bl	8008c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078e8:	2301      	movs	r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e001      	b.n	80078f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078f2:	f001 f9cf 	bl	8008c94 <vPortExitCritical>

	return xReturn;
 80078f6:	68fb      	ldr	r3, [r7, #12]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007908:	f001 f990 	bl	8008c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007914:	429a      	cmp	r2, r3
 8007916:	d102      	bne.n	800791e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e001      	b.n	8007922 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007922:	f001 f9b7 	bl	8008c94 <vPortExitCritical>

	return xReturn;
 8007926:	68fb      	ldr	r3, [r7, #12]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	; 0x38
 8007934:	af04      	add	r7, sp, #16
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10c      	bne.n	800795e <xTaskCreateStatic+0x2e>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	b672      	cpsid	i
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	b662      	cpsie	i
 8007958:	623b      	str	r3, [r7, #32]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10c      	bne.n	800797e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	b672      	cpsid	i
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	b662      	cpsie	i
 8007978:	61fb      	str	r3, [r7, #28]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800797e:	23b4      	movs	r3, #180	; 0xb4
 8007980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2bb4      	cmp	r3, #180	; 0xb4
 8007986:	d00c      	beq.n	80079a2 <xTaskCreateStatic+0x72>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	b672      	cpsid	i
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	b662      	cpsie	i
 800799c:	61bb      	str	r3, [r7, #24]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d01e      	beq.n	80079e8 <xTaskCreateStatic+0xb8>
 80079aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01b      	beq.n	80079e8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079c2:	2300      	movs	r3, #0
 80079c4:	9303      	str	r3, [sp, #12]
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	9302      	str	r3, [sp, #8]
 80079ca:	f107 0314 	add.w	r3, r7, #20
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	68b9      	ldr	r1, [r7, #8]
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 f850 	bl	8007a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079e2:	f000 f8ed 	bl	8007bc0 <prvAddNewTaskToReadyList>
 80079e6:	e001      	b.n	80079ec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079ec:	697b      	ldr	r3, [r7, #20]
	}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3728      	adds	r7, #40	; 0x28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b08c      	sub	sp, #48	; 0x30
 80079fa:	af04      	add	r7, sp, #16
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	603b      	str	r3, [r7, #0]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a06:	88fb      	ldrh	r3, [r7, #6]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 fa3a 	bl	8008e84 <pvPortMalloc>
 8007a10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00e      	beq.n	8007a36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a18:	20b4      	movs	r0, #180	; 0xb4
 8007a1a:	f001 fa33 	bl	8008e84 <pvPortMalloc>
 8007a1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a2c:	e005      	b.n	8007a3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a2e:	6978      	ldr	r0, [r7, #20]
 8007a30:	f001 faf2 	bl	8009018 <vPortFree>
 8007a34:	e001      	b.n	8007a3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d017      	beq.n	8007a70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a48:	88fa      	ldrh	r2, [r7, #6]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	9302      	str	r3, [sp, #8]
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f80e 	bl	8007a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a64:	69f8      	ldr	r0, [r7, #28]
 8007a66:	f000 f8ab 	bl	8007bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	e002      	b.n	8007a76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
 8007a74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a76:	69bb      	ldr	r3, [r7, #24]
	}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007a98:	440b      	add	r3, r1
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f023 0307 	bic.w	r3, r3, #7
 8007aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00c      	beq.n	8007acc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	b672      	cpsid	i
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	b662      	cpsie	i
 8007ac6:	617b      	str	r3, [r7, #20]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01f      	beq.n	8007b12 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61fb      	str	r3, [r7, #28]
 8007ad6:	e012      	b.n	8007afe <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	7819      	ldrb	r1, [r3, #0]
 8007ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3334      	adds	r3, #52	; 0x34
 8007ae8:	460a      	mov	r2, r1
 8007aea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	4413      	add	r3, r2
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d006      	beq.n	8007b06 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	3301      	adds	r3, #1
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	2b0f      	cmp	r3, #15
 8007b02:	d9e9      	bls.n	8007ad8 <prvInitialiseNewTask+0x58>
 8007b04:	e000      	b.n	8007b08 <prvInitialiseNewTask+0x88>
			{
				break;
 8007b06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b10:	e003      	b.n	8007b1a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d901      	bls.n	8007b24 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b20:	2306      	movs	r3, #6
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	2200      	movs	r2, #0
 8007b34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	3304      	adds	r3, #4
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fee6 	bl	800690c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	3318      	adds	r3, #24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe fee1 	bl	800690c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b52:	f1c3 0207 	rsb	r2, r3, #7
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	334c      	adds	r3, #76	; 0x4c
 8007b74:	2260      	movs	r2, #96	; 0x60
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f00d fddd 	bl	8015738 <memset>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	4a0c      	ldr	r2, [pc, #48]	; (8007bb4 <prvInitialiseNewTask+0x134>)
 8007b82:	651a      	str	r2, [r3, #80]	; 0x50
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	4a0c      	ldr	r2, [pc, #48]	; (8007bb8 <prvInitialiseNewTask+0x138>)
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	4a0b      	ldr	r2, [pc, #44]	; (8007bbc <prvInitialiseNewTask+0x13c>)
 8007b8e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	69b8      	ldr	r0, [r7, #24]
 8007b96:	f000 ff3b 	bl	8008a10 <pxPortInitialiseStack>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007baa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bac:	bf00      	nop
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	08019cf4 	.word	0x08019cf4
 8007bb8:	08019d14 	.word	0x08019d14
 8007bbc:	08019cd4 	.word	0x08019cd4

08007bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bc8:	f001 f830 	bl	8008c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bcc:	4b2a      	ldr	r3, [pc, #168]	; (8007c78 <prvAddNewTaskToReadyList+0xb8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	4a29      	ldr	r2, [pc, #164]	; (8007c78 <prvAddNewTaskToReadyList+0xb8>)
 8007bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bd6:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <prvAddNewTaskToReadyList+0xbc>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bde:	4a27      	ldr	r2, [pc, #156]	; (8007c7c <prvAddNewTaskToReadyList+0xbc>)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007be4:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <prvAddNewTaskToReadyList+0xb8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d110      	bne.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bec:	f000 fc0c 	bl	8008408 <prvInitialiseTaskLists>
 8007bf0:	e00d      	b.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bf2:	4b23      	ldr	r3, [pc, #140]	; (8007c80 <prvAddNewTaskToReadyList+0xc0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bfa:	4b20      	ldr	r3, [pc, #128]	; (8007c7c <prvAddNewTaskToReadyList+0xbc>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d802      	bhi.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c08:	4a1c      	ldr	r2, [pc, #112]	; (8007c7c <prvAddNewTaskToReadyList+0xbc>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c0e:	4b1d      	ldr	r3, [pc, #116]	; (8007c84 <prvAddNewTaskToReadyList+0xc4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	4a1b      	ldr	r2, [pc, #108]	; (8007c84 <prvAddNewTaskToReadyList+0xc4>)
 8007c16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	409a      	lsls	r2, r3
 8007c20:	4b19      	ldr	r3, [pc, #100]	; (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4a15      	ldr	r2, [pc, #84]	; (8007c8c <prvAddNewTaskToReadyList+0xcc>)
 8007c38:	441a      	add	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7fe fe70 	bl	8006926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c46:	f001 f825 	bl	8008c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <prvAddNewTaskToReadyList+0xc0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00e      	beq.n	8007c70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c52:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <prvAddNewTaskToReadyList+0xbc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d207      	bcs.n	8007c70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <prvAddNewTaskToReadyList+0xd0>)
 8007c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20005674 	.word	0x20005674
 8007c7c:	20005574 	.word	0x20005574
 8007c80:	20005680 	.word	0x20005680
 8007c84:	20005690 	.word	0x20005690
 8007c88:	2000567c 	.word	0x2000567c
 8007c8c:	20005578 	.word	0x20005578
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d019      	beq.n	8007cda <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ca6:	4b14      	ldr	r3, [pc, #80]	; (8007cf8 <vTaskDelay+0x64>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <vTaskDelay+0x34>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	b672      	cpsid	i
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	b662      	cpsie	i
 8007cc2:	60bb      	str	r3, [r7, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007cc8:	f000 f888 	bl	8007ddc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ccc:	2100      	movs	r1, #0
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fe38 	bl	8008944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cd4:	f000 f890 	bl	8007df8 <xTaskResumeAll>
 8007cd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d107      	bne.n	8007cf0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <vTaskDelay+0x68>)
 8007ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cf0:	bf00      	nop
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	2000569c 	.word	0x2000569c
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d0e:	463a      	mov	r2, r7
 8007d10:	1d39      	adds	r1, r7, #4
 8007d12:	f107 0308 	add.w	r3, r7, #8
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7f8 fc54 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	9202      	str	r2, [sp, #8]
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	2300      	movs	r3, #0
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	460a      	mov	r2, r1
 8007d2e:	4923      	ldr	r1, [pc, #140]	; (8007dbc <vTaskStartScheduler+0xbc>)
 8007d30:	4823      	ldr	r0, [pc, #140]	; (8007dc0 <vTaskStartScheduler+0xc0>)
 8007d32:	f7ff fdfd 	bl	8007930 <xTaskCreateStatic>
 8007d36:	4603      	mov	r3, r0
 8007d38:	4a22      	ldr	r2, [pc, #136]	; (8007dc4 <vTaskStartScheduler+0xc4>)
 8007d3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d3c:	4b21      	ldr	r3, [pc, #132]	; (8007dc4 <vTaskStartScheduler+0xc4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d44:	2301      	movs	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	e001      	b.n	8007d4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d11d      	bne.n	8007d90 <vTaskStartScheduler+0x90>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	b672      	cpsid	i
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	b662      	cpsie	i
 8007d68:	613b      	str	r3, [r7, #16]
}
 8007d6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d6c:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <vTaskStartScheduler+0xc8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	334c      	adds	r3, #76	; 0x4c
 8007d72:	4a16      	ldr	r2, [pc, #88]	; (8007dcc <vTaskStartScheduler+0xcc>)
 8007d74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d76:	4b16      	ldr	r3, [pc, #88]	; (8007dd0 <vTaskStartScheduler+0xd0>)
 8007d78:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d7e:	4b15      	ldr	r3, [pc, #84]	; (8007dd4 <vTaskStartScheduler+0xd4>)
 8007d80:	2201      	movs	r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d84:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <vTaskStartScheduler+0xd8>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d8a:	f000 fed1 	bl	8008b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d8e:	e010      	b.n	8007db2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d10c      	bne.n	8007db2 <vTaskStartScheduler+0xb2>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	60fb      	str	r3, [r7, #12]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <vTaskStartScheduler+0xb0>
}
 8007db2:	bf00      	nop
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	08016c24 	.word	0x08016c24
 8007dc0:	080083d9 	.word	0x080083d9
 8007dc4:	20005698 	.word	0x20005698
 8007dc8:	20005574 	.word	0x20005574
 8007dcc:	20000030 	.word	0x20000030
 8007dd0:	20005694 	.word	0x20005694
 8007dd4:	20005680 	.word	0x20005680
 8007dd8:	20005678 	.word	0x20005678

08007ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <vTaskSuspendAll+0x18>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a03      	ldr	r2, [pc, #12]	; (8007df4 <vTaskSuspendAll+0x18>)
 8007de8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007dea:	bf00      	nop
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	2000569c 	.word	0x2000569c

08007df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e06:	4b42      	ldr	r3, [pc, #264]	; (8007f10 <xTaskResumeAll+0x118>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10c      	bne.n	8007e28 <xTaskResumeAll+0x30>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	b672      	cpsid	i
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	b662      	cpsie	i
 8007e22:	603b      	str	r3, [r7, #0]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e28:	f000 ff00 	bl	8008c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e2c:	4b38      	ldr	r3, [pc, #224]	; (8007f10 <xTaskResumeAll+0x118>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	4a37      	ldr	r2, [pc, #220]	; (8007f10 <xTaskResumeAll+0x118>)
 8007e34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e36:	4b36      	ldr	r3, [pc, #216]	; (8007f10 <xTaskResumeAll+0x118>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d161      	bne.n	8007f02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e3e:	4b35      	ldr	r3, [pc, #212]	; (8007f14 <xTaskResumeAll+0x11c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d05d      	beq.n	8007f02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e46:	e02e      	b.n	8007ea6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e48:	4b33      	ldr	r3, [pc, #204]	; (8007f18 <xTaskResumeAll+0x120>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3318      	adds	r3, #24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fdc3 	bl	80069e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe fdbe 	bl	80069e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	2201      	movs	r2, #1
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	4b2b      	ldr	r3, [pc, #172]	; (8007f1c <xTaskResumeAll+0x124>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	4a2a      	ldr	r2, [pc, #168]	; (8007f1c <xTaskResumeAll+0x124>)
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4a27      	ldr	r2, [pc, #156]	; (8007f20 <xTaskResumeAll+0x128>)
 8007e84:	441a      	add	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fe fd4a 	bl	8006926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e96:	4b23      	ldr	r3, [pc, #140]	; (8007f24 <xTaskResumeAll+0x12c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d302      	bcc.n	8007ea6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <xTaskResumeAll+0x130>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ea6:	4b1c      	ldr	r3, [pc, #112]	; (8007f18 <xTaskResumeAll+0x120>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1cc      	bne.n	8007e48 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007eb4:	f000 fb4c 	bl	8008550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007eb8:	4b1c      	ldr	r3, [pc, #112]	; (8007f2c <xTaskResumeAll+0x134>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d010      	beq.n	8007ee6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ec4:	f000 f858 	bl	8007f78 <xTaskIncrementTick>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007ece:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <xTaskResumeAll+0x130>)
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f1      	bne.n	8007ec4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007ee0:	4b12      	ldr	r3, [pc, #72]	; (8007f2c <xTaskResumeAll+0x134>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ee6:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <xTaskResumeAll+0x130>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ef2:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <xTaskResumeAll+0x138>)
 8007ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f02:	f000 fec7 	bl	8008c94 <vPortExitCritical>

	return xAlreadyYielded;
 8007f06:	68bb      	ldr	r3, [r7, #8]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	2000569c 	.word	0x2000569c
 8007f14:	20005674 	.word	0x20005674
 8007f18:	20005634 	.word	0x20005634
 8007f1c:	2000567c 	.word	0x2000567c
 8007f20:	20005578 	.word	0x20005578
 8007f24:	20005574 	.word	0x20005574
 8007f28:	20005688 	.word	0x20005688
 8007f2c:	20005684 	.word	0x20005684
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f3a:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <xTaskGetTickCount+0x1c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f40:	687b      	ldr	r3, [r7, #4]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	20005678 	.word	0x20005678

08007f54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f5a:	f000 ff4f 	bl	8008dfc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007f62:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <xTaskGetTickCountFromISR+0x20>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f68:	683b      	ldr	r3, [r7, #0]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20005678 	.word	0x20005678

08007f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f82:	4b4f      	ldr	r3, [pc, #316]	; (80080c0 <xTaskIncrementTick+0x148>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 808a 	bne.w	80080a0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f8c:	4b4d      	ldr	r3, [pc, #308]	; (80080c4 <xTaskIncrementTick+0x14c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f94:	4a4b      	ldr	r2, [pc, #300]	; (80080c4 <xTaskIncrementTick+0x14c>)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d122      	bne.n	8007fe6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fa0:	4b49      	ldr	r3, [pc, #292]	; (80080c8 <xTaskIncrementTick+0x150>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00c      	beq.n	8007fc4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	b672      	cpsid	i
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	b662      	cpsie	i
 8007fbe:	603b      	str	r3, [r7, #0]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <xTaskIncrementTick+0x4a>
 8007fc4:	4b40      	ldr	r3, [pc, #256]	; (80080c8 <xTaskIncrementTick+0x150>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	4b40      	ldr	r3, [pc, #256]	; (80080cc <xTaskIncrementTick+0x154>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a3e      	ldr	r2, [pc, #248]	; (80080c8 <xTaskIncrementTick+0x150>)
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4a3e      	ldr	r2, [pc, #248]	; (80080cc <xTaskIncrementTick+0x154>)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4b3d      	ldr	r3, [pc, #244]	; (80080d0 <xTaskIncrementTick+0x158>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4a3c      	ldr	r2, [pc, #240]	; (80080d0 <xTaskIncrementTick+0x158>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	f000 fab5 	bl	8008550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fe6:	4b3b      	ldr	r3, [pc, #236]	; (80080d4 <xTaskIncrementTick+0x15c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d348      	bcc.n	8008082 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff0:	4b35      	ldr	r3, [pc, #212]	; (80080c8 <xTaskIncrementTick+0x150>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffa:	4b36      	ldr	r3, [pc, #216]	; (80080d4 <xTaskIncrementTick+0x15c>)
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8008000:	601a      	str	r2, [r3, #0]
					break;
 8008002:	e03e      	b.n	8008082 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008004:	4b30      	ldr	r3, [pc, #192]	; (80080c8 <xTaskIncrementTick+0x150>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d203      	bcs.n	8008024 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800801c:	4a2d      	ldr	r2, [pc, #180]	; (80080d4 <xTaskIncrementTick+0x15c>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008022:	e02e      	b.n	8008082 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3304      	adds	r3, #4
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe fcd9 	bl	80069e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3318      	adds	r3, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fcd0 	bl	80069e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	2201      	movs	r2, #1
 8008046:	409a      	lsls	r2, r3
 8008048:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <xTaskIncrementTick+0x160>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4313      	orrs	r3, r2
 800804e:	4a22      	ldr	r2, [pc, #136]	; (80080d8 <xTaskIncrementTick+0x160>)
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4a1f      	ldr	r2, [pc, #124]	; (80080dc <xTaskIncrementTick+0x164>)
 8008060:	441a      	add	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	3304      	adds	r3, #4
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f7fe fc5c 	bl	8006926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008072:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <xTaskIncrementTick+0x168>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	429a      	cmp	r2, r3
 800807a:	d3b9      	bcc.n	8007ff0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008080:	e7b6      	b.n	8007ff0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008082:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <xTaskIncrementTick+0x168>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008088:	4914      	ldr	r1, [pc, #80]	; (80080dc <xTaskIncrementTick+0x164>)
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	440b      	add	r3, r1
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d907      	bls.n	80080aa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800809a:	2301      	movs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	e004      	b.n	80080aa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080a0:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <xTaskIncrementTick+0x16c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3301      	adds	r3, #1
 80080a6:	4a0f      	ldr	r2, [pc, #60]	; (80080e4 <xTaskIncrementTick+0x16c>)
 80080a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <xTaskIncrementTick+0x170>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80080b2:	2301      	movs	r3, #1
 80080b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080b6:	697b      	ldr	r3, [r7, #20]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	2000569c 	.word	0x2000569c
 80080c4:	20005678 	.word	0x20005678
 80080c8:	2000562c 	.word	0x2000562c
 80080cc:	20005630 	.word	0x20005630
 80080d0:	2000568c 	.word	0x2000568c
 80080d4:	20005694 	.word	0x20005694
 80080d8:	2000567c 	.word	0x2000567c
 80080dc:	20005578 	.word	0x20005578
 80080e0:	20005574 	.word	0x20005574
 80080e4:	20005684 	.word	0x20005684
 80080e8:	20005688 	.word	0x20005688

080080ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080f2:	4b2a      	ldr	r3, [pc, #168]	; (800819c <vTaskSwitchContext+0xb0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080fa:	4b29      	ldr	r3, [pc, #164]	; (80081a0 <vTaskSwitchContext+0xb4>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008100:	e046      	b.n	8008190 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008102:	4b27      	ldr	r3, [pc, #156]	; (80081a0 <vTaskSwitchContext+0xb4>)
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008108:	4b26      	ldr	r3, [pc, #152]	; (80081a4 <vTaskSwitchContext+0xb8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	fab3 f383 	clz	r3, r3
 8008114:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	f1c3 031f 	rsb	r3, r3, #31
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	4922      	ldr	r1, [pc, #136]	; (80081a8 <vTaskSwitchContext+0xbc>)
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10c      	bne.n	800814c <vTaskSwitchContext+0x60>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	607b      	str	r3, [r7, #4]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <vTaskSwitchContext+0x5e>
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4a14      	ldr	r2, [pc, #80]	; (80081a8 <vTaskSwitchContext+0xbc>)
 8008158:	4413      	add	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	605a      	str	r2, [r3, #4]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3308      	adds	r3, #8
 800816e:	429a      	cmp	r2, r3
 8008170:	d104      	bne.n	800817c <vTaskSwitchContext+0x90>
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	605a      	str	r2, [r3, #4]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	4a0a      	ldr	r2, [pc, #40]	; (80081ac <vTaskSwitchContext+0xc0>)
 8008184:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <vTaskSwitchContext+0xc0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	334c      	adds	r3, #76	; 0x4c
 800818c:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <vTaskSwitchContext+0xc4>)
 800818e:	6013      	str	r3, [r2, #0]
}
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	2000569c 	.word	0x2000569c
 80081a0:	20005688 	.word	0x20005688
 80081a4:	2000567c 	.word	0x2000567c
 80081a8:	20005578 	.word	0x20005578
 80081ac:	20005574 	.word	0x20005574
 80081b0:	20000030 	.word	0x20000030

080081b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10c      	bne.n	80081de <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	b672      	cpsid	i
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	b662      	cpsie	i
 80081d8:	60fb      	str	r3, [r7, #12]
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <vTaskPlaceOnEventList+0x48>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3318      	adds	r3, #24
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fe fbc1 	bl	800696e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081ec:	2101      	movs	r1, #1
 80081ee:	6838      	ldr	r0, [r7, #0]
 80081f0:	f000 fba8 	bl	8008944 <prvAddCurrentTaskToDelayedList>
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20005574 	.word	0x20005574

08008200 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10c      	bne.n	8008230 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	b672      	cpsid	i
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	b662      	cpsie	i
 800822a:	60fb      	str	r3, [r7, #12]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	3318      	adds	r3, #24
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe fbd3 	bl	80069e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800823a:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <xTaskRemoveFromEventList+0xb0>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d11c      	bne.n	800827c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	3304      	adds	r3, #4
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fbca 	bl	80069e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	2201      	movs	r2, #1
 8008252:	409a      	lsls	r2, r3
 8008254:	4b17      	ldr	r3, [pc, #92]	; (80082b4 <xTaskRemoveFromEventList+0xb4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4313      	orrs	r3, r2
 800825a:	4a16      	ldr	r2, [pc, #88]	; (80082b4 <xTaskRemoveFromEventList+0xb4>)
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4a13      	ldr	r2, [pc, #76]	; (80082b8 <xTaskRemoveFromEventList+0xb8>)
 800826c:	441a      	add	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	3304      	adds	r3, #4
 8008272:	4619      	mov	r1, r3
 8008274:	4610      	mov	r0, r2
 8008276:	f7fe fb56 	bl	8006926 <vListInsertEnd>
 800827a:	e005      	b.n	8008288 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	3318      	adds	r3, #24
 8008280:	4619      	mov	r1, r3
 8008282:	480e      	ldr	r0, [pc, #56]	; (80082bc <xTaskRemoveFromEventList+0xbc>)
 8008284:	f7fe fb4f 	bl	8006926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828c:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <xTaskRemoveFromEventList+0xc0>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	429a      	cmp	r2, r3
 8008294:	d905      	bls.n	80082a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008296:	2301      	movs	r3, #1
 8008298:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800829a:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <xTaskRemoveFromEventList+0xc4>)
 800829c:	2201      	movs	r2, #1
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e001      	b.n	80082a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80082a2:	2300      	movs	r3, #0
 80082a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082a6:	697b      	ldr	r3, [r7, #20]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	2000569c 	.word	0x2000569c
 80082b4:	2000567c 	.word	0x2000567c
 80082b8:	20005578 	.word	0x20005578
 80082bc:	20005634 	.word	0x20005634
 80082c0:	20005574 	.word	0x20005574
 80082c4:	20005688 	.word	0x20005688

080082c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <vTaskInternalSetTimeOutState+0x24>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082d8:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <vTaskInternalSetTimeOutState+0x28>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	605a      	str	r2, [r3, #4]
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	2000568c 	.word	0x2000568c
 80082f0:	20005678 	.word	0x20005678

080082f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10c      	bne.n	800831e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	b672      	cpsid	i
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	b662      	cpsie	i
 8008318:	613b      	str	r3, [r7, #16]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10c      	bne.n	800833e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	b672      	cpsid	i
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	b662      	cpsie	i
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800833e:	f000 fc75 	bl	8008c2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008342:	4b1d      	ldr	r3, [pc, #116]	; (80083b8 <xTaskCheckForTimeOut+0xc4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d102      	bne.n	8008362 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800835c:	2300      	movs	r3, #0
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	e023      	b.n	80083aa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b15      	ldr	r3, [pc, #84]	; (80083bc <xTaskCheckForTimeOut+0xc8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d007      	beq.n	800837e <xTaskCheckForTimeOut+0x8a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	429a      	cmp	r2, r3
 8008376:	d302      	bcc.n	800837e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	61fb      	str	r3, [r7, #28]
 800837c:	e015      	b.n	80083aa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	d20b      	bcs.n	80083a0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ff97 	bl	80082c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	e004      	b.n	80083aa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083aa:	f000 fc73 	bl	8008c94 <vPortExitCritical>

	return xReturn;
 80083ae:	69fb      	ldr	r3, [r7, #28]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20005678 	.word	0x20005678
 80083bc:	2000568c 	.word	0x2000568c

080083c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083c4:	4b03      	ldr	r3, [pc, #12]	; (80083d4 <vTaskMissedYield+0x14>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
}
 80083ca:	bf00      	nop
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	20005688 	.word	0x20005688

080083d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083e0:	f000 f852 	bl	8008488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083e4:	4b06      	ldr	r3, [pc, #24]	; (8008400 <prvIdleTask+0x28>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d9f9      	bls.n	80083e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <prvIdleTask+0x2c>)
 80083ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083fc:	e7f0      	b.n	80083e0 <prvIdleTask+0x8>
 80083fe:	bf00      	nop
 8008400:	20005578 	.word	0x20005578
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
 8008412:	e00c      	b.n	800842e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4a12      	ldr	r2, [pc, #72]	; (8008468 <prvInitialiseTaskLists+0x60>)
 8008420:	4413      	add	r3, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fa52 	bl	80068cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3301      	adds	r3, #1
 800842c:	607b      	str	r3, [r7, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b06      	cmp	r3, #6
 8008432:	d9ef      	bls.n	8008414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008434:	480d      	ldr	r0, [pc, #52]	; (800846c <prvInitialiseTaskLists+0x64>)
 8008436:	f7fe fa49 	bl	80068cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800843a:	480d      	ldr	r0, [pc, #52]	; (8008470 <prvInitialiseTaskLists+0x68>)
 800843c:	f7fe fa46 	bl	80068cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008440:	480c      	ldr	r0, [pc, #48]	; (8008474 <prvInitialiseTaskLists+0x6c>)
 8008442:	f7fe fa43 	bl	80068cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008446:	480c      	ldr	r0, [pc, #48]	; (8008478 <prvInitialiseTaskLists+0x70>)
 8008448:	f7fe fa40 	bl	80068cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800844c:	480b      	ldr	r0, [pc, #44]	; (800847c <prvInitialiseTaskLists+0x74>)
 800844e:	f7fe fa3d 	bl	80068cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008452:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <prvInitialiseTaskLists+0x78>)
 8008454:	4a05      	ldr	r2, [pc, #20]	; (800846c <prvInitialiseTaskLists+0x64>)
 8008456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <prvInitialiseTaskLists+0x7c>)
 800845a:	4a05      	ldr	r2, [pc, #20]	; (8008470 <prvInitialiseTaskLists+0x68>)
 800845c:	601a      	str	r2, [r3, #0]
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20005578 	.word	0x20005578
 800846c:	20005604 	.word	0x20005604
 8008470:	20005618 	.word	0x20005618
 8008474:	20005634 	.word	0x20005634
 8008478:	20005648 	.word	0x20005648
 800847c:	20005660 	.word	0x20005660
 8008480:	2000562c 	.word	0x2000562c
 8008484:	20005630 	.word	0x20005630

08008488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800848e:	e019      	b.n	80084c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008490:	f000 fbcc 	bl	8008c2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008494:	4b10      	ldr	r3, [pc, #64]	; (80084d8 <prvCheckTasksWaitingTermination+0x50>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3304      	adds	r3, #4
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fa9d 	bl	80069e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084a6:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <prvCheckTasksWaitingTermination+0x54>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	4a0b      	ldr	r2, [pc, #44]	; (80084dc <prvCheckTasksWaitingTermination+0x54>)
 80084ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	4a0a      	ldr	r2, [pc, #40]	; (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084ba:	f000 fbeb 	bl	8008c94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f810 	bl	80084e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084c4:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <prvCheckTasksWaitingTermination+0x58>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e1      	bne.n	8008490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20005648 	.word	0x20005648
 80084dc:	20005674 	.word	0x20005674
 80084e0:	2000565c 	.word	0x2000565c

080084e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	334c      	adds	r3, #76	; 0x4c
 80084f0:	4618      	mov	r0, r3
 80084f2:	f00d faf5 	bl	8015ae0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d108      	bne.n	8008512 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fd87 	bl	8009018 <vPortFree>
				vPortFree( pxTCB );
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fd84 	bl	8009018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008510:	e01a      	b.n	8008548 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008518:	2b01      	cmp	r3, #1
 800851a:	d103      	bne.n	8008524 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fd7b 	bl	8009018 <vPortFree>
	}
 8008522:	e011      	b.n	8008548 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800852a:	2b02      	cmp	r3, #2
 800852c:	d00c      	beq.n	8008548 <prvDeleteTCB+0x64>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	b672      	cpsid	i
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	b662      	cpsie	i
 8008542:	60fb      	str	r3, [r7, #12]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <prvDeleteTCB+0x62>
	}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008556:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <prvResetNextTaskUnblockTime+0x38>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <prvResetNextTaskUnblockTime+0x3c>)
 8008562:	f04f 32ff 	mov.w	r2, #4294967295
 8008566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008568:	e008      	b.n	800857c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856a:	4b07      	ldr	r3, [pc, #28]	; (8008588 <prvResetNextTaskUnblockTime+0x38>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	4a04      	ldr	r2, [pc, #16]	; (800858c <prvResetNextTaskUnblockTime+0x3c>)
 800857a:	6013      	str	r3, [r2, #0]
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	2000562c 	.word	0x2000562c
 800858c:	20005694 	.word	0x20005694

08008590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008596:	4b0b      	ldr	r3, [pc, #44]	; (80085c4 <xTaskGetSchedulerState+0x34>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800859e:	2301      	movs	r3, #1
 80085a0:	607b      	str	r3, [r7, #4]
 80085a2:	e008      	b.n	80085b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a4:	4b08      	ldr	r3, [pc, #32]	; (80085c8 <xTaskGetSchedulerState+0x38>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085ac:	2302      	movs	r3, #2
 80085ae:	607b      	str	r3, [r7, #4]
 80085b0:	e001      	b.n	80085b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085b2:	2300      	movs	r3, #0
 80085b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085b6:	687b      	ldr	r3, [r7, #4]
	}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	20005680 	.word	0x20005680
 80085c8:	2000569c 	.word	0x2000569c

080085cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d069      	beq.n	80086b6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e6:	4b36      	ldr	r3, [pc, #216]	; (80086c0 <xTaskPriorityInherit+0xf4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d259      	bcs.n	80086a4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	db06      	blt.n	8008606 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f8:	4b31      	ldr	r3, [pc, #196]	; (80086c0 <xTaskPriorityInherit+0xf4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	f1c3 0207 	rsb	r2, r3, #7
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6959      	ldr	r1, [r3, #20]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4a2b      	ldr	r2, [pc, #172]	; (80086c4 <xTaskPriorityInherit+0xf8>)
 8008618:	4413      	add	r3, r2
 800861a:	4299      	cmp	r1, r3
 800861c:	d13a      	bne.n	8008694 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	3304      	adds	r3, #4
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe f9dc 	bl	80069e0 <uxListRemove>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d115      	bne.n	800865a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008632:	4924      	ldr	r1, [pc, #144]	; (80086c4 <xTaskPriorityInherit+0xf8>)
 8008634:	4613      	mov	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <xTaskPriorityInherit+0x8e>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	2201      	movs	r2, #1
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	43da      	mvns	r2, r3
 8008650:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <xTaskPriorityInherit+0xfc>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4013      	ands	r3, r2
 8008656:	4a1c      	ldr	r2, [pc, #112]	; (80086c8 <xTaskPriorityInherit+0xfc>)
 8008658:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800865a:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <xTaskPriorityInherit+0xf4>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	2201      	movs	r2, #1
 800866a:	409a      	lsls	r2, r3
 800866c:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <xTaskPriorityInherit+0xfc>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4313      	orrs	r3, r2
 8008672:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <xTaskPriorityInherit+0xfc>)
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867a:	4613      	mov	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4a10      	ldr	r2, [pc, #64]	; (80086c4 <xTaskPriorityInherit+0xf8>)
 8008684:	441a      	add	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	3304      	adds	r3, #4
 800868a:	4619      	mov	r1, r3
 800868c:	4610      	mov	r0, r2
 800868e:	f7fe f94a 	bl	8006926 <vListInsertEnd>
 8008692:	e004      	b.n	800869e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008694:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <xTaskPriorityInherit+0xf4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800869e:	2301      	movs	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e008      	b.n	80086b6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086a8:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <xTaskPriorityInherit+0xf4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d201      	bcs.n	80086b6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086b2:	2301      	movs	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086b6:	68fb      	ldr	r3, [r7, #12]
	}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20005574 	.word	0x20005574
 80086c4:	20005578 	.word	0x20005578
 80086c8:	2000567c 	.word	0x2000567c

080086cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d072      	beq.n	80087c8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086e2:	4b3c      	ldr	r3, [pc, #240]	; (80087d4 <xTaskPriorityDisinherit+0x108>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d00c      	beq.n	8008706 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	b672      	cpsid	i
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	b662      	cpsie	i
 8008700:	60fb      	str	r3, [r7, #12]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10c      	bne.n	8008728 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	b672      	cpsid	i
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	b662      	cpsie	i
 8008722:	60bb      	str	r3, [r7, #8]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800872c:	1e5a      	subs	r2, r3, #1
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873a:	429a      	cmp	r2, r3
 800873c:	d044      	beq.n	80087c8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008742:	2b00      	cmp	r3, #0
 8008744:	d140      	bne.n	80087c8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	3304      	adds	r3, #4
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe f948 	bl	80069e0 <uxListRemove>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d115      	bne.n	8008782 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875a:	491f      	ldr	r1, [pc, #124]	; (80087d8 <xTaskPriorityDisinherit+0x10c>)
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <xTaskPriorityDisinherit+0xb6>
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	2201      	movs	r2, #1
 8008772:	fa02 f303 	lsl.w	r3, r2, r3
 8008776:	43da      	mvns	r2, r3
 8008778:	4b18      	ldr	r3, [pc, #96]	; (80087dc <xTaskPriorityDisinherit+0x110>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4013      	ands	r3, r2
 800877e:	4a17      	ldr	r2, [pc, #92]	; (80087dc <xTaskPriorityDisinherit+0x110>)
 8008780:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	f1c3 0207 	rsb	r2, r3, #7
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	2201      	movs	r2, #1
 800879c:	409a      	lsls	r2, r3
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <xTaskPriorityDisinherit+0x110>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	4a0d      	ldr	r2, [pc, #52]	; (80087dc <xTaskPriorityDisinherit+0x110>)
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4a08      	ldr	r2, [pc, #32]	; (80087d8 <xTaskPriorityDisinherit+0x10c>)
 80087b6:	441a      	add	r2, r3
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	f7fe f8b1 	bl	8006926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087c8:	697b      	ldr	r3, [r7, #20]
	}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20005574 	.word	0x20005574
 80087d8:	20005578 	.word	0x20005578
 80087dc:	2000567c 	.word	0x2000567c

080087e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80087ee:	2301      	movs	r3, #1
 80087f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8087 	beq.w	8008908 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10c      	bne.n	800881c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	b672      	cpsid	i
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	b662      	cpsie	i
 8008816:	60fb      	str	r3, [r7, #12]
}
 8008818:	bf00      	nop
 800881a:	e7fe      	b.n	800881a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d902      	bls.n	800882c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	e002      	b.n	8008832 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008830:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	429a      	cmp	r2, r3
 800883a:	d065      	beq.n	8008908 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	429a      	cmp	r2, r3
 8008844:	d160      	bne.n	8008908 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008846:	4b32      	ldr	r3, [pc, #200]	; (8008910 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	429a      	cmp	r2, r3
 800884e:	d10c      	bne.n	800886a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	b672      	cpsid	i
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	b662      	cpsie	i
 8008864:	60bb      	str	r3, [r7, #8]
}
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	69fa      	ldr	r2, [r7, #28]
 8008874:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	db04      	blt.n	8008888 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	f1c3 0207 	rsb	r2, r3, #7
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	6959      	ldr	r1, [r3, #20]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4613      	mov	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008898:	4413      	add	r3, r2
 800889a:	4299      	cmp	r1, r3
 800889c:	d134      	bne.n	8008908 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe f89c 	bl	80069e0 <uxListRemove>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d115      	bne.n	80088da <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b2:	4918      	ldr	r1, [pc, #96]	; (8008914 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10a      	bne.n	80088da <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	2201      	movs	r2, #1
 80088ca:	fa02 f303 	lsl.w	r3, r2, r3
 80088ce:	43da      	mvns	r2, r3
 80088d0:	4b11      	ldr	r3, [pc, #68]	; (8008918 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4013      	ands	r3, r2
 80088d6:	4a10      	ldr	r2, [pc, #64]	; (8008918 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80088d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	2201      	movs	r2, #1
 80088e0:	409a      	lsls	r2, r3
 80088e2:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	4a0b      	ldr	r2, [pc, #44]	; (8008918 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4a06      	ldr	r2, [pc, #24]	; (8008914 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80088fa:	441a      	add	r2, r3
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	3304      	adds	r3, #4
 8008900:	4619      	mov	r1, r3
 8008902:	4610      	mov	r0, r2
 8008904:	f7fe f80f 	bl	8006926 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008908:	bf00      	nop
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	20005574 	.word	0x20005574
 8008914:	20005578 	.word	0x20005578
 8008918:	2000567c 	.word	0x2000567c

0800891c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008920:	4b07      	ldr	r3, [pc, #28]	; (8008940 <pvTaskIncrementMutexHeldCount+0x24>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d004      	beq.n	8008932 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <pvTaskIncrementMutexHeldCount+0x24>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800892e:	3201      	adds	r2, #1
 8008930:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008932:	4b03      	ldr	r3, [pc, #12]	; (8008940 <pvTaskIncrementMutexHeldCount+0x24>)
 8008934:	681b      	ldr	r3, [r3, #0]
	}
 8008936:	4618      	mov	r0, r3
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	20005574 	.word	0x20005574

08008944 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800894e:	4b29      	ldr	r3, [pc, #164]	; (80089f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008954:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3304      	adds	r3, #4
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe f840 	bl	80069e0 <uxListRemove>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008966:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	2201      	movs	r2, #1
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	43da      	mvns	r2, r3
 8008974:	4b21      	ldr	r3, [pc, #132]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4013      	ands	r3, r2
 800897a:	4a20      	ldr	r2, [pc, #128]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800897c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008984:	d10a      	bne.n	800899c <prvAddCurrentTaskToDelayedList+0x58>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d007      	beq.n	800899c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800898c:	4b1a      	ldr	r3, [pc, #104]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3304      	adds	r3, #4
 8008992:	4619      	mov	r1, r3
 8008994:	481a      	ldr	r0, [pc, #104]	; (8008a00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008996:	f7fd ffc6 	bl	8006926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800899a:	e026      	b.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4413      	add	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089a4:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d209      	bcs.n	80089c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089b4:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4b0f      	ldr	r3, [pc, #60]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f7fd ffd4 	bl	800696e <vListInsert>
}
 80089c6:	e010      	b.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fd ffca 	bl	800696e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089da:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d202      	bcs.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089e4:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6013      	str	r3, [r2, #0]
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20005678 	.word	0x20005678
 80089f8:	20005574 	.word	0x20005574
 80089fc:	2000567c 	.word	0x2000567c
 8008a00:	20005660 	.word	0x20005660
 8008a04:	20005630 	.word	0x20005630
 8008a08:	2000562c 	.word	0x2000562c
 8008a0c:	20005694 	.word	0x20005694

08008a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	3b04      	subs	r3, #4
 8008a20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3b04      	subs	r3, #4
 8008a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f023 0201 	bic.w	r2, r3, #1
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3b04      	subs	r3, #4
 8008a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a40:	4a0c      	ldr	r2, [pc, #48]	; (8008a74 <pxPortInitialiseStack+0x64>)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3b14      	subs	r3, #20
 8008a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3b04      	subs	r3, #4
 8008a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f06f 0202 	mvn.w	r2, #2
 8008a5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3b20      	subs	r3, #32
 8008a64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a66:	68fb      	ldr	r3, [r7, #12]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	08008a79 	.word	0x08008a79

08008a78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <prvTaskExitError+0x5c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8a:	d00c      	beq.n	8008aa6 <prvTaskExitError+0x2e>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	b672      	cpsid	i
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	b662      	cpsie	i
 8008aa0:	60fb      	str	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <prvTaskExitError+0x2c>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	b672      	cpsid	i
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	b662      	cpsie	i
 8008aba:	60bb      	str	r3, [r7, #8]
}
 8008abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008abe:	bf00      	nop
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0fc      	beq.n	8008ac0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	20000020 	.word	0x20000020
	...

08008ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <pxCurrentTCBConst2>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	6808      	ldr	r0, [r1, #0]
 8008ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	f380 8809 	msr	PSP, r0
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8811 	msr	BASEPRI, r0
 8008afa:	4770      	bx	lr
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst2>:
 8008b00:	20005574 	.word	0x20005574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <prvPortStartFirstTask+0x24>)
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f380 8808 	msr	MSP, r0
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f380 8814 	msr	CONTROL, r0
 8008b1a:	b662      	cpsie	i
 8008b1c:	b661      	cpsie	f
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	df00      	svc	0
 8008b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b2a:	bf00      	nop
 8008b2c:	e000ed08 	.word	0xe000ed08

08008b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b36:	4b37      	ldr	r3, [pc, #220]	; (8008c14 <xPortStartScheduler+0xe4>)
 8008b38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	22ff      	movs	r2, #255	; 0xff
 8008b46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	4b2f      	ldr	r3, [pc, #188]	; (8008c18 <xPortStartScheduler+0xe8>)
 8008b5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b5e:	4b2f      	ldr	r3, [pc, #188]	; (8008c1c <xPortStartScheduler+0xec>)
 8008b60:	2207      	movs	r2, #7
 8008b62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b64:	e009      	b.n	8008b7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008b66:	4b2d      	ldr	r3, [pc, #180]	; (8008c1c <xPortStartScheduler+0xec>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	4a2b      	ldr	r2, [pc, #172]	; (8008c1c <xPortStartScheduler+0xec>)
 8008b6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b82:	2b80      	cmp	r3, #128	; 0x80
 8008b84:	d0ef      	beq.n	8008b66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b86:	4b25      	ldr	r3, [pc, #148]	; (8008c1c <xPortStartScheduler+0xec>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f1c3 0307 	rsb	r3, r3, #7
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d00c      	beq.n	8008bac <xPortStartScheduler+0x7c>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	b672      	cpsid	i
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	b662      	cpsie	i
 8008ba6:	60bb      	str	r3, [r7, #8]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <xPortStartScheduler+0xec>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	021b      	lsls	r3, r3, #8
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	; (8008c1c <xPortStartScheduler+0xec>)
 8008bb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <xPortStartScheduler+0xec>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bbe:	4a17      	ldr	r2, [pc, #92]	; (8008c1c <xPortStartScheduler+0xec>)
 8008bc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bca:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <xPortStartScheduler+0xf0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a14      	ldr	r2, [pc, #80]	; (8008c20 <xPortStartScheduler+0xf0>)
 8008bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bd6:	4b12      	ldr	r3, [pc, #72]	; (8008c20 <xPortStartScheduler+0xf0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a11      	ldr	r2, [pc, #68]	; (8008c20 <xPortStartScheduler+0xf0>)
 8008bdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008be0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008be2:	f000 f8dd 	bl	8008da0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008be6:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <xPortStartScheduler+0xf4>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bec:	f000 f8fc 	bl	8008de8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bf0:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <xPortStartScheduler+0xf8>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a0c      	ldr	r2, [pc, #48]	; (8008c28 <xPortStartScheduler+0xf8>)
 8008bf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008bfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bfc:	f7ff ff84 	bl	8008b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c00:	f7ff fa74 	bl	80080ec <vTaskSwitchContext>
	prvTaskExitError();
 8008c04:	f7ff ff38 	bl	8008a78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	e000e400 	.word	0xe000e400
 8008c18:	200056a0 	.word	0x200056a0
 8008c1c:	200056a4 	.word	0x200056a4
 8008c20:	e000ed20 	.word	0xe000ed20
 8008c24:	20000020 	.word	0x20000020
 8008c28:	e000ef34 	.word	0xe000ef34

08008c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	b672      	cpsid	i
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	b662      	cpsie	i
 8008c46:	607b      	str	r3, [r7, #4]
}
 8008c48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c4a:	4b10      	ldr	r3, [pc, #64]	; (8008c8c <vPortEnterCritical+0x60>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	4a0e      	ldr	r2, [pc, #56]	; (8008c8c <vPortEnterCritical+0x60>)
 8008c52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c54:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <vPortEnterCritical+0x60>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d111      	bne.n	8008c80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c5c:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <vPortEnterCritical+0x64>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00c      	beq.n	8008c80 <vPortEnterCritical+0x54>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	b672      	cpsid	i
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	b662      	cpsie	i
 8008c7a:	603b      	str	r3, [r7, #0]
}
 8008c7c:	bf00      	nop
 8008c7e:	e7fe      	b.n	8008c7e <vPortEnterCritical+0x52>
	}
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	20000020 	.word	0x20000020
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c9a:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <vPortExitCritical+0x54>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10c      	bne.n	8008cbc <vPortExitCritical+0x28>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	b672      	cpsid	i
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	b662      	cpsie	i
 8008cb6:	607b      	str	r3, [r7, #4]
}
 8008cb8:	bf00      	nop
 8008cba:	e7fe      	b.n	8008cba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	; (8008ce8 <vPortExitCritical+0x54>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	4a09      	ldr	r2, [pc, #36]	; (8008ce8 <vPortExitCritical+0x54>)
 8008cc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cc6:	4b08      	ldr	r3, [pc, #32]	; (8008ce8 <vPortExitCritical+0x54>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d105      	bne.n	8008cda <vPortExitCritical+0x46>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	f383 8811 	msr	BASEPRI, r3
}
 8008cd8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cda:	bf00      	nop
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	20000020 	.word	0x20000020
 8008cec:	00000000 	.word	0x00000000

08008cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cf0:	f3ef 8009 	mrs	r0, PSP
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <pxCurrentTCBConst>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	f01e 0f10 	tst.w	lr, #16
 8008d00:	bf08      	it	eq
 8008d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0a:	6010      	str	r0, [r2, #0]
 8008d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d14:	b672      	cpsid	i
 8008d16:	f380 8811 	msr	BASEPRI, r0
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	b662      	cpsie	i
 8008d24:	f7ff f9e2 	bl	80080ec <vTaskSwitchContext>
 8008d28:	f04f 0000 	mov.w	r0, #0
 8008d2c:	f380 8811 	msr	BASEPRI, r0
 8008d30:	bc09      	pop	{r0, r3}
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	6808      	ldr	r0, [r1, #0]
 8008d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	f01e 0f10 	tst.w	lr, #16
 8008d3e:	bf08      	it	eq
 8008d40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d44:	f380 8809 	msr	PSP, r0
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop

08008d50 <pxCurrentTCBConst>:
 8008d50:	20005574 	.word	0x20005574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop

08008d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	b672      	cpsid	i
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	b662      	cpsie	i
 8008d72:	607b      	str	r3, [r7, #4]
}
 8008d74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d76:	f7ff f8ff 	bl	8007f78 <xTaskIncrementTick>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d80:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <SysTick_Handler+0x44>)
 8008d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	f383 8811 	msr	BASEPRI, r3
}
 8008d92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008da4:	4b0b      	ldr	r3, [pc, #44]	; (8008dd4 <vPortSetupTimerInterrupt+0x34>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008daa:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <vPortSetupTimerInterrupt+0x38>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008db0:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <vPortSetupTimerInterrupt+0x3c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <vPortSetupTimerInterrupt+0x40>)
 8008db6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dba:	099b      	lsrs	r3, r3, #6
 8008dbc:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <vPortSetupTimerInterrupt+0x44>)
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dc2:	4b04      	ldr	r3, [pc, #16]	; (8008dd4 <vPortSetupTimerInterrupt+0x34>)
 8008dc4:	2207      	movs	r2, #7
 8008dc6:	601a      	str	r2, [r3, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	e000e010 	.word	0xe000e010
 8008dd8:	e000e018 	.word	0xe000e018
 8008ddc:	20000000 	.word	0x20000000
 8008de0:	10624dd3 	.word	0x10624dd3
 8008de4:	e000e014 	.word	0xe000e014

08008de8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008de8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008df8 <vPortEnableVFP+0x10>
 8008dec:	6801      	ldr	r1, [r0, #0]
 8008dee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008df2:	6001      	str	r1, [r0, #0]
 8008df4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008df6:	bf00      	nop
 8008df8:	e000ed88 	.word	0xe000ed88

08008dfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e02:	f3ef 8305 	mrs	r3, IPSR
 8008e06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b0f      	cmp	r3, #15
 8008e0c:	d916      	bls.n	8008e3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e0e:	4a19      	ldr	r2, [pc, #100]	; (8008e74 <vPortValidateInterruptPriority+0x78>)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4413      	add	r3, r2
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e18:	4b17      	ldr	r3, [pc, #92]	; (8008e78 <vPortValidateInterruptPriority+0x7c>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	7afa      	ldrb	r2, [r7, #11]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d20c      	bcs.n	8008e3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	b672      	cpsid	i
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	b662      	cpsie	i
 8008e36:	607b      	str	r3, [r7, #4]
}
 8008e38:	bf00      	nop
 8008e3a:	e7fe      	b.n	8008e3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e3c:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <vPortValidateInterruptPriority+0x80>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <vPortValidateInterruptPriority+0x84>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d90c      	bls.n	8008e66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	b672      	cpsid	i
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	b662      	cpsie	i
 8008e60:	603b      	str	r3, [r7, #0]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <vPortValidateInterruptPriority+0x68>
	}
 8008e66:	bf00      	nop
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	e000e3f0 	.word	0xe000e3f0
 8008e78:	200056a0 	.word	0x200056a0
 8008e7c:	e000ed0c 	.word	0xe000ed0c
 8008e80:	200056a4 	.word	0x200056a4

08008e84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08a      	sub	sp, #40	; 0x28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e90:	f7fe ffa4 	bl	8007ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e94:	4b5b      	ldr	r3, [pc, #364]	; (8009004 <pvPortMalloc+0x180>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e9c:	f000 f91a 	bl	80090d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ea0:	4b59      	ldr	r3, [pc, #356]	; (8009008 <pvPortMalloc+0x184>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f040 8092 	bne.w	8008fd2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01f      	beq.n	8008ef4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008eb4:	2208      	movs	r2, #8
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d016      	beq.n	8008ef4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f023 0307 	bic.w	r3, r3, #7
 8008ecc:	3308      	adds	r3, #8
 8008ece:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00c      	beq.n	8008ef4 <pvPortMalloc+0x70>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	b672      	cpsid	i
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	b662      	cpsie	i
 8008eee:	617b      	str	r3, [r7, #20]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d06b      	beq.n	8008fd2 <pvPortMalloc+0x14e>
 8008efa:	4b44      	ldr	r3, [pc, #272]	; (800900c <pvPortMalloc+0x188>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d866      	bhi.n	8008fd2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f04:	4b42      	ldr	r3, [pc, #264]	; (8009010 <pvPortMalloc+0x18c>)
 8008f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f08:	4b41      	ldr	r3, [pc, #260]	; (8009010 <pvPortMalloc+0x18c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f0e:	e004      	b.n	8008f1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d903      	bls.n	8008f2c <pvPortMalloc+0xa8>
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1f1      	bne.n	8008f10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f2c:	4b35      	ldr	r3, [pc, #212]	; (8009004 <pvPortMalloc+0x180>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d04d      	beq.n	8008fd2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	4413      	add	r3, r2
 8008f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	2308      	movs	r3, #8
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d921      	bls.n	8008f9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00c      	beq.n	8008f84 <pvPortMalloc+0x100>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	b672      	cpsid	i
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	b662      	cpsie	i
 8008f7e:	613b      	str	r3, [r7, #16]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f96:	69b8      	ldr	r0, [r7, #24]
 8008f98:	f000 f8fe 	bl	8009198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f9c:	4b1b      	ldr	r3, [pc, #108]	; (800900c <pvPortMalloc+0x188>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	4a19      	ldr	r2, [pc, #100]	; (800900c <pvPortMalloc+0x188>)
 8008fa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008faa:	4b18      	ldr	r3, [pc, #96]	; (800900c <pvPortMalloc+0x188>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4b19      	ldr	r3, [pc, #100]	; (8009014 <pvPortMalloc+0x190>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d203      	bcs.n	8008fbe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fb6:	4b15      	ldr	r3, [pc, #84]	; (800900c <pvPortMalloc+0x188>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a16      	ldr	r2, [pc, #88]	; (8009014 <pvPortMalloc+0x190>)
 8008fbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	4b11      	ldr	r3, [pc, #68]	; (8009008 <pvPortMalloc+0x184>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fd2:	f7fe ff11 	bl	8007df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00c      	beq.n	8008ffa <pvPortMalloc+0x176>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	b672      	cpsid	i
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	b662      	cpsie	i
 8008ff4:	60fb      	str	r3, [r7, #12]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <pvPortMalloc+0x174>
	return pvReturn;
 8008ffa:	69fb      	ldr	r3, [r7, #28]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3728      	adds	r7, #40	; 0x28
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	2002aeb0 	.word	0x2002aeb0
 8009008:	2002aebc 	.word	0x2002aebc
 800900c:	2002aeb4 	.word	0x2002aeb4
 8009010:	2002aea8 	.word	0x2002aea8
 8009014:	2002aeb8 	.word	0x2002aeb8

08009018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d04c      	beq.n	80090c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800902a:	2308      	movs	r3, #8
 800902c:	425b      	negs	r3, r3
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4413      	add	r3, r2
 8009032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b23      	ldr	r3, [pc, #140]	; (80090cc <vPortFree+0xb4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4013      	ands	r3, r2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10c      	bne.n	8009060 <vPortFree+0x48>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	b672      	cpsid	i
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	b662      	cpsie	i
 800905a:	60fb      	str	r3, [r7, #12]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00c      	beq.n	8009082 <vPortFree+0x6a>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	b672      	cpsid	i
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	b662      	cpsie	i
 800907c:	60bb      	str	r3, [r7, #8]
}
 800907e:	bf00      	nop
 8009080:	e7fe      	b.n	8009080 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	4b11      	ldr	r3, [pc, #68]	; (80090cc <vPortFree+0xb4>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4013      	ands	r3, r2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d019      	beq.n	80090c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d115      	bne.n	80090c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <vPortFree+0xb4>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	43db      	mvns	r3, r3
 80090a2:	401a      	ands	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090a8:	f7fe fe98 	bl	8007ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <vPortFree+0xb8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4413      	add	r3, r2
 80090b6:	4a06      	ldr	r2, [pc, #24]	; (80090d0 <vPortFree+0xb8>)
 80090b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090ba:	6938      	ldr	r0, [r7, #16]
 80090bc:	f000 f86c 	bl	8009198 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80090c0:	f7fe fe9a 	bl	8007df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090c4:	bf00      	nop
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	2002aebc 	.word	0x2002aebc
 80090d0:	2002aeb4 	.word	0x2002aeb4

080090d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090da:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 80090de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090e0:	4b27      	ldr	r3, [pc, #156]	; (8009180 <prvHeapInit+0xac>)
 80090e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00c      	beq.n	8009108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3307      	adds	r3, #7
 80090f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0307 	bic.w	r3, r3, #7
 80090fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	4a1f      	ldr	r2, [pc, #124]	; (8009180 <prvHeapInit+0xac>)
 8009104:	4413      	add	r3, r2
 8009106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800910c:	4a1d      	ldr	r2, [pc, #116]	; (8009184 <prvHeapInit+0xb0>)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009112:	4b1c      	ldr	r3, [pc, #112]	; (8009184 <prvHeapInit+0xb0>)
 8009114:	2200      	movs	r2, #0
 8009116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	4413      	add	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009120:	2208      	movs	r2, #8
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	1a9b      	subs	r3, r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 0307 	bic.w	r3, r3, #7
 800912e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4a15      	ldr	r2, [pc, #84]	; (8009188 <prvHeapInit+0xb4>)
 8009134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <prvHeapInit+0xb4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2200      	movs	r2, #0
 800913c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800913e:	4b12      	ldr	r3, [pc, #72]	; (8009188 <prvHeapInit+0xb4>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	1ad2      	subs	r2, r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009154:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <prvHeapInit+0xb4>)
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	4a0a      	ldr	r2, [pc, #40]	; (800918c <prvHeapInit+0xb8>)
 8009162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	4a09      	ldr	r2, [pc, #36]	; (8009190 <prvHeapInit+0xbc>)
 800916a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800916c:	4b09      	ldr	r3, [pc, #36]	; (8009194 <prvHeapInit+0xc0>)
 800916e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009172:	601a      	str	r2, [r3, #0]
}
 8009174:	bf00      	nop
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	200056a8 	.word	0x200056a8
 8009184:	2002aea8 	.word	0x2002aea8
 8009188:	2002aeb0 	.word	0x2002aeb0
 800918c:	2002aeb8 	.word	0x2002aeb8
 8009190:	2002aeb4 	.word	0x2002aeb4
 8009194:	2002aebc 	.word	0x2002aebc

08009198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091a0:	4b28      	ldr	r3, [pc, #160]	; (8009244 <prvInsertBlockIntoFreeList+0xac>)
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e002      	b.n	80091ac <prvInsertBlockIntoFreeList+0x14>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d8f7      	bhi.n	80091a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	4413      	add	r3, r2
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d108      	bne.n	80091da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	441a      	add	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	441a      	add	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d118      	bne.n	8009220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4b15      	ldr	r3, [pc, #84]	; (8009248 <prvInsertBlockIntoFreeList+0xb0>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d00d      	beq.n	8009216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	441a      	add	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	e008      	b.n	8009228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009216:	4b0c      	ldr	r3, [pc, #48]	; (8009248 <prvInsertBlockIntoFreeList+0xb0>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	e003      	b.n	8009228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	429a      	cmp	r2, r3
 800922e:	d002      	beq.n	8009236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009236:	bf00      	nop
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	2002aea8 	.word	0x2002aea8
 8009248:	2002aeb0 	.word	0x2002aeb0

0800924c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009256:	f007 ff71 	bl	801113c <sys_timeouts_sleeptime>
 800925a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009262:	d10b      	bne.n	800927c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009264:	4813      	ldr	r0, [pc, #76]	; (80092b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009266:	f00a ffe2 	bl	801422e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800926a:	2200      	movs	r2, #0
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f00a ff54 	bl	801411c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009274:	480f      	ldr	r0, [pc, #60]	; (80092b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009276:	f00a ffcb 	bl	8014210 <sys_mutex_lock>
    return;
 800927a:	e018      	b.n	80092ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009282:	f007 ff21 	bl	80110c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009286:	e7e6      	b.n	8009256 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009288:	480a      	ldr	r0, [pc, #40]	; (80092b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800928a:	f00a ffd0 	bl	801422e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f00a ff42 	bl	801411c <sys_arch_mbox_fetch>
 8009298:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800929a:	4806      	ldr	r0, [pc, #24]	; (80092b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800929c:	f00a ffb8 	bl	8014210 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a6:	d102      	bne.n	80092ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80092a8:	f007 ff0e 	bl	80110c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80092ac:	e7d3      	b.n	8009256 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	2002aecc 	.word	0x2002aecc

080092b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80092c0:	4810      	ldr	r0, [pc, #64]	; (8009304 <tcpip_thread+0x4c>)
 80092c2:	f00a ffa5 	bl	8014210 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80092c6:	4b10      	ldr	r3, [pc, #64]	; (8009308 <tcpip_thread+0x50>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d005      	beq.n	80092da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80092ce:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <tcpip_thread+0x50>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a0e      	ldr	r2, [pc, #56]	; (800930c <tcpip_thread+0x54>)
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	4610      	mov	r0, r2
 80092d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80092da:	f107 030c 	add.w	r3, r7, #12
 80092de:	4619      	mov	r1, r3
 80092e0:	480b      	ldr	r0, [pc, #44]	; (8009310 <tcpip_thread+0x58>)
 80092e2:	f7ff ffb3 	bl	800924c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d106      	bne.n	80092fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80092ec:	4b09      	ldr	r3, [pc, #36]	; (8009314 <tcpip_thread+0x5c>)
 80092ee:	2291      	movs	r2, #145	; 0x91
 80092f0:	4909      	ldr	r1, [pc, #36]	; (8009318 <tcpip_thread+0x60>)
 80092f2:	480a      	ldr	r0, [pc, #40]	; (800931c <tcpip_thread+0x64>)
 80092f4:	f00c fb1a 	bl	801592c <iprintf>
      continue;
 80092f8:	e003      	b.n	8009302 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f80f 	bl	8009320 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009302:	e7ea      	b.n	80092da <tcpip_thread+0x22>
 8009304:	2002aecc 	.word	0x2002aecc
 8009308:	2002aec0 	.word	0x2002aec0
 800930c:	2002aec4 	.word	0x2002aec4
 8009310:	2002aec8 	.word	0x2002aec8
 8009314:	08016c2c 	.word	0x08016c2c
 8009318:	08016c5c 	.word	0x08016c5c
 800931c:	08016c7c 	.word	0x08016c7c

08009320 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b02      	cmp	r3, #2
 800932e:	d026      	beq.n	800937e <tcpip_thread_handle_msg+0x5e>
 8009330:	2b02      	cmp	r3, #2
 8009332:	dc2b      	bgt.n	800938c <tcpip_thread_handle_msg+0x6c>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <tcpip_thread_handle_msg+0x1e>
 8009338:	2b01      	cmp	r3, #1
 800933a:	d015      	beq.n	8009368 <tcpip_thread_handle_msg+0x48>
 800933c:	e026      	b.n	800938c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6850      	ldr	r0, [r2, #4]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6892      	ldr	r2, [r2, #8]
 800934a:	4611      	mov	r1, r2
 800934c:	4798      	blx	r3
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4618      	mov	r0, r3
 800935a:	f002 f87f 	bl	800b45c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	2009      	movs	r0, #9
 8009362:	f001 f9d7 	bl	800a714 <memp_free>
      break;
 8009366:	e018      	b.n	800939a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6892      	ldr	r2, [r2, #8]
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	2008      	movs	r0, #8
 8009378:	f001 f9cc 	bl	800a714 <memp_free>
      break;
 800937c:	e00d      	b.n	800939a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6892      	ldr	r2, [r2, #8]
 8009386:	4610      	mov	r0, r2
 8009388:	4798      	blx	r3
      break;
 800938a:	e006      	b.n	800939a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <tcpip_thread_handle_msg+0x84>)
 800938e:	22cf      	movs	r2, #207	; 0xcf
 8009390:	4905      	ldr	r1, [pc, #20]	; (80093a8 <tcpip_thread_handle_msg+0x88>)
 8009392:	4806      	ldr	r0, [pc, #24]	; (80093ac <tcpip_thread_handle_msg+0x8c>)
 8009394:	f00c faca 	bl	801592c <iprintf>
      break;
 8009398:	bf00      	nop
  }
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	08016c2c 	.word	0x08016c2c
 80093a8:	08016c5c 	.word	0x08016c5c
 80093ac:	08016c7c 	.word	0x08016c7c

080093b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80093bc:	481a      	ldr	r0, [pc, #104]	; (8009428 <tcpip_inpkt+0x78>)
 80093be:	f00a feec 	bl	801419a <sys_mbox_valid>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d105      	bne.n	80093d4 <tcpip_inpkt+0x24>
 80093c8:	4b18      	ldr	r3, [pc, #96]	; (800942c <tcpip_inpkt+0x7c>)
 80093ca:	22fc      	movs	r2, #252	; 0xfc
 80093cc:	4918      	ldr	r1, [pc, #96]	; (8009430 <tcpip_inpkt+0x80>)
 80093ce:	4819      	ldr	r0, [pc, #100]	; (8009434 <tcpip_inpkt+0x84>)
 80093d0:	f00c faac 	bl	801592c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80093d4:	2009      	movs	r0, #9
 80093d6:	f001 f927 	bl	800a628 <memp_malloc>
 80093da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80093e2:	f04f 33ff 	mov.w	r3, #4294967295
 80093e6:	e01a      	b.n	800941e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2200      	movs	r2, #0
 80093ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009400:	6979      	ldr	r1, [r7, #20]
 8009402:	4809      	ldr	r0, [pc, #36]	; (8009428 <tcpip_inpkt+0x78>)
 8009404:	f00a fe70 	bl	80140e8 <sys_mbox_trypost>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d006      	beq.n	800941c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800940e:	6979      	ldr	r1, [r7, #20]
 8009410:	2009      	movs	r0, #9
 8009412:	f001 f97f 	bl	800a714 <memp_free>
    return ERR_MEM;
 8009416:	f04f 33ff 	mov.w	r3, #4294967295
 800941a:	e000      	b.n	800941e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800941c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	2002aec8 	.word	0x2002aec8
 800942c:	08016c2c 	.word	0x08016c2c
 8009430:	08016ca4 	.word	0x08016ca4
 8009434:	08016c7c 	.word	0x08016c7c

08009438 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009448:	f003 0318 	and.w	r3, r3, #24
 800944c:	2b00      	cmp	r3, #0
 800944e:	d006      	beq.n	800945e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009450:	4a08      	ldr	r2, [pc, #32]	; (8009474 <tcpip_input+0x3c>)
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff ffab 	bl	80093b0 <tcpip_inpkt>
 800945a:	4603      	mov	r3, r0
 800945c:	e005      	b.n	800946a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800945e:	4a06      	ldr	r2, [pc, #24]	; (8009478 <tcpip_input+0x40>)
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff ffa4 	bl	80093b0 <tcpip_inpkt>
 8009468:	4603      	mov	r3, r0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	08013ef9 	.word	0x08013ef9
 8009478:	08012e01 	.word	0x08012e01

0800947c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009486:	4819      	ldr	r0, [pc, #100]	; (80094ec <tcpip_try_callback+0x70>)
 8009488:	f00a fe87 	bl	801419a <sys_mbox_valid>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d106      	bne.n	80094a0 <tcpip_try_callback+0x24>
 8009492:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <tcpip_try_callback+0x74>)
 8009494:	f240 125d 	movw	r2, #349	; 0x15d
 8009498:	4916      	ldr	r1, [pc, #88]	; (80094f4 <tcpip_try_callback+0x78>)
 800949a:	4817      	ldr	r0, [pc, #92]	; (80094f8 <tcpip_try_callback+0x7c>)
 800949c:	f00c fa46 	bl	801592c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80094a0:	2008      	movs	r0, #8
 80094a2:	f001 f8c1 	bl	800a628 <memp_malloc>
 80094a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d102      	bne.n	80094b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80094ae:	f04f 33ff 	mov.w	r3, #4294967295
 80094b2:	e017      	b.n	80094e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	4808      	ldr	r0, [pc, #32]	; (80094ec <tcpip_try_callback+0x70>)
 80094ca:	f00a fe0d 	bl	80140e8 <sys_mbox_trypost>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d006      	beq.n	80094e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80094d4:	68f9      	ldr	r1, [r7, #12]
 80094d6:	2008      	movs	r0, #8
 80094d8:	f001 f91c 	bl	800a714 <memp_free>
    return ERR_MEM;
 80094dc:	f04f 33ff 	mov.w	r3, #4294967295
 80094e0:	e000      	b.n	80094e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	2002aec8 	.word	0x2002aec8
 80094f0:	08016c2c 	.word	0x08016c2c
 80094f4:	08016ca4 	.word	0x08016ca4
 80094f8:	08016c7c 	.word	0x08016c7c

080094fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af02      	add	r7, sp, #8
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009506:	f000 fbe5 	bl	8009cd4 <lwip_init>

  tcpip_init_done = initfunc;
 800950a:	4a17      	ldr	r2, [pc, #92]	; (8009568 <tcpip_init+0x6c>)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009510:	4a16      	ldr	r2, [pc, #88]	; (800956c <tcpip_init+0x70>)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009516:	2106      	movs	r1, #6
 8009518:	4815      	ldr	r0, [pc, #84]	; (8009570 <tcpip_init+0x74>)
 800951a:	f00a fdc3 	bl	80140a4 <sys_mbox_new>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d006      	beq.n	8009532 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009524:	4b13      	ldr	r3, [pc, #76]	; (8009574 <tcpip_init+0x78>)
 8009526:	f240 2261 	movw	r2, #609	; 0x261
 800952a:	4913      	ldr	r1, [pc, #76]	; (8009578 <tcpip_init+0x7c>)
 800952c:	4813      	ldr	r0, [pc, #76]	; (800957c <tcpip_init+0x80>)
 800952e:	f00c f9fd 	bl	801592c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009532:	4813      	ldr	r0, [pc, #76]	; (8009580 <tcpip_init+0x84>)
 8009534:	f00a fe50 	bl	80141d8 <sys_mutex_new>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d006      	beq.n	800954c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <tcpip_init+0x78>)
 8009540:	f240 2265 	movw	r2, #613	; 0x265
 8009544:	490f      	ldr	r1, [pc, #60]	; (8009584 <tcpip_init+0x88>)
 8009546:	480d      	ldr	r0, [pc, #52]	; (800957c <tcpip_init+0x80>)
 8009548:	f00c f9f0 	bl	801592c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800954c:	2300      	movs	r3, #0
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009554:	2200      	movs	r2, #0
 8009556:	490c      	ldr	r1, [pc, #48]	; (8009588 <tcpip_init+0x8c>)
 8009558:	480c      	ldr	r0, [pc, #48]	; (800958c <tcpip_init+0x90>)
 800955a:	f00a fe75 	bl	8014248 <sys_thread_new>
}
 800955e:	bf00      	nop
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	2002aec0 	.word	0x2002aec0
 800956c:	2002aec4 	.word	0x2002aec4
 8009570:	2002aec8 	.word	0x2002aec8
 8009574:	08016c2c 	.word	0x08016c2c
 8009578:	08016cb4 	.word	0x08016cb4
 800957c:	08016c7c 	.word	0x08016c7c
 8009580:	2002aecc 	.word	0x2002aecc
 8009584:	08016cd8 	.word	0x08016cd8
 8009588:	080092b9 	.word	0x080092b9
 800958c:	08016cfc 	.word	0x08016cfc

08009590 <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
  tftp_state.port = 0;
 8009594:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <close_handle+0x50>)
 8009596:	2200      	movs	r2, #0
 8009598:	829a      	strh	r2, [r3, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 800959a:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <close_handle+0x50>)
 800959c:	2200      	movs	r2, #0
 800959e:	611a      	str	r2, [r3, #16]

  if (tftp_state.last_data != NULL) {
 80095a0:	4b0f      	ldr	r3, [pc, #60]	; (80095e0 <close_handle+0x50>)
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d007      	beq.n	80095b8 <close_handle+0x28>
    pbuf_free(tftp_state.last_data);
 80095a8:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <close_handle+0x50>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 ff55 	bl	800b45c <pbuf_free>
    tftp_state.last_data = NULL;
 80095b2:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <close_handle+0x50>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	609a      	str	r2, [r3, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 80095b8:	2100      	movs	r1, #0
 80095ba:	480a      	ldr	r0, [pc, #40]	; (80095e4 <close_handle+0x54>)
 80095bc:	f007 fd4a 	bl	8011054 <sys_untimeout>

  if (tftp_state.handle) {
 80095c0:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <close_handle+0x50>)
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d009      	beq.n	80095dc <close_handle+0x4c>
    tftp_state.ctx->close(tftp_state.handle);
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <close_handle+0x50>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	4a04      	ldr	r2, [pc, #16]	; (80095e0 <close_handle+0x50>)
 80095d0:	6852      	ldr	r2, [r2, #4]
 80095d2:	4610      	mov	r0, r2
 80095d4:	4798      	blx	r3
    tftp_state.handle = NULL;
 80095d6:	4b02      	ldr	r3, [pc, #8]	; (80095e0 <close_handle+0x50>)
 80095d8:	2200      	movs	r2, #0
 80095da:	605a      	str	r2, [r3, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 80095dc:	bf00      	nop
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	2002aed0 	.word	0x2002aed0
 80095e4:	08009b81 	.word	0x08009b81

080095e8 <send_error>:

static void
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
{
 80095e8:	b590      	push	{r4, r7, lr}
 80095ea:	b089      	sub	sp, #36	; 0x24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	607b      	str	r3, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	817b      	strh	r3, [r7, #10]
 80095f6:	4613      	mov	r3, r2
 80095f8:	727b      	strb	r3, [r7, #9]
  int str_length = strlen(str);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7f6 fe08 	bl	8000210 <strlen>
 8009600:	4603      	mov	r3, r0
 8009602:	61fb      	str	r3, [r7, #28]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + str_length + 1), PBUF_RAM);
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	b29b      	uxth	r3, r3
 8009608:	3305      	adds	r3, #5
 800960a:	b29b      	uxth	r3, r3
 800960c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009610:	4619      	mov	r1, r3
 8009612:	2036      	movs	r0, #54	; 0x36
 8009614:	f001 fc3e 	bl	800ae94 <pbuf_alloc>
 8009618:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d022      	beq.n	8009666 <send_error+0x7e>
    return;
  }

  payload = (u16_t *) p->payload;
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	617b      	str	r3, [r7, #20]
  payload[0] = PP_HTONS(TFTP_ERROR);
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800962c:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(code);
 800962e:	7a7b      	ldrb	r3, [r7, #9]
 8009630:	b29a      	uxth	r2, r3
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	1c9c      	adds	r4, r3, #2
 8009636:	4610      	mov	r0, r2
 8009638:	f000 fb1e 	bl	8009c78 <lwip_htons>
 800963c:	4603      	mov	r3, r0
 800963e:	8023      	strh	r3, [r4, #0]
  MEMCPY(&payload[2], str, str_length + 1);
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	1d18      	adds	r0, r3, #4
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	3301      	adds	r3, #1
 8009648:	461a      	mov	r2, r3
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	f00c f84c 	bl	80156e8 <memcpy>

  udp_sendto(tftp_state.upcb, p, addr, port);
 8009650:	4b07      	ldr	r3, [pc, #28]	; (8009670 <send_error+0x88>)
 8009652:	68d8      	ldr	r0, [r3, #12]
 8009654:	897b      	ldrh	r3, [r7, #10]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	69b9      	ldr	r1, [r7, #24]
 800965a:	f007 ff69 	bl	8011530 <udp_sendto>
  pbuf_free(p);
 800965e:	69b8      	ldr	r0, [r7, #24]
 8009660:	f001 fefc 	bl	800b45c <pbuf_free>
 8009664:	e000      	b.n	8009668 <send_error+0x80>
    return;
 8009666:	bf00      	nop
}
 8009668:	3724      	adds	r7, #36	; 0x24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd90      	pop	{r4, r7, pc}
 800966e:	bf00      	nop
 8009670:	2002aed0 	.word	0x2002aed0

08009674 <send_ack>:

static void
send_ack(u16_t blknum)
{
 8009674:	b590      	push	{r4, r7, lr}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH, PBUF_RAM);
 800967e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009682:	2104      	movs	r1, #4
 8009684:	2036      	movs	r0, #54	; 0x36
 8009686:	f001 fc05 	bl	800ae94 <pbuf_alloc>
 800968a:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d01a      	beq.n	80096c8 <send_ack+0x54>
    return;
  }
  payload = (u16_t *) p->payload;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	60bb      	str	r3, [r7, #8]

  payload[0] = PP_HTONS(TFTP_ACK);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800969e:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(blknum);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	1c9c      	adds	r4, r3, #2
 80096a4:	88fb      	ldrh	r3, [r7, #6]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 fae6 	bl	8009c78 <lwip_htons>
 80096ac:	4603      	mov	r3, r0
 80096ae:	8023      	strh	r3, [r4, #0]
  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 80096b0:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <send_ack+0x5c>)
 80096b2:	68d8      	ldr	r0, [r3, #12]
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <send_ack+0x5c>)
 80096b6:	8a9b      	ldrh	r3, [r3, #20]
 80096b8:	4a06      	ldr	r2, [pc, #24]	; (80096d4 <send_ack+0x60>)
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	f007 ff38 	bl	8011530 <udp_sendto>
  pbuf_free(p);
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f001 fecb 	bl	800b45c <pbuf_free>
 80096c6:	e000      	b.n	80096ca <send_ack+0x56>
    return;
 80096c8:	bf00      	nop
}
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd90      	pop	{r4, r7, pc}
 80096d0:	2002aed0 	.word	0x2002aed0
 80096d4:	2002aee0 	.word	0x2002aee0

080096d8 <resend_data>:

static void
resend_data(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 80096de:	4b15      	ldr	r3, [pc, #84]	; (8009734 <resend_data+0x5c>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	895b      	ldrh	r3, [r3, #10]
 80096e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80096e8:	4619      	mov	r1, r3
 80096ea:	2036      	movs	r0, #54	; 0x36
 80096ec:	f001 fbd2 	bl	800ae94 <pbuf_alloc>
 80096f0:	6078      	str	r0, [r7, #4]
  if (p == NULL) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d018      	beq.n	800972a <resend_data+0x52>
    return;
  }

  if (pbuf_copy(p, tftp_state.last_data) != ERR_OK) {
 80096f8:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <resend_data+0x5c>)
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 ffe0 	bl	800b6c4 <pbuf_copy>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <resend_data+0x3a>
    pbuf_free(p);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 fea6 	bl	800b45c <pbuf_free>
    return;
 8009710:	e00c      	b.n	800972c <resend_data+0x54>
  }

  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 8009712:	4b08      	ldr	r3, [pc, #32]	; (8009734 <resend_data+0x5c>)
 8009714:	68d8      	ldr	r0, [r3, #12]
 8009716:	4b07      	ldr	r3, [pc, #28]	; (8009734 <resend_data+0x5c>)
 8009718:	8a9b      	ldrh	r3, [r3, #20]
 800971a:	4a07      	ldr	r2, [pc, #28]	; (8009738 <resend_data+0x60>)
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	f007 ff07 	bl	8011530 <udp_sendto>
  pbuf_free(p);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f001 fe9a 	bl	800b45c <pbuf_free>
 8009728:	e000      	b.n	800972c <resend_data+0x54>
    return;
 800972a:	bf00      	nop
}
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	2002aed0 	.word	0x2002aed0
 8009738:	2002aee0 	.word	0x2002aee0

0800973c <send_data>:

static void
send_data(void)
{
 800973c:	b590      	push	{r4, r7, lr}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
  u16_t *payload;
  int ret;

  if (tftp_state.last_data != NULL) {
 8009742:	4b28      	ldr	r3, [pc, #160]	; (80097e4 <send_data+0xa8>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <send_data+0x18>
    pbuf_free(tftp_state.last_data);
 800974a:	4b26      	ldr	r3, [pc, #152]	; (80097e4 <send_data+0xa8>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	4618      	mov	r0, r3
 8009750:	f001 fe84 	bl	800b45c <pbuf_free>
  }

  tftp_state.last_data = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH + TFTP_MAX_PAYLOAD_SIZE, PBUF_RAM);
 8009754:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009758:	f44f 7101 	mov.w	r1, #516	; 0x204
 800975c:	2036      	movs	r0, #54	; 0x36
 800975e:	f001 fb99 	bl	800ae94 <pbuf_alloc>
 8009762:	4603      	mov	r3, r0
 8009764:	4a1f      	ldr	r2, [pc, #124]	; (80097e4 <send_data+0xa8>)
 8009766:	6093      	str	r3, [r2, #8]
  if (tftp_state.last_data == NULL) {
 8009768:	4b1e      	ldr	r3, [pc, #120]	; (80097e4 <send_data+0xa8>)
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d035      	beq.n	80097dc <send_data+0xa0>
    return;
  }

  payload = (u16_t *) tftp_state.last_data->payload;
 8009770:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <send_data+0xa8>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	607b      	str	r3, [r7, #4]
  payload[0] = PP_HTONS(TFTP_DATA);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800977e:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(tftp_state.blknum);
 8009780:	4b18      	ldr	r3, [pc, #96]	; (80097e4 <send_data+0xa8>)
 8009782:	8c1a      	ldrh	r2, [r3, #32]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	1c9c      	adds	r4, r3, #2
 8009788:	4610      	mov	r0, r2
 800978a:	f000 fa75 	bl	8009c78 <lwip_htons>
 800978e:	4603      	mov	r3, r0
 8009790:	8023      	strh	r3, [r4, #0]

  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 8009792:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <send_data+0xa8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4a12      	ldr	r2, [pc, #72]	; (80097e4 <send_data+0xa8>)
 800979a:	6850      	ldr	r0, [r2, #4]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	1d11      	adds	r1, r2, #4
 80097a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097a4:	4798      	blx	r3
 80097a6:	6038      	str	r0, [r7, #0]
  if (ret < 0) {
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	da09      	bge.n	80097c2 <send_data+0x86>
    send_error(&tftp_state.addr, tftp_state.port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 80097ae:	4b0d      	ldr	r3, [pc, #52]	; (80097e4 <send_data+0xa8>)
 80097b0:	8a99      	ldrh	r1, [r3, #20]
 80097b2:	4b0d      	ldr	r3, [pc, #52]	; (80097e8 <send_data+0xac>)
 80097b4:	2202      	movs	r2, #2
 80097b6:	480d      	ldr	r0, [pc, #52]	; (80097ec <send_data+0xb0>)
 80097b8:	f7ff ff16 	bl	80095e8 <send_error>
    close_handle();
 80097bc:	f7ff fee8 	bl	8009590 <close_handle>
    return;
 80097c0:	e00d      	b.n	80097de <send_data+0xa2>
  }

  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 80097c2:	4b08      	ldr	r3, [pc, #32]	; (80097e4 <send_data+0xa8>)
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3304      	adds	r3, #4
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f001 fcbd 	bl	800b150 <pbuf_realloc>
  resend_data();
 80097d6:	f7ff ff7f 	bl	80096d8 <resend_data>
 80097da:	e000      	b.n	80097de <send_data+0xa2>
    return;
 80097dc:	bf00      	nop
}
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd90      	pop	{r4, r7, pc}
 80097e4:	2002aed0 	.word	0x2002aed0
 80097e8:	08016d0c 	.word	0x08016d0c
 80097ec:	2002aee0 	.word	0x2002aee0

080097f0 <recv>:

static void
recv(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b092      	sub	sp, #72	; 0x48
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
 80097fc:	603b      	str	r3, [r7, #0]
  u16_t *sbuf = (u16_t *) p->payload;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	643b      	str	r3, [r7, #64]	; 0x40
  int opcode;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(upcb);

  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8009804:	4ba1      	ldr	r3, [pc, #644]	; (8009a8c <recv+0x29c>)
 8009806:	8a9b      	ldrh	r3, [r3, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <recv+0x28>
 800980c:	4b9f      	ldr	r3, [pc, #636]	; (8009a8c <recv+0x29c>)
 800980e:	8a9b      	ldrh	r3, [r3, #20]
 8009810:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009814:	429a      	cmp	r2, r3
 8009816:	d109      	bne.n	800982c <recv+0x3c>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8009818:	4b9c      	ldr	r3, [pc, #624]	; (8009a8c <recv+0x29c>)
 800981a:	691b      	ldr	r3, [r3, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 800981c:	2b00      	cmp	r3, #0
 800981e:	d010      	beq.n	8009842 <recv+0x52>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8009820:	4b9a      	ldr	r3, [pc, #616]	; (8009a8c <recv+0x29c>)
 8009822:	691a      	ldr	r2, [r3, #16]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d00a      	beq.n	8009842 <recv+0x52>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 800982c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8009830:	4b97      	ldr	r3, [pc, #604]	; (8009a90 <recv+0x2a0>)
 8009832:	2202      	movs	r2, #2
 8009834:	6838      	ldr	r0, [r7, #0]
 8009836:	f7ff fed7 	bl	80095e8 <send_error>
    pbuf_free(p);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 fe0e 	bl	800b45c <pbuf_free>
    return;
 8009840:	e190      	b.n	8009b64 <recv+0x374>
  }

  opcode = sbuf[0];
 8009842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c

  tftp_state.last_pkt = tftp_state.timer;
 8009848:	4b90      	ldr	r3, [pc, #576]	; (8009a8c <recv+0x29c>)
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	4a8f      	ldr	r2, [pc, #572]	; (8009a8c <recv+0x29c>)
 800984e:	61d3      	str	r3, [r2, #28]
  tftp_state.retries = 0;
 8009850:	4b8e      	ldr	r3, [pc, #568]	; (8009a8c <recv+0x29c>)
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  switch (opcode) {
 8009858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800985a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800985e:	f000 8129 	beq.w	8009ab4 <recv+0x2c4>
 8009862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009868:	f300 8171 	bgt.w	8009b4e <recv+0x35e>
 800986c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009872:	f000 80a3 	beq.w	80099bc <recv+0x1cc>
 8009876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800987c:	f300 8167 	bgt.w	8009b4e <recv+0x35e>
 8009880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009886:	d004      	beq.n	8009892 <recv+0xa2>
 8009888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988e:	f040 815e 	bne.w	8009b4e <recv+0x35e>
    case PP_HTONS(TFTP_RRQ): /* fall through */
    case PP_HTONS(TFTP_WRQ): {
      const char tftp_null = 0;
 8009892:	2300      	movs	r3, #0
 8009894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      char filename[TFTP_MAX_FILENAME_LEN + 1];
      char mode[TFTP_MAX_MODE_LEN + 1];
      u16_t filename_end_offset;
      u16_t mode_end_offset;

      if (tftp_state.handle != NULL) {
 8009898:	4b7c      	ldr	r3, [pc, #496]	; (8009a8c <recv+0x29c>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d007      	beq.n	80098b0 <recv+0xc0>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 80098a0:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80098a4:	4b7a      	ldr	r3, [pc, #488]	; (8009a90 <recv+0x2a0>)
 80098a6:	2202      	movs	r2, #2
 80098a8:	6838      	ldr	r0, [r7, #0]
 80098aa:	f7ff fe9d 	bl	80095e8 <send_error>
        break;
 80098ae:	e156      	b.n	8009b5e <recv+0x36e>
      }

      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 80098b0:	2200      	movs	r2, #0
 80098b2:	4978      	ldr	r1, [pc, #480]	; (8009a94 <recv+0x2a4>)
 80098b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098b8:	f007 fba6 	bl	8011008 <sys_timeout>

      /* find \0 in pbuf -> end of filename string */
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 80098bc:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80098c0:	2302      	movs	r3, #2
 80098c2:	2201      	movs	r2, #1
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f002 f92b 	bl	800bb20 <pbuf_memfind>
 80098ca:	4603      	mov	r3, r0
 80098cc:	867b      	strh	r3, [r7, #50]	; 0x32
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 80098ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	2b15      	cmp	r3, #21
 80098d6:	d907      	bls.n	80098e8 <recv+0xf8>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 80098d8:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80098dc:	4b6e      	ldr	r3, [pc, #440]	; (8009a98 <recv+0x2a8>)
 80098de:	2202      	movs	r2, #2
 80098e0:	6838      	ldr	r0, [r7, #0]
 80098e2:	f7ff fe81 	bl	80095e8 <send_error>
        break;
 80098e6:	e13a      	b.n	8009b5e <recv+0x36e>
      }
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 80098e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80098ea:	3b01      	subs	r3, #1
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	f107 0118 	add.w	r1, r7, #24
 80098f2:	2302      	movs	r3, #2
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 ffb7 	bl	800b868 <pbuf_copy_partial>

      /* find \0 in pbuf -> end of mode string */
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 80098fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80098fc:	3301      	adds	r3, #1
 80098fe:	b29b      	uxth	r3, r3
 8009900:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8009904:	2201      	movs	r2, #1
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f002 f90a 	bl	800bb20 <pbuf_memfind>
 800990c:	4603      	mov	r3, r0
 800990e:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 8009910:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009912:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	b29b      	uxth	r3, r3
 8009918:	2b08      	cmp	r3, #8
 800991a:	d907      	bls.n	800992c <recv+0x13c>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 800991c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8009920:	4b5e      	ldr	r3, [pc, #376]	; (8009a9c <recv+0x2ac>)
 8009922:	2202      	movs	r2, #2
 8009924:	6838      	ldr	r0, [r7, #0]
 8009926:	f7ff fe5f 	bl	80095e8 <send_error>
        break;
 800992a:	e118      	b.n	8009b5e <recv+0x36e>
      }
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 800992c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800992e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	b29a      	uxth	r2, r3
 8009934:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009936:	3301      	adds	r3, #1
 8009938:	b29b      	uxth	r3, r3
 800993a:	f107 0110 	add.w	r1, r7, #16
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 ff92 	bl	800b868 <pbuf_copy_partial>

      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 8009944:	4b51      	ldr	r3, [pc, #324]	; (8009a8c <recv+0x29c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800994c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009950:	bf0c      	ite	eq
 8009952:	2201      	moveq	r2, #1
 8009954:	2200      	movne	r2, #0
 8009956:	b2d2      	uxtb	r2, r2
 8009958:	f107 0110 	add.w	r1, r7, #16
 800995c:	f107 0018 	add.w	r0, r7, #24
 8009960:	4798      	blx	r3
 8009962:	4603      	mov	r3, r0
 8009964:	4a49      	ldr	r2, [pc, #292]	; (8009a8c <recv+0x29c>)
 8009966:	6053      	str	r3, [r2, #4]
      tftp_state.blknum = 1;
 8009968:	4b48      	ldr	r3, [pc, #288]	; (8009a8c <recv+0x29c>)
 800996a:	2201      	movs	r2, #1
 800996c:	841a      	strh	r2, [r3, #32]

      if (!tftp_state.handle) {
 800996e:	4b47      	ldr	r3, [pc, #284]	; (8009a8c <recv+0x29c>)
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d107      	bne.n	8009986 <recv+0x196>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 8009976:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800997a:	4b49      	ldr	r3, [pc, #292]	; (8009aa0 <recv+0x2b0>)
 800997c:	2201      	movs	r2, #1
 800997e:	6838      	ldr	r0, [r7, #0]
 8009980:	f7ff fe32 	bl	80095e8 <send_error>
        break;
 8009984:	e0eb      	b.n	8009b5e <recv+0x36e>

      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: %s request from ", (opcode == PP_HTONS(TFTP_WRQ)) ? "write" : "read"));
      ip_addr_debug_print(TFTP_DEBUG | LWIP_DBG_STATE, addr);
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, (" for '%s' mode '%s'\n", filename, mode));

      ip_addr_copy(tftp_state.addr, *addr);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a40      	ldr	r2, [pc, #256]	; (8009a8c <recv+0x29c>)
 800998c:	6113      	str	r3, [r2, #16]
      tftp_state.port = port;
 800998e:	4a3f      	ldr	r2, [pc, #252]	; (8009a8c <recv+0x29c>)
 8009990:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009994:	8293      	strh	r3, [r2, #20]

      if (opcode == PP_HTONS(TFTP_WRQ)) {
 8009996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800999c:	d107      	bne.n	80099ae <recv+0x1be>
        tftp_state.mode_write = 1;
 800999e:	4b3b      	ldr	r3, [pc, #236]	; (8009a8c <recv+0x29c>)
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_ack(0);
 80099a6:	2000      	movs	r0, #0
 80099a8:	f7ff fe64 	bl	8009674 <send_ack>
      } else {
        tftp_state.mode_write = 0;
        send_data();
      }

      break;
 80099ac:	e0d7      	b.n	8009b5e <recv+0x36e>
        tftp_state.mode_write = 0;
 80099ae:	4b37      	ldr	r3, [pc, #220]	; (8009a8c <recv+0x29c>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_data();
 80099b6:	f7ff fec1 	bl	800973c <send_data>
      break;
 80099ba:	e0d0      	b.n	8009b5e <recv+0x36e>

    case PP_HTONS(TFTP_DATA): {
      int ret;
      u16_t blknum;

      if (tftp_state.handle == NULL) {
 80099bc:	4b33      	ldr	r3, [pc, #204]	; (8009a8c <recv+0x29c>)
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d107      	bne.n	80099d4 <recv+0x1e4>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 80099c4:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80099c8:	4b36      	ldr	r3, [pc, #216]	; (8009aa4 <recv+0x2b4>)
 80099ca:	2202      	movs	r2, #2
 80099cc:	6838      	ldr	r0, [r7, #0]
 80099ce:	f7ff fe0b 	bl	80095e8 <send_error>
        break;
 80099d2:	e0c4      	b.n	8009b5e <recv+0x36e>
      }

      if (tftp_state.mode_write != 1) {
 80099d4:	4b2d      	ldr	r3, [pc, #180]	; (8009a8c <recv+0x29c>)
 80099d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d007      	beq.n	80099ee <recv+0x1fe>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 80099de:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80099e2:	4b31      	ldr	r3, [pc, #196]	; (8009aa8 <recv+0x2b8>)
 80099e4:	2202      	movs	r2, #2
 80099e6:	6838      	ldr	r0, [r7, #0]
 80099e8:	f7ff fdfe 	bl	80095e8 <send_error>
        break;
 80099ec:	e0b7      	b.n	8009b5e <recv+0x36e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 80099ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099f0:	3302      	adds	r3, #2
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f93f 	bl	8009c78 <lwip_htons>
 80099fa:	4603      	mov	r3, r0
 80099fc:	873b      	strh	r3, [r7, #56]	; 0x38
      if (blknum == tftp_state.blknum) {
 80099fe:	4b23      	ldr	r3, [pc, #140]	; (8009a8c <recv+0x29c>)
 8009a00:	8c1b      	ldrh	r3, [r3, #32]
 8009a02:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d12c      	bne.n	8009a62 <recv+0x272>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 8009a08:	2104      	movs	r1, #4
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 fca0 	bl	800b350 <pbuf_remove_header>

        ret = tftp_state.ctx->write(tftp_state.handle, p);
 8009a10:	4b1e      	ldr	r3, [pc, #120]	; (8009a8c <recv+0x29c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	4a1d      	ldr	r2, [pc, #116]	; (8009a8c <recv+0x29c>)
 8009a18:	6852      	ldr	r2, [r2, #4]
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	6378      	str	r0, [r7, #52]	; 0x34
        if (ret < 0) {
 8009a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	da09      	bge.n	8009a3c <recv+0x24c>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 8009a28:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8009a2c:	4b1f      	ldr	r3, [pc, #124]	; (8009aac <recv+0x2bc>)
 8009a2e:	2202      	movs	r2, #2
 8009a30:	6838      	ldr	r0, [r7, #0]
 8009a32:	f7ff fdd9 	bl	80095e8 <send_error>
          close_handle();
 8009a36:	f7ff fdab 	bl	8009590 <close_handle>
 8009a3a:	e003      	b.n	8009a44 <recv+0x254>
        } else {
          send_ack(blknum);
 8009a3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff fe18 	bl	8009674 <send_ack>
        }

        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	891b      	ldrh	r3, [r3, #8]
 8009a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a4c:	d202      	bcs.n	8009a54 <recv+0x264>
          close_handle();
 8009a4e:	f7ff fd9f 	bl	8009590 <close_handle>
        /* retransmit of previous block, ack again (casting to u16_t to care for overflow) */
        send_ack(blknum);
      } else {
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
      }
      break;
 8009a52:	e084      	b.n	8009b5e <recv+0x36e>
          tftp_state.blknum++;
 8009a54:	4b0d      	ldr	r3, [pc, #52]	; (8009a8c <recv+0x29c>)
 8009a56:	8c1b      	ldrh	r3, [r3, #32]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <recv+0x29c>)
 8009a5e:	841a      	strh	r2, [r3, #32]
      break;
 8009a60:	e07d      	b.n	8009b5e <recv+0x36e>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 8009a62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009a64:	3301      	adds	r3, #1
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	4b08      	ldr	r3, [pc, #32]	; (8009a8c <recv+0x29c>)
 8009a6a:	8c1b      	ldrh	r3, [r3, #32]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d104      	bne.n	8009a7a <recv+0x28a>
        send_ack(blknum);
 8009a70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff fdfe 	bl	8009674 <send_ack>
      break;
 8009a78:	e071      	b.n	8009b5e <recv+0x36e>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 8009a7a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <recv+0x2c0>)
 8009a80:	2205      	movs	r2, #5
 8009a82:	6838      	ldr	r0, [r7, #0]
 8009a84:	f7ff fdb0 	bl	80095e8 <send_error>
      break;
 8009a88:	e069      	b.n	8009b5e <recv+0x36e>
 8009a8a:	bf00      	nop
 8009a8c:	2002aed0 	.word	0x2002aed0
 8009a90:	08016d34 	.word	0x08016d34
 8009a94:	08009b81 	.word	0x08009b81
 8009a98:	08016d60 	.word	0x08016d60
 8009a9c:	08016d88 	.word	0x08016d88
 8009aa0:	08016dac 	.word	0x08016dac
 8009aa4:	08016dcc 	.word	0x08016dcc
 8009aa8:	08016ddc 	.word	0x08016ddc
 8009aac:	08016df4 	.word	0x08016df4
 8009ab0:	08016e08 	.word	0x08016e08

    case PP_HTONS(TFTP_ACK): {
      u16_t blknum;
      int lastpkt;

      if (tftp_state.handle == NULL) {
 8009ab4:	4b2d      	ldr	r3, [pc, #180]	; (8009b6c <recv+0x37c>)
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d107      	bne.n	8009acc <recv+0x2dc>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 8009abc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8009ac0:	4b2b      	ldr	r3, [pc, #172]	; (8009b70 <recv+0x380>)
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	6838      	ldr	r0, [r7, #0]
 8009ac6:	f7ff fd8f 	bl	80095e8 <send_error>
        break;
 8009aca:	e048      	b.n	8009b5e <recv+0x36e>
      }

      if (tftp_state.mode_write != 0) {
 8009acc:	4b27      	ldr	r3, [pc, #156]	; (8009b6c <recv+0x37c>)
 8009ace:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d007      	beq.n	8009ae6 <recv+0x2f6>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 8009ad6:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8009ada:	4b26      	ldr	r3, [pc, #152]	; (8009b74 <recv+0x384>)
 8009adc:	2202      	movs	r2, #2
 8009ade:	6838      	ldr	r0, [r7, #0]
 8009ae0:	f7ff fd82 	bl	80095e8 <send_error>
        break;
 8009ae4:	e03b      	b.n	8009b5e <recv+0x36e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 8009ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ae8:	3302      	adds	r3, #2
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 f8c3 	bl	8009c78 <lwip_htons>
 8009af2:	4603      	mov	r3, r0
 8009af4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (blknum != tftp_state.blknum) {
 8009af6:	4b1d      	ldr	r3, [pc, #116]	; (8009b6c <recv+0x37c>)
 8009af8:	8c1b      	ldrh	r3, [r3, #32]
 8009afa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d007      	beq.n	8009b10 <recv+0x320>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 8009b00:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8009b04:	4b1c      	ldr	r3, [pc, #112]	; (8009b78 <recv+0x388>)
 8009b06:	2205      	movs	r2, #5
 8009b08:	6838      	ldr	r0, [r7, #0]
 8009b0a:	f7ff fd6d 	bl	80095e8 <send_error>
        break;
 8009b0e:	e026      	b.n	8009b5e <recv+0x36e>
      }

      lastpkt = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	647b      	str	r3, [r7, #68]	; 0x44

      if (tftp_state.last_data != NULL) {
 8009b14:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <recv+0x37c>)
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d009      	beq.n	8009b30 <recv+0x340>
        lastpkt = tftp_state.last_data->tot_len != (TFTP_MAX_PAYLOAD_SIZE + TFTP_HEADER_LENGTH);
 8009b1c:	4b13      	ldr	r3, [pc, #76]	; (8009b6c <recv+0x37c>)
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	891b      	ldrh	r3, [r3, #8]
 8009b22:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8009b26:	bf14      	ite	ne
 8009b28:	2301      	movne	r3, #1
 8009b2a:	2300      	moveq	r3, #0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	647b      	str	r3, [r7, #68]	; 0x44
      }

      if (!lastpkt) {
 8009b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d108      	bne.n	8009b48 <recv+0x358>
        tftp_state.blknum++;
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <recv+0x37c>)
 8009b38:	8c1b      	ldrh	r3, [r3, #32]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <recv+0x37c>)
 8009b40:	841a      	strh	r2, [r3, #32]
        send_data();
 8009b42:	f7ff fdfb 	bl	800973c <send_data>
      } else {
        close_handle();
      }

      break;
 8009b46:	e00a      	b.n	8009b5e <recv+0x36e>
        close_handle();
 8009b48:	f7ff fd22 	bl	8009590 <close_handle>
      break;
 8009b4c:	e007      	b.n	8009b5e <recv+0x36e>
    }

    default:
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 8009b4e:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8009b52:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <recv+0x38c>)
 8009b54:	2204      	movs	r2, #4
 8009b56:	6838      	ldr	r0, [r7, #0]
 8009b58:	f7ff fd46 	bl	80095e8 <send_error>
      break;
 8009b5c:	bf00      	nop
  }

  pbuf_free(p);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 fc7c 	bl	800b45c <pbuf_free>
}
 8009b64:	3748      	adds	r7, #72	; 0x48
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	2002aed0 	.word	0x2002aed0
 8009b70:	08016dcc 	.word	0x08016dcc
 8009b74:	08016e1c 	.word	0x08016e1c
 8009b78:	08016e08 	.word	0x08016e08
 8009b7c:	08016e34 	.word	0x08016e34

08009b80 <tftp_tmr>:

static void
tftp_tmr(void *arg)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 8009b88:	4b18      	ldr	r3, [pc, #96]	; (8009bec <tftp_tmr+0x6c>)
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	4a17      	ldr	r2, [pc, #92]	; (8009bec <tftp_tmr+0x6c>)
 8009b90:	6193      	str	r3, [r2, #24]

  if (tftp_state.handle == NULL) {
 8009b92:	4b16      	ldr	r3, [pc, #88]	; (8009bec <tftp_tmr+0x6c>)
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d023      	beq.n	8009be2 <tftp_tmr+0x62>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4914      	ldr	r1, [pc, #80]	; (8009bf0 <tftp_tmr+0x70>)
 8009b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ba2:	f007 fa31 	bl	8011008 <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <tftp_tmr+0x6c>)
 8009ba8:	699a      	ldr	r2, [r3, #24]
 8009baa:	4b10      	ldr	r3, [pc, #64]	; (8009bec <tftp_tmr+0x6c>)
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	2b0a      	cmp	r3, #10
 8009bb2:	dd17      	ble.n	8009be4 <tftp_tmr+0x64>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 8009bb4:	4b0d      	ldr	r3, [pc, #52]	; (8009bec <tftp_tmr+0x6c>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00f      	beq.n	8009bdc <tftp_tmr+0x5c>
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <tftp_tmr+0x6c>)
 8009bbe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	d80a      	bhi.n	8009bdc <tftp_tmr+0x5c>
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout, retrying\n"));
      resend_data();
 8009bc6:	f7ff fd87 	bl	80096d8 <resend_data>
      tftp_state.retries++;
 8009bca:	4b08      	ldr	r3, [pc, #32]	; (8009bec <tftp_tmr+0x6c>)
 8009bcc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	4b05      	ldr	r3, [pc, #20]	; (8009bec <tftp_tmr+0x6c>)
 8009bd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8009bda:	e003      	b.n	8009be4 <tftp_tmr+0x64>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
 8009bdc:	f7ff fcd8 	bl	8009590 <close_handle>
 8009be0:	e000      	b.n	8009be4 <tftp_tmr+0x64>
    return;
 8009be2:	bf00      	nop
    }
  }
}
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	2002aed0 	.word	0x2002aed0
 8009bf0:	08009b81 	.word	0x08009b81

08009bf4 <tftp_init>:
/** @ingroup tftp
 * Initialize TFTP server.
 * @param ctx TFTP callback struct
 */
err_t tftp_init(const struct tftp_context *ctx)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8009bfc:	202e      	movs	r0, #46	; 0x2e
 8009bfe:	f007 ff4e 	bl	8011a9e <udp_new_ip_type>
 8009c02:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <tftp_init+0x1c>
    return ERR_MEM;
 8009c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0e:	e028      	b.n	8009c62 <tftp_init+0x6e>
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 8009c10:	2245      	movs	r2, #69	; 0x45
 8009c12:	4916      	ldr	r1, [pc, #88]	; (8009c6c <tftp_init+0x78>)
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f007 fe41 	bl	801189c <udp_bind>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	72fb      	strb	r3, [r7, #11]
  if (ret != ERR_OK) {
 8009c1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d005      	beq.n	8009c32 <tftp_init+0x3e>
    udp_remove(pcb);
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f007 fee0 	bl	80119ec <udp_remove>
    return ret;
 8009c2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009c30:	e017      	b.n	8009c62 <tftp_init+0x6e>
  }

  tftp_state.handle    = NULL;
 8009c32:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <tftp_init+0x7c>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]
  tftp_state.port      = 0;
 8009c38:	4b0d      	ldr	r3, [pc, #52]	; (8009c70 <tftp_init+0x7c>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	829a      	strh	r2, [r3, #20]
  tftp_state.ctx       = ctx;
 8009c3e:	4a0c      	ldr	r2, [pc, #48]	; (8009c70 <tftp_init+0x7c>)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6013      	str	r3, [r2, #0]
  tftp_state.timer     = 0;
 8009c44:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <tftp_init+0x7c>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	619a      	str	r2, [r3, #24]
  tftp_state.last_data = NULL;
 8009c4a:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <tftp_init+0x7c>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	609a      	str	r2, [r3, #8]
  tftp_state.upcb      = pcb;
 8009c50:	4a07      	ldr	r2, [pc, #28]	; (8009c70 <tftp_init+0x7c>)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	60d3      	str	r3, [r2, #12]

  udp_recv(pcb, recv, NULL);
 8009c56:	2200      	movs	r2, #0
 8009c58:	4906      	ldr	r1, [pc, #24]	; (8009c74 <tftp_init+0x80>)
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f007 fea6 	bl	80119ac <udp_recv>

  return ERR_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	08019cb8 	.word	0x08019cb8
 8009c70:	2002aed0 	.word	0x2002aed0
 8009c74:	080097f1 	.word	0x080097f1

08009c78 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	021b      	lsls	r3, r3, #8
 8009c86:	b21a      	sxth	r2, r3
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	0a1b      	lsrs	r3, r3, #8
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	b21b      	sxth	r3, r3
 8009c90:	4313      	orrs	r3, r2
 8009c92:	b21b      	sxth	r3, r3
 8009c94:	b29b      	uxth	r3, r3
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	370c      	adds	r7, #12
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b083      	sub	sp, #12
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	061a      	lsls	r2, r3, #24
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	021b      	lsls	r3, r3, #8
 8009cb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	0a1b      	lsrs	r3, r3, #8
 8009cbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	0e1b      	lsrs	r3, r3, #24
 8009cc6:	4313      	orrs	r3, r2
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009cde:	f00a fa6d 	bl	80141bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009ce2:	f000 f8d5 	bl	8009e90 <mem_init>
  memp_init();
 8009ce6:	f000 fc31 	bl	800a54c <memp_init>
  pbuf_init();
  netif_init();
 8009cea:	f000 fd3d 	bl	800a768 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009cee:	f007 fa5d 	bl	80111ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009cf2:	f001 ff4b 	bl	800bb8c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009cf6:	f007 f965 	bl	8010fc4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <ptr_to_mem+0x20>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	88fb      	ldrh	r3, [r7, #6]
 8009d14:	4413      	add	r3, r2
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	2002b560 	.word	0x2002b560

08009d28 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009d30:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <mem_to_ptr+0x20>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	b29b      	uxth	r3, r3
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	2002b560 	.word	0x2002b560

08009d4c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009d54:	4b45      	ldr	r3, [pc, #276]	; (8009e6c <plug_holes+0x120>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d206      	bcs.n	8009d6c <plug_holes+0x20>
 8009d5e:	4b44      	ldr	r3, [pc, #272]	; (8009e70 <plug_holes+0x124>)
 8009d60:	f240 12df 	movw	r2, #479	; 0x1df
 8009d64:	4943      	ldr	r1, [pc, #268]	; (8009e74 <plug_holes+0x128>)
 8009d66:	4844      	ldr	r0, [pc, #272]	; (8009e78 <plug_holes+0x12c>)
 8009d68:	f00b fde0 	bl	801592c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009d6c:	4b43      	ldr	r3, [pc, #268]	; (8009e7c <plug_holes+0x130>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d306      	bcc.n	8009d84 <plug_holes+0x38>
 8009d76:	4b3e      	ldr	r3, [pc, #248]	; (8009e70 <plug_holes+0x124>)
 8009d78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009d7c:	4940      	ldr	r1, [pc, #256]	; (8009e80 <plug_holes+0x134>)
 8009d7e:	483e      	ldr	r0, [pc, #248]	; (8009e78 <plug_holes+0x12c>)
 8009d80:	f00b fdd4 	bl	801592c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	791b      	ldrb	r3, [r3, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d006      	beq.n	8009d9a <plug_holes+0x4e>
 8009d8c:	4b38      	ldr	r3, [pc, #224]	; (8009e70 <plug_holes+0x124>)
 8009d8e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009d92:	493c      	ldr	r1, [pc, #240]	; (8009e84 <plug_holes+0x138>)
 8009d94:	4838      	ldr	r0, [pc, #224]	; (8009e78 <plug_holes+0x12c>)
 8009d96:	f00b fdc9 	bl	801592c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009da2:	d906      	bls.n	8009db2 <plug_holes+0x66>
 8009da4:	4b32      	ldr	r3, [pc, #200]	; (8009e70 <plug_holes+0x124>)
 8009da6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009daa:	4937      	ldr	r1, [pc, #220]	; (8009e88 <plug_holes+0x13c>)
 8009dac:	4832      	ldr	r0, [pc, #200]	; (8009e78 <plug_holes+0x12c>)
 8009dae:	f00b fdbd 	bl	801592c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff ffa4 	bl	8009d04 <ptr_to_mem>
 8009dbc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d024      	beq.n	8009e10 <plug_holes+0xc4>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	791b      	ldrb	r3, [r3, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d120      	bne.n	8009e10 <plug_holes+0xc4>
 8009dce:	4b2b      	ldr	r3, [pc, #172]	; (8009e7c <plug_holes+0x130>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d01b      	beq.n	8009e10 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009dd8:	4b2c      	ldr	r3, [pc, #176]	; (8009e8c <plug_holes+0x140>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d102      	bne.n	8009de8 <plug_holes+0x9c>
      lfree = mem;
 8009de2:	4a2a      	ldr	r2, [pc, #168]	; (8009e8c <plug_holes+0x140>)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	881a      	ldrh	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009df8:	d00a      	beq.n	8009e10 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff ff80 	bl	8009d04 <ptr_to_mem>
 8009e04:	4604      	mov	r4, r0
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7ff ff8e 	bl	8009d28 <mem_to_ptr>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	885b      	ldrh	r3, [r3, #2]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7ff ff75 	bl	8009d04 <ptr_to_mem>
 8009e1a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d01f      	beq.n	8009e64 <plug_holes+0x118>
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	791b      	ldrb	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d11b      	bne.n	8009e64 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009e2c:	4b17      	ldr	r3, [pc, #92]	; (8009e8c <plug_holes+0x140>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d102      	bne.n	8009e3c <plug_holes+0xf0>
      lfree = pmem;
 8009e36:	4a15      	ldr	r2, [pc, #84]	; (8009e8c <plug_holes+0x140>)
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	881a      	ldrh	r2, [r3, #0]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e4c:	d00a      	beq.n	8009e64 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7ff ff56 	bl	8009d04 <ptr_to_mem>
 8009e58:	4604      	mov	r4, r0
 8009e5a:	68b8      	ldr	r0, [r7, #8]
 8009e5c:	f7ff ff64 	bl	8009d28 <mem_to_ptr>
 8009e60:	4603      	mov	r3, r0
 8009e62:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009e64:	bf00      	nop
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd90      	pop	{r4, r7, pc}
 8009e6c:	2002b560 	.word	0x2002b560
 8009e70:	08016ed4 	.word	0x08016ed4
 8009e74:	08016f04 	.word	0x08016f04
 8009e78:	08016f1c 	.word	0x08016f1c
 8009e7c:	2002b564 	.word	0x2002b564
 8009e80:	08016f44 	.word	0x08016f44
 8009e84:	08016f60 	.word	0x08016f60
 8009e88:	08016f7c 	.word	0x08016f7c
 8009e8c:	2002b56c 	.word	0x2002b56c

08009e90 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009e96:	4b1f      	ldr	r3, [pc, #124]	; (8009f14 <mem_init+0x84>)
 8009e98:	3303      	adds	r3, #3
 8009e9a:	f023 0303 	bic.w	r3, r3, #3
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4b1d      	ldr	r3, [pc, #116]	; (8009f18 <mem_init+0x88>)
 8009ea2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009ea4:	4b1c      	ldr	r3, [pc, #112]	; (8009f18 <mem_init+0x88>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009eb0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009ebe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009ec2:	f7ff ff1f 	bl	8009d04 <ptr_to_mem>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4a14      	ldr	r2, [pc, #80]	; (8009f1c <mem_init+0x8c>)
 8009eca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009ecc:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <mem_init+0x8c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009ed4:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <mem_init+0x8c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009edc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <mem_init+0x8c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009ee6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009ee8:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <mem_init+0x88>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a0c      	ldr	r2, [pc, #48]	; (8009f20 <mem_init+0x90>)
 8009eee:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009ef0:	480c      	ldr	r0, [pc, #48]	; (8009f24 <mem_init+0x94>)
 8009ef2:	f00a f971 	bl	80141d8 <sys_mutex_new>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d006      	beq.n	8009f0a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009efc:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <mem_init+0x98>)
 8009efe:	f240 221f 	movw	r2, #543	; 0x21f
 8009f02:	490a      	ldr	r1, [pc, #40]	; (8009f2c <mem_init+0x9c>)
 8009f04:	480a      	ldr	r0, [pc, #40]	; (8009f30 <mem_init+0xa0>)
 8009f06:	f00b fd11 	bl	801592c <iprintf>
  }
}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	2002af0c 	.word	0x2002af0c
 8009f18:	2002b560 	.word	0x2002b560
 8009f1c:	2002b564 	.word	0x2002b564
 8009f20:	2002b56c 	.word	0x2002b56c
 8009f24:	2002b568 	.word	0x2002b568
 8009f28:	08016ed4 	.word	0x08016ed4
 8009f2c:	08016fa8 	.word	0x08016fa8
 8009f30:	08016f1c 	.word	0x08016f1c

08009f34 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff fef3 	bl	8009d28 <mem_to_ptr>
 8009f42:	4603      	mov	r3, r0
 8009f44:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff feda 	bl	8009d04 <ptr_to_mem>
 8009f50:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	885b      	ldrh	r3, [r3, #2]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7ff fed4 	bl	8009d04 <ptr_to_mem>
 8009f5c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f66:	d818      	bhi.n	8009f9a <mem_link_valid+0x66>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	885b      	ldrh	r3, [r3, #2]
 8009f6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f70:	d813      	bhi.n	8009f9a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009f76:	8afa      	ldrh	r2, [r7, #22]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d004      	beq.n	8009f86 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	8afa      	ldrh	r2, [r7, #22]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d109      	bne.n	8009f9a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009f86:	4b08      	ldr	r3, [pc, #32]	; (8009fa8 <mem_link_valid+0x74>)
 8009f88:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d006      	beq.n	8009f9e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	885b      	ldrh	r3, [r3, #2]
 8009f94:	8afa      	ldrh	r2, [r7, #22]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d001      	beq.n	8009f9e <mem_link_valid+0x6a>
    return 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e000      	b.n	8009fa0 <mem_link_valid+0x6c>
  }
  return 1;
 8009f9e:	2301      	movs	r3, #1
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	2002b564 	.word	0x2002b564

08009fac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d070      	beq.n	800a09c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f003 0303 	and.w	r3, r3, #3
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00d      	beq.n	8009fe0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009fc4:	4b37      	ldr	r3, [pc, #220]	; (800a0a4 <mem_free+0xf8>)
 8009fc6:	f240 2273 	movw	r2, #627	; 0x273
 8009fca:	4937      	ldr	r1, [pc, #220]	; (800a0a8 <mem_free+0xfc>)
 8009fcc:	4837      	ldr	r0, [pc, #220]	; (800a0ac <mem_free+0x100>)
 8009fce:	f00b fcad 	bl	801592c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009fd2:	f00a f95f 	bl	8014294 <sys_arch_protect>
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f00a f969 	bl	80142b0 <sys_arch_unprotect>
    return;
 8009fde:	e05e      	b.n	800a09e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3b08      	subs	r3, #8
 8009fe4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009fe6:	4b32      	ldr	r3, [pc, #200]	; (800a0b0 <mem_free+0x104>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	69fa      	ldr	r2, [r7, #28]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d306      	bcc.n	8009ffe <mem_free+0x52>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f103 020c 	add.w	r2, r3, #12
 8009ff6:	4b2f      	ldr	r3, [pc, #188]	; (800a0b4 <mem_free+0x108>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d90d      	bls.n	800a01a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009ffe:	4b29      	ldr	r3, [pc, #164]	; (800a0a4 <mem_free+0xf8>)
 800a000:	f240 227f 	movw	r2, #639	; 0x27f
 800a004:	492c      	ldr	r1, [pc, #176]	; (800a0b8 <mem_free+0x10c>)
 800a006:	4829      	ldr	r0, [pc, #164]	; (800a0ac <mem_free+0x100>)
 800a008:	f00b fc90 	bl	801592c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a00c:	f00a f942 	bl	8014294 <sys_arch_protect>
 800a010:	6138      	str	r0, [r7, #16]
 800a012:	6938      	ldr	r0, [r7, #16]
 800a014:	f00a f94c 	bl	80142b0 <sys_arch_unprotect>
    return;
 800a018:	e041      	b.n	800a09e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a01a:	4828      	ldr	r0, [pc, #160]	; (800a0bc <mem_free+0x110>)
 800a01c:	f00a f8f8 	bl	8014210 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	791b      	ldrb	r3, [r3, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d110      	bne.n	800a04a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a028:	4b1e      	ldr	r3, [pc, #120]	; (800a0a4 <mem_free+0xf8>)
 800a02a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a02e:	4924      	ldr	r1, [pc, #144]	; (800a0c0 <mem_free+0x114>)
 800a030:	481e      	ldr	r0, [pc, #120]	; (800a0ac <mem_free+0x100>)
 800a032:	f00b fc7b 	bl	801592c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a036:	4821      	ldr	r0, [pc, #132]	; (800a0bc <mem_free+0x110>)
 800a038:	f00a f8f9 	bl	801422e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a03c:	f00a f92a 	bl	8014294 <sys_arch_protect>
 800a040:	6178      	str	r0, [r7, #20]
 800a042:	6978      	ldr	r0, [r7, #20]
 800a044:	f00a f934 	bl	80142b0 <sys_arch_unprotect>
    return;
 800a048:	e029      	b.n	800a09e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a04a:	69f8      	ldr	r0, [r7, #28]
 800a04c:	f7ff ff72 	bl	8009f34 <mem_link_valid>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d110      	bne.n	800a078 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a056:	4b13      	ldr	r3, [pc, #76]	; (800a0a4 <mem_free+0xf8>)
 800a058:	f240 2295 	movw	r2, #661	; 0x295
 800a05c:	4919      	ldr	r1, [pc, #100]	; (800a0c4 <mem_free+0x118>)
 800a05e:	4813      	ldr	r0, [pc, #76]	; (800a0ac <mem_free+0x100>)
 800a060:	f00b fc64 	bl	801592c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a064:	4815      	ldr	r0, [pc, #84]	; (800a0bc <mem_free+0x110>)
 800a066:	f00a f8e2 	bl	801422e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a06a:	f00a f913 	bl	8014294 <sys_arch_protect>
 800a06e:	61b8      	str	r0, [r7, #24]
 800a070:	69b8      	ldr	r0, [r7, #24]
 800a072:	f00a f91d 	bl	80142b0 <sys_arch_unprotect>
    return;
 800a076:	e012      	b.n	800a09e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	2200      	movs	r2, #0
 800a07c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <mem_free+0x11c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	429a      	cmp	r2, r3
 800a086:	d202      	bcs.n	800a08e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a088:	4a0f      	ldr	r2, [pc, #60]	; (800a0c8 <mem_free+0x11c>)
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a08e:	69f8      	ldr	r0, [r7, #28]
 800a090:	f7ff fe5c 	bl	8009d4c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a094:	4809      	ldr	r0, [pc, #36]	; (800a0bc <mem_free+0x110>)
 800a096:	f00a f8ca 	bl	801422e <sys_mutex_unlock>
 800a09a:	e000      	b.n	800a09e <mem_free+0xf2>
    return;
 800a09c:	bf00      	nop
}
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	08016ed4 	.word	0x08016ed4
 800a0a8:	08016fc4 	.word	0x08016fc4
 800a0ac:	08016f1c 	.word	0x08016f1c
 800a0b0:	2002b560 	.word	0x2002b560
 800a0b4:	2002b564 	.word	0x2002b564
 800a0b8:	08016fe8 	.word	0x08016fe8
 800a0bc:	2002b568 	.word	0x2002b568
 800a0c0:	08017004 	.word	0x08017004
 800a0c4:	0801702c 	.word	0x0801702c
 800a0c8:	2002b56c 	.word	0x2002b56c

0800a0cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a0d8:	887b      	ldrh	r3, [r7, #2]
 800a0da:	3303      	adds	r3, #3
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	f023 0303 	bic.w	r3, r3, #3
 800a0e2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a0e4:	8bfb      	ldrh	r3, [r7, #30]
 800a0e6:	2b0b      	cmp	r3, #11
 800a0e8:	d801      	bhi.n	800a0ee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a0ea:	230c      	movs	r3, #12
 800a0ec:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a0ee:	8bfb      	ldrh	r3, [r7, #30]
 800a0f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0f4:	d803      	bhi.n	800a0fe <mem_trim+0x32>
 800a0f6:	8bfa      	ldrh	r2, [r7, #30]
 800a0f8:	887b      	ldrh	r3, [r7, #2]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d201      	bcs.n	800a102 <mem_trim+0x36>
    return NULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	e0d8      	b.n	800a2b4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a102:	4b6e      	ldr	r3, [pc, #440]	; (800a2bc <mem_trim+0x1f0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d304      	bcc.n	800a116 <mem_trim+0x4a>
 800a10c:	4b6c      	ldr	r3, [pc, #432]	; (800a2c0 <mem_trim+0x1f4>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	429a      	cmp	r2, r3
 800a114:	d306      	bcc.n	800a124 <mem_trim+0x58>
 800a116:	4b6b      	ldr	r3, [pc, #428]	; (800a2c4 <mem_trim+0x1f8>)
 800a118:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a11c:	496a      	ldr	r1, [pc, #424]	; (800a2c8 <mem_trim+0x1fc>)
 800a11e:	486b      	ldr	r0, [pc, #428]	; (800a2cc <mem_trim+0x200>)
 800a120:	f00b fc04 	bl	801592c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a124:	4b65      	ldr	r3, [pc, #404]	; (800a2bc <mem_trim+0x1f0>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d304      	bcc.n	800a138 <mem_trim+0x6c>
 800a12e:	4b64      	ldr	r3, [pc, #400]	; (800a2c0 <mem_trim+0x1f4>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	429a      	cmp	r2, r3
 800a136:	d307      	bcc.n	800a148 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a138:	f00a f8ac 	bl	8014294 <sys_arch_protect>
 800a13c:	60b8      	str	r0, [r7, #8]
 800a13e:	68b8      	ldr	r0, [r7, #8]
 800a140:	f00a f8b6 	bl	80142b0 <sys_arch_unprotect>
    return rmem;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	e0b5      	b.n	800a2b4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3b08      	subs	r3, #8
 800a14c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a14e:	69b8      	ldr	r0, [r7, #24]
 800a150:	f7ff fdea 	bl	8009d28 <mem_to_ptr>
 800a154:	4603      	mov	r3, r0
 800a156:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	881a      	ldrh	r2, [r3, #0]
 800a15c:	8afb      	ldrh	r3, [r7, #22]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	b29b      	uxth	r3, r3
 800a162:	3b08      	subs	r3, #8
 800a164:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a166:	8bfa      	ldrh	r2, [r7, #30]
 800a168:	8abb      	ldrh	r3, [r7, #20]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d906      	bls.n	800a17c <mem_trim+0xb0>
 800a16e:	4b55      	ldr	r3, [pc, #340]	; (800a2c4 <mem_trim+0x1f8>)
 800a170:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a174:	4956      	ldr	r1, [pc, #344]	; (800a2d0 <mem_trim+0x204>)
 800a176:	4855      	ldr	r0, [pc, #340]	; (800a2cc <mem_trim+0x200>)
 800a178:	f00b fbd8 	bl	801592c <iprintf>
  if (newsize > size) {
 800a17c:	8bfa      	ldrh	r2, [r7, #30]
 800a17e:	8abb      	ldrh	r3, [r7, #20]
 800a180:	429a      	cmp	r2, r3
 800a182:	d901      	bls.n	800a188 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a184:	2300      	movs	r3, #0
 800a186:	e095      	b.n	800a2b4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a188:	8bfa      	ldrh	r2, [r7, #30]
 800a18a:	8abb      	ldrh	r3, [r7, #20]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d101      	bne.n	800a194 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	e08f      	b.n	800a2b4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a194:	484f      	ldr	r0, [pc, #316]	; (800a2d4 <mem_trim+0x208>)
 800a196:	f00a f83b 	bl	8014210 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7ff fdb0 	bl	8009d04 <ptr_to_mem>
 800a1a4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	791b      	ldrb	r3, [r3, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d13f      	bne.n	800a22e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1b6:	d106      	bne.n	800a1c6 <mem_trim+0xfa>
 800a1b8:	4b42      	ldr	r3, [pc, #264]	; (800a2c4 <mem_trim+0x1f8>)
 800a1ba:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a1be:	4946      	ldr	r1, [pc, #280]	; (800a2d8 <mem_trim+0x20c>)
 800a1c0:	4842      	ldr	r0, [pc, #264]	; (800a2cc <mem_trim+0x200>)
 800a1c2:	f00b fbb3 	bl	801592c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a1cc:	8afa      	ldrh	r2, [r7, #22]
 800a1ce:	8bfb      	ldrh	r3, [r7, #30]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a1d8:	4b40      	ldr	r3, [pc, #256]	; (800a2dc <mem_trim+0x210>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d106      	bne.n	800a1f0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a1e2:	89fb      	ldrh	r3, [r7, #14]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7ff fd8d 	bl	8009d04 <ptr_to_mem>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4a3b      	ldr	r2, [pc, #236]	; (800a2dc <mem_trim+0x210>)
 800a1ee:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a1f0:	89fb      	ldrh	r3, [r7, #14]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff fd86 	bl	8009d04 <ptr_to_mem>
 800a1f8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	89ba      	ldrh	r2, [r7, #12]
 800a204:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	8afa      	ldrh	r2, [r7, #22]
 800a20a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	89fa      	ldrh	r2, [r7, #14]
 800a210:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a21a:	d047      	beq.n	800a2ac <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fd6f 	bl	8009d04 <ptr_to_mem>
 800a226:	4602      	mov	r2, r0
 800a228:	89fb      	ldrh	r3, [r7, #14]
 800a22a:	8053      	strh	r3, [r2, #2]
 800a22c:	e03e      	b.n	800a2ac <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a22e:	8bfb      	ldrh	r3, [r7, #30]
 800a230:	f103 0214 	add.w	r2, r3, #20
 800a234:	8abb      	ldrh	r3, [r7, #20]
 800a236:	429a      	cmp	r2, r3
 800a238:	d838      	bhi.n	800a2ac <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a23a:	8afa      	ldrh	r2, [r7, #22]
 800a23c:	8bfb      	ldrh	r3, [r7, #30]
 800a23e:	4413      	add	r3, r2
 800a240:	b29b      	uxth	r3, r3
 800a242:	3308      	adds	r3, #8
 800a244:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a24e:	d106      	bne.n	800a25e <mem_trim+0x192>
 800a250:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <mem_trim+0x1f8>)
 800a252:	f240 3216 	movw	r2, #790	; 0x316
 800a256:	4920      	ldr	r1, [pc, #128]	; (800a2d8 <mem_trim+0x20c>)
 800a258:	481c      	ldr	r0, [pc, #112]	; (800a2cc <mem_trim+0x200>)
 800a25a:	f00b fb67 	bl	801592c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a25e:	89fb      	ldrh	r3, [r7, #14]
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fd4f 	bl	8009d04 <ptr_to_mem>
 800a266:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a268:	4b1c      	ldr	r3, [pc, #112]	; (800a2dc <mem_trim+0x210>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d202      	bcs.n	800a278 <mem_trim+0x1ac>
      lfree = mem2;
 800a272:	4a1a      	ldr	r2, [pc, #104]	; (800a2dc <mem_trim+0x210>)
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2200      	movs	r2, #0
 800a27c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	881a      	ldrh	r2, [r3, #0]
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	8afa      	ldrh	r2, [r7, #22]
 800a28a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	89fa      	ldrh	r2, [r7, #14]
 800a290:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a29a:	d007      	beq.n	800a2ac <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff fd2f 	bl	8009d04 <ptr_to_mem>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	89fb      	ldrh	r3, [r7, #14]
 800a2aa:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a2ac:	4809      	ldr	r0, [pc, #36]	; (800a2d4 <mem_trim+0x208>)
 800a2ae:	f009 ffbe 	bl	801422e <sys_mutex_unlock>
  return rmem;
 800a2b2:	687b      	ldr	r3, [r7, #4]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3720      	adds	r7, #32
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	2002b560 	.word	0x2002b560
 800a2c0:	2002b564 	.word	0x2002b564
 800a2c4:	08016ed4 	.word	0x08016ed4
 800a2c8:	08017060 	.word	0x08017060
 800a2cc:	08016f1c 	.word	0x08016f1c
 800a2d0:	08017078 	.word	0x08017078
 800a2d4:	2002b568 	.word	0x2002b568
 800a2d8:	08017098 	.word	0x08017098
 800a2dc:	2002b56c 	.word	0x2002b56c

0800a2e0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <mem_malloc+0x14>
    return NULL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e0e2      	b.n	800a4ba <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a2f4:	88fb      	ldrh	r3, [r7, #6]
 800a2f6:	3303      	adds	r3, #3
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	f023 0303 	bic.w	r3, r3, #3
 800a2fe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a300:	8bbb      	ldrh	r3, [r7, #28]
 800a302:	2b0b      	cmp	r3, #11
 800a304:	d801      	bhi.n	800a30a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a306:	230c      	movs	r3, #12
 800a308:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a30a:	8bbb      	ldrh	r3, [r7, #28]
 800a30c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a310:	d803      	bhi.n	800a31a <mem_malloc+0x3a>
 800a312:	8bba      	ldrh	r2, [r7, #28]
 800a314:	88fb      	ldrh	r3, [r7, #6]
 800a316:	429a      	cmp	r2, r3
 800a318:	d201      	bcs.n	800a31e <mem_malloc+0x3e>
    return NULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	e0cd      	b.n	800a4ba <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a31e:	4869      	ldr	r0, [pc, #420]	; (800a4c4 <mem_malloc+0x1e4>)
 800a320:	f009 ff76 	bl	8014210 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a324:	4b68      	ldr	r3, [pc, #416]	; (800a4c8 <mem_malloc+0x1e8>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff fcfd 	bl	8009d28 <mem_to_ptr>
 800a32e:	4603      	mov	r3, r0
 800a330:	83fb      	strh	r3, [r7, #30]
 800a332:	e0b7      	b.n	800a4a4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a334:	8bfb      	ldrh	r3, [r7, #30]
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff fce4 	bl	8009d04 <ptr_to_mem>
 800a33c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	791b      	ldrb	r3, [r3, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 80a7 	bne.w	800a496 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	461a      	mov	r2, r3
 800a34e:	8bfb      	ldrh	r3, [r7, #30]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	f1a3 0208 	sub.w	r2, r3, #8
 800a356:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a358:	429a      	cmp	r2, r3
 800a35a:	f0c0 809c 	bcc.w	800a496 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	8bfb      	ldrh	r3, [r7, #30]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	f1a3 0208 	sub.w	r2, r3, #8
 800a36c:	8bbb      	ldrh	r3, [r7, #28]
 800a36e:	3314      	adds	r3, #20
 800a370:	429a      	cmp	r2, r3
 800a372:	d333      	bcc.n	800a3dc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a374:	8bfa      	ldrh	r2, [r7, #30]
 800a376:	8bbb      	ldrh	r3, [r7, #28]
 800a378:	4413      	add	r3, r2
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3308      	adds	r3, #8
 800a37e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a380:	8a7b      	ldrh	r3, [r7, #18]
 800a382:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a386:	d106      	bne.n	800a396 <mem_malloc+0xb6>
 800a388:	4b50      	ldr	r3, [pc, #320]	; (800a4cc <mem_malloc+0x1ec>)
 800a38a:	f240 3287 	movw	r2, #903	; 0x387
 800a38e:	4950      	ldr	r1, [pc, #320]	; (800a4d0 <mem_malloc+0x1f0>)
 800a390:	4850      	ldr	r0, [pc, #320]	; (800a4d4 <mem_malloc+0x1f4>)
 800a392:	f00b facb 	bl	801592c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a396:	8a7b      	ldrh	r3, [r7, #18]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff fcb3 	bl	8009d04 <ptr_to_mem>
 800a39e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	881a      	ldrh	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8bfa      	ldrh	r2, [r7, #30]
 800a3b2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	8a7a      	ldrh	r2, [r7, #18]
 800a3b8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3c8:	d00b      	beq.n	800a3e2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fc98 	bl	8009d04 <ptr_to_mem>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	8a7b      	ldrh	r3, [r7, #18]
 800a3d8:	8053      	strh	r3, [r2, #2]
 800a3da:	e002      	b.n	800a3e2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a3e2:	4b39      	ldr	r3, [pc, #228]	; (800a4c8 <mem_malloc+0x1e8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d127      	bne.n	800a43c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a3ec:	4b36      	ldr	r3, [pc, #216]	; (800a4c8 <mem_malloc+0x1e8>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a3f2:	e005      	b.n	800a400 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff fc83 	bl	8009d04 <ptr_to_mem>
 800a3fe:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	791b      	ldrb	r3, [r3, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d004      	beq.n	800a412 <mem_malloc+0x132>
 800a408:	4b33      	ldr	r3, [pc, #204]	; (800a4d8 <mem_malloc+0x1f8>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d1f0      	bne.n	800a3f4 <mem_malloc+0x114>
          }
          lfree = cur;
 800a412:	4a2d      	ldr	r2, [pc, #180]	; (800a4c8 <mem_malloc+0x1e8>)
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a418:	4b2b      	ldr	r3, [pc, #172]	; (800a4c8 <mem_malloc+0x1e8>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	4b2e      	ldr	r3, [pc, #184]	; (800a4d8 <mem_malloc+0x1f8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	429a      	cmp	r2, r3
 800a422:	d00b      	beq.n	800a43c <mem_malloc+0x15c>
 800a424:	4b28      	ldr	r3, [pc, #160]	; (800a4c8 <mem_malloc+0x1e8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	791b      	ldrb	r3, [r3, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d006      	beq.n	800a43c <mem_malloc+0x15c>
 800a42e:	4b27      	ldr	r3, [pc, #156]	; (800a4cc <mem_malloc+0x1ec>)
 800a430:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a434:	4929      	ldr	r1, [pc, #164]	; (800a4dc <mem_malloc+0x1fc>)
 800a436:	4827      	ldr	r0, [pc, #156]	; (800a4d4 <mem_malloc+0x1f4>)
 800a438:	f00b fa78 	bl	801592c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a43c:	4821      	ldr	r0, [pc, #132]	; (800a4c4 <mem_malloc+0x1e4>)
 800a43e:	f009 fef6 	bl	801422e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a442:	8bba      	ldrh	r2, [r7, #28]
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	4413      	add	r3, r2
 800a448:	3308      	adds	r3, #8
 800a44a:	4a23      	ldr	r2, [pc, #140]	; (800a4d8 <mem_malloc+0x1f8>)
 800a44c:	6812      	ldr	r2, [r2, #0]
 800a44e:	4293      	cmp	r3, r2
 800a450:	d906      	bls.n	800a460 <mem_malloc+0x180>
 800a452:	4b1e      	ldr	r3, [pc, #120]	; (800a4cc <mem_malloc+0x1ec>)
 800a454:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a458:	4921      	ldr	r1, [pc, #132]	; (800a4e0 <mem_malloc+0x200>)
 800a45a:	481e      	ldr	r0, [pc, #120]	; (800a4d4 <mem_malloc+0x1f4>)
 800a45c:	f00b fa66 	bl	801592c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d006      	beq.n	800a478 <mem_malloc+0x198>
 800a46a:	4b18      	ldr	r3, [pc, #96]	; (800a4cc <mem_malloc+0x1ec>)
 800a46c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a470:	491c      	ldr	r1, [pc, #112]	; (800a4e4 <mem_malloc+0x204>)
 800a472:	4818      	ldr	r0, [pc, #96]	; (800a4d4 <mem_malloc+0x1f4>)
 800a474:	f00b fa5a 	bl	801592c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d006      	beq.n	800a490 <mem_malloc+0x1b0>
 800a482:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <mem_malloc+0x1ec>)
 800a484:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a488:	4917      	ldr	r1, [pc, #92]	; (800a4e8 <mem_malloc+0x208>)
 800a48a:	4812      	ldr	r0, [pc, #72]	; (800a4d4 <mem_malloc+0x1f4>)
 800a48c:	f00b fa4e 	bl	801592c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	3308      	adds	r3, #8
 800a494:	e011      	b.n	800a4ba <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a496:	8bfb      	ldrh	r3, [r7, #30]
 800a498:	4618      	mov	r0, r3
 800a49a:	f7ff fc33 	bl	8009d04 <ptr_to_mem>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	881b      	ldrh	r3, [r3, #0]
 800a4a2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a4a4:	8bfa      	ldrh	r2, [r7, #30]
 800a4a6:	8bbb      	ldrh	r3, [r7, #28]
 800a4a8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	f4ff af41 	bcc.w	800a334 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a4b2:	4804      	ldr	r0, [pc, #16]	; (800a4c4 <mem_malloc+0x1e4>)
 800a4b4:	f009 febb 	bl	801422e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3720      	adds	r7, #32
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	2002b568 	.word	0x2002b568
 800a4c8:	2002b56c 	.word	0x2002b56c
 800a4cc:	08016ed4 	.word	0x08016ed4
 800a4d0:	08017098 	.word	0x08017098
 800a4d4:	08016f1c 	.word	0x08016f1c
 800a4d8:	2002b564 	.word	0x2002b564
 800a4dc:	080170ac 	.word	0x080170ac
 800a4e0:	080170c8 	.word	0x080170c8
 800a4e4:	080170f8 	.word	0x080170f8
 800a4e8:	08017128 	.word	0x08017128

0800a4ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	3303      	adds	r3, #3
 800a502:	f023 0303 	bic.w	r3, r3, #3
 800a506:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a508:	2300      	movs	r3, #0
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	e011      	b.n	800a532 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	461a      	mov	r2, r3
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	4413      	add	r3, r2
 800a52a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3301      	adds	r3, #1
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	885b      	ldrh	r3, [r3, #2]
 800a536:	461a      	mov	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4293      	cmp	r3, r2
 800a53c:	dbe7      	blt.n	800a50e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a53e:	bf00      	nop
 800a540:	bf00      	nop
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a552:	2300      	movs	r3, #0
 800a554:	80fb      	strh	r3, [r7, #6]
 800a556:	e009      	b.n	800a56c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a558:	88fb      	ldrh	r3, [r7, #6]
 800a55a:	4a08      	ldr	r2, [pc, #32]	; (800a57c <memp_init+0x30>)
 800a55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff ffc3 	bl	800a4ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a566:	88fb      	ldrh	r3, [r7, #6]
 800a568:	3301      	adds	r3, #1
 800a56a:	80fb      	strh	r3, [r7, #6]
 800a56c:	88fb      	ldrh	r3, [r7, #6]
 800a56e:	2b0c      	cmp	r3, #12
 800a570:	d9f2      	bls.n	800a558 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a572:	bf00      	nop
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	08019c44 	.word	0x08019c44

0800a580 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a588:	f009 fe84 	bl	8014294 <sys_arch_protect>
 800a58c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d015      	beq.n	800a5c8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d006      	beq.n	800a5be <do_memp_malloc_pool+0x3e>
 800a5b0:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <do_memp_malloc_pool+0x58>)
 800a5b2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a5b6:	4909      	ldr	r1, [pc, #36]	; (800a5dc <do_memp_malloc_pool+0x5c>)
 800a5b8:	4809      	ldr	r0, [pc, #36]	; (800a5e0 <do_memp_malloc_pool+0x60>)
 800a5ba:	f00b f9b7 	bl	801592c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f009 fe76 	bl	80142b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	e003      	b.n	800a5d0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f009 fe71 	bl	80142b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	0801714c 	.word	0x0801714c
 800a5dc:	0801717c 	.word	0x0801717c
 800a5e0:	080171a0 	.word	0x080171a0

0800a5e4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d106      	bne.n	800a600 <memp_malloc_pool+0x1c>
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <memp_malloc_pool+0x38>)
 800a5f4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a5f8:	4909      	ldr	r1, [pc, #36]	; (800a620 <memp_malloc_pool+0x3c>)
 800a5fa:	480a      	ldr	r0, [pc, #40]	; (800a624 <memp_malloc_pool+0x40>)
 800a5fc:	f00b f996 	bl	801592c <iprintf>
  if (desc == NULL) {
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <memp_malloc_pool+0x26>
    return NULL;
 800a606:	2300      	movs	r3, #0
 800a608:	e003      	b.n	800a612 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff ffb8 	bl	800a580 <do_memp_malloc_pool>
 800a610:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	0801714c 	.word	0x0801714c
 800a620:	080171c8 	.word	0x080171c8
 800a624:	080171a0 	.word	0x080171a0

0800a628 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	2b0c      	cmp	r3, #12
 800a636:	d908      	bls.n	800a64a <memp_malloc+0x22>
 800a638:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <memp_malloc+0x3c>)
 800a63a:	f240 1257 	movw	r2, #343	; 0x157
 800a63e:	490a      	ldr	r1, [pc, #40]	; (800a668 <memp_malloc+0x40>)
 800a640:	480a      	ldr	r0, [pc, #40]	; (800a66c <memp_malloc+0x44>)
 800a642:	f00b f973 	bl	801592c <iprintf>
 800a646:	2300      	movs	r3, #0
 800a648:	e008      	b.n	800a65c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	4a08      	ldr	r2, [pc, #32]	; (800a670 <memp_malloc+0x48>)
 800a64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff ff94 	bl	800a580 <do_memp_malloc_pool>
 800a658:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a65a:	68fb      	ldr	r3, [r7, #12]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	0801714c 	.word	0x0801714c
 800a668:	080171dc 	.word	0x080171dc
 800a66c:	080171a0 	.word	0x080171a0
 800a670:	08019c44 	.word	0x08019c44

0800a674 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	f003 0303 	and.w	r3, r3, #3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d006      	beq.n	800a696 <do_memp_free_pool+0x22>
 800a688:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <do_memp_free_pool+0x4c>)
 800a68a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a68e:	490d      	ldr	r1, [pc, #52]	; (800a6c4 <do_memp_free_pool+0x50>)
 800a690:	480d      	ldr	r0, [pc, #52]	; (800a6c8 <do_memp_free_pool+0x54>)
 800a692:	f00b f94b 	bl	801592c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a69a:	f009 fdfb 	bl	8014294 <sys_arch_protect>
 800a69e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a6b2:	68b8      	ldr	r0, [r7, #8]
 800a6b4:	f009 fdfc 	bl	80142b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a6b8:	bf00      	nop
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	0801714c 	.word	0x0801714c
 800a6c4:	080171fc 	.word	0x080171fc
 800a6c8:	080171a0 	.word	0x080171a0

0800a6cc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d106      	bne.n	800a6ea <memp_free_pool+0x1e>
 800a6dc:	4b0a      	ldr	r3, [pc, #40]	; (800a708 <memp_free_pool+0x3c>)
 800a6de:	f240 1295 	movw	r2, #405	; 0x195
 800a6e2:	490a      	ldr	r1, [pc, #40]	; (800a70c <memp_free_pool+0x40>)
 800a6e4:	480a      	ldr	r0, [pc, #40]	; (800a710 <memp_free_pool+0x44>)
 800a6e6:	f00b f921 	bl	801592c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <memp_free_pool+0x34>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d004      	beq.n	800a700 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ffbb 	bl	800a674 <do_memp_free_pool>
 800a6fe:	e000      	b.n	800a702 <memp_free_pool+0x36>
    return;
 800a700:	bf00      	nop
}
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	0801714c 	.word	0x0801714c
 800a70c:	080171c8 	.word	0x080171c8
 800a710:	080171a0 	.word	0x080171a0

0800a714 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	4603      	mov	r3, r0
 800a71c:	6039      	str	r1, [r7, #0]
 800a71e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	2b0c      	cmp	r3, #12
 800a724:	d907      	bls.n	800a736 <memp_free+0x22>
 800a726:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <memp_free+0x44>)
 800a728:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a72c:	490b      	ldr	r1, [pc, #44]	; (800a75c <memp_free+0x48>)
 800a72e:	480c      	ldr	r0, [pc, #48]	; (800a760 <memp_free+0x4c>)
 800a730:	f00b f8fc 	bl	801592c <iprintf>
 800a734:	e00c      	b.n	800a750 <memp_free+0x3c>

  if (mem == NULL) {
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d008      	beq.n	800a74e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	4a09      	ldr	r2, [pc, #36]	; (800a764 <memp_free+0x50>)
 800a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a744:	6839      	ldr	r1, [r7, #0]
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff ff94 	bl	800a674 <do_memp_free_pool>
 800a74c:	e000      	b.n	800a750 <memp_free+0x3c>
    return;
 800a74e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	0801714c 	.word	0x0801714c
 800a75c:	0801721c 	.word	0x0801721c
 800a760:	080171a0 	.word	0x080171a0
 800a764:	08019c44 	.word	0x08019c44

0800a768 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a76c:	bf00      	nop
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d108      	bne.n	800a79e <netif_add+0x26>
 800a78c:	4b57      	ldr	r3, [pc, #348]	; (800a8ec <netif_add+0x174>)
 800a78e:	f240 1227 	movw	r2, #295	; 0x127
 800a792:	4957      	ldr	r1, [pc, #348]	; (800a8f0 <netif_add+0x178>)
 800a794:	4857      	ldr	r0, [pc, #348]	; (800a8f4 <netif_add+0x17c>)
 800a796:	f00b f8c9 	bl	801592c <iprintf>
 800a79a:	2300      	movs	r3, #0
 800a79c:	e0a2      	b.n	800a8e4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d108      	bne.n	800a7b6 <netif_add+0x3e>
 800a7a4:	4b51      	ldr	r3, [pc, #324]	; (800a8ec <netif_add+0x174>)
 800a7a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a7aa:	4953      	ldr	r1, [pc, #332]	; (800a8f8 <netif_add+0x180>)
 800a7ac:	4851      	ldr	r0, [pc, #324]	; (800a8f4 <netif_add+0x17c>)
 800a7ae:	f00b f8bd 	bl	801592c <iprintf>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e096      	b.n	800a8e4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a7bc:	4b4f      	ldr	r3, [pc, #316]	; (800a8fc <netif_add+0x184>)
 800a7be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a7c6:	4b4d      	ldr	r3, [pc, #308]	; (800a8fc <netif_add+0x184>)
 800a7c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a7d0:	4b4a      	ldr	r3, [pc, #296]	; (800a8fc <netif_add+0x184>)
 800a7d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4a45      	ldr	r2, [pc, #276]	; (800a900 <netif_add+0x188>)
 800a7ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a3a      	ldr	r2, [r7, #32]
 800a804:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a806:	4b3f      	ldr	r3, [pc, #252]	; (800a904 <netif_add+0x18c>)
 800a808:	781a      	ldrb	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a814:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	68b9      	ldr	r1, [r7, #8]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f913 	bl	800aa48 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	4798      	blx	r3
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <netif_add+0xba>
    return NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	e058      	b.n	800a8e4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a838:	2bff      	cmp	r3, #255	; 0xff
 800a83a:	d103      	bne.n	800a844 <netif_add+0xcc>
        netif->num = 0;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a848:	4b2f      	ldr	r3, [pc, #188]	; (800a908 <netif_add+0x190>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	e02b      	b.n	800a8a8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	429a      	cmp	r2, r3
 800a856:	d106      	bne.n	800a866 <netif_add+0xee>
 800a858:	4b24      	ldr	r3, [pc, #144]	; (800a8ec <netif_add+0x174>)
 800a85a:	f240 128b 	movw	r2, #395	; 0x18b
 800a85e:	492b      	ldr	r1, [pc, #172]	; (800a90c <netif_add+0x194>)
 800a860:	4824      	ldr	r0, [pc, #144]	; (800a8f4 <netif_add+0x17c>)
 800a862:	f00b f863 	bl	801592c <iprintf>
        num_netifs++;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	3301      	adds	r3, #1
 800a86a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	2bff      	cmp	r3, #255	; 0xff
 800a870:	dd06      	ble.n	800a880 <netif_add+0x108>
 800a872:	4b1e      	ldr	r3, [pc, #120]	; (800a8ec <netif_add+0x174>)
 800a874:	f240 128d 	movw	r2, #397	; 0x18d
 800a878:	4925      	ldr	r1, [pc, #148]	; (800a910 <netif_add+0x198>)
 800a87a:	481e      	ldr	r0, [pc, #120]	; (800a8f4 <netif_add+0x17c>)
 800a87c:	f00b f856 	bl	801592c <iprintf>
        if (netif2->num == netif->num) {
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d108      	bne.n	800a8a2 <netif_add+0x12a>
          netif->num++;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a896:	3301      	adds	r3, #1
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a8a0:	e005      	b.n	800a8ae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1d0      	bne.n	800a850 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1be      	bne.n	800a832 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8ba:	2bfe      	cmp	r3, #254	; 0xfe
 800a8bc:	d103      	bne.n	800a8c6 <netif_add+0x14e>
    netif_num = 0;
 800a8be:	4b11      	ldr	r3, [pc, #68]	; (800a904 <netif_add+0x18c>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	701a      	strb	r2, [r3, #0]
 800a8c4:	e006      	b.n	800a8d4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	4b0c      	ldr	r3, [pc, #48]	; (800a904 <netif_add+0x18c>)
 800a8d2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a8d4:	4b0c      	ldr	r3, [pc, #48]	; (800a908 <netif_add+0x190>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a8dc:	4a0a      	ldr	r2, [pc, #40]	; (800a908 <netif_add+0x190>)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	08017238 	.word	0x08017238
 800a8f0:	080172cc 	.word	0x080172cc
 800a8f4:	08017288 	.word	0x08017288
 800a8f8:	080172e8 	.word	0x080172e8
 800a8fc:	08019cb8 	.word	0x08019cb8
 800a900:	0800ad23 	.word	0x0800ad23
 800a904:	2002e644 	.word	0x2002e644
 800a908:	2002e63c 	.word	0x2002e63c
 800a90c:	0801730c 	.word	0x0801730c
 800a910:	08017320 	.word	0x08017320

0800a914 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f002 fc7b 	bl	800d21c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f007 f8c5 	bl	8011ab8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <netif_do_set_ipaddr+0x20>
 800a94a:	4b1d      	ldr	r3, [pc, #116]	; (800a9c0 <netif_do_set_ipaddr+0x88>)
 800a94c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a950:	491c      	ldr	r1, [pc, #112]	; (800a9c4 <netif_do_set_ipaddr+0x8c>)
 800a952:	481d      	ldr	r0, [pc, #116]	; (800a9c8 <netif_do_set_ipaddr+0x90>)
 800a954:	f00a ffea 	bl	801592c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <netif_do_set_ipaddr+0x34>
 800a95e:	4b18      	ldr	r3, [pc, #96]	; (800a9c0 <netif_do_set_ipaddr+0x88>)
 800a960:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a964:	4917      	ldr	r1, [pc, #92]	; (800a9c4 <netif_do_set_ipaddr+0x8c>)
 800a966:	4818      	ldr	r0, [pc, #96]	; (800a9c8 <netif_do_set_ipaddr+0x90>)
 800a968:	f00a ffe0 	bl	801592c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3304      	adds	r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	429a      	cmp	r2, r3
 800a978:	d01c      	beq.n	800a9b4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3304      	adds	r3, #4
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a98a:	f107 0314 	add.w	r3, r7, #20
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff ffbf 	bl	800a914 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <netif_do_set_ipaddr+0x6a>
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	e000      	b.n	800a9a4 <netif_do_set_ipaddr+0x6c>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f000 f8d2 	bl	800ab54 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e000      	b.n	800a9b6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	08017238 	.word	0x08017238
 800a9c4:	08017350 	.word	0x08017350
 800a9c8:	08017288 	.word	0x08017288

0800a9cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3308      	adds	r3, #8
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d00a      	beq.n	800a9fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <netif_do_set_netmask+0x26>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	e000      	b.n	800a9f4 <netif_do_set_netmask+0x28>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e000      	b.n	800a9fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d00a      	beq.n	800aa3a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <netif_do_set_gw+0x26>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	e000      	b.n	800aa32 <netif_do_set_gw+0x28>
 800aa30:	2300      	movs	r3, #0
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b088      	sub	sp, #32
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
 800aa54:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aa64:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <netif_set_addr+0x90>)
 800aa66:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aa6e:	4b1a      	ldr	r3, [pc, #104]	; (800aad8 <netif_set_addr+0x90>)
 800aa70:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aa78:	4b17      	ldr	r3, [pc, #92]	; (800aad8 <netif_set_addr+0x90>)
 800aa7a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <netif_set_addr+0x42>
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d101      	bne.n	800aa8e <netif_set_addr+0x46>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e000      	b.n	800aa90 <netif_set_addr+0x48>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d006      	beq.n	800aaa6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa98:	f107 0310 	add.w	r3, r7, #16
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	68b9      	ldr	r1, [r7, #8]
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7ff ff49 	bl	800a938 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7ff ff8e 	bl	800a9cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	6839      	ldr	r1, [r7, #0]
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f7ff ffa8 	bl	800aa0a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d106      	bne.n	800aace <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aac0:	f107 0310 	add.w	r3, r7, #16
 800aac4:	461a      	mov	r2, r3
 800aac6:	68b9      	ldr	r1, [r7, #8]
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff ff35 	bl	800a938 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800aace:	bf00      	nop
 800aad0:	3720      	adds	r7, #32
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	08019cb8 	.word	0x08019cb8

0800aadc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800aae4:	4a04      	ldr	r2, [pc, #16]	; (800aaf8 <netif_set_default+0x1c>)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	2002e640 	.word	0x2002e640

0800aafc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d107      	bne.n	800ab1a <netif_set_up+0x1e>
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <netif_set_up+0x4c>)
 800ab0c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ab10:	490e      	ldr	r1, [pc, #56]	; (800ab4c <netif_set_up+0x50>)
 800ab12:	480f      	ldr	r0, [pc, #60]	; (800ab50 <netif_set_up+0x54>)
 800ab14:	f00a ff0a 	bl	801592c <iprintf>
 800ab18:	e013      	b.n	800ab42 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10c      	bne.n	800ab42 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab2e:	f043 0301 	orr.w	r3, r3, #1
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ab3a:	2103      	movs	r1, #3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f809 	bl	800ab54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	08017238 	.word	0x08017238
 800ab4c:	080173c0 	.word	0x080173c0
 800ab50:	08017288 	.word	0x08017288

0800ab54 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <netif_issue_reports+0x20>
 800ab66:	4b18      	ldr	r3, [pc, #96]	; (800abc8 <netif_issue_reports+0x74>)
 800ab68:	f240 326d 	movw	r2, #877	; 0x36d
 800ab6c:	4917      	ldr	r1, [pc, #92]	; (800abcc <netif_issue_reports+0x78>)
 800ab6e:	4818      	ldr	r0, [pc, #96]	; (800abd0 <netif_issue_reports+0x7c>)
 800ab70:	f00a fedc 	bl	801592c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab7a:	f003 0304 	and.w	r3, r3, #4
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d01e      	beq.n	800abc0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab88:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d017      	beq.n	800abc0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d013      	beq.n	800abc2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00e      	beq.n	800abc2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d007      	beq.n	800abc2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3304      	adds	r3, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f007 fee7 	bl	801298c <etharp_request>
 800abbe:	e000      	b.n	800abc2 <netif_issue_reports+0x6e>
    return;
 800abc0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	08017238 	.word	0x08017238
 800abcc:	080173dc 	.word	0x080173dc
 800abd0:	08017288 	.word	0x08017288

0800abd4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d107      	bne.n	800abf2 <netif_set_down+0x1e>
 800abe2:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <netif_set_down+0x58>)
 800abe4:	f240 329b 	movw	r2, #923	; 0x39b
 800abe8:	4911      	ldr	r1, [pc, #68]	; (800ac30 <netif_set_down+0x5c>)
 800abea:	4812      	ldr	r0, [pc, #72]	; (800ac34 <netif_set_down+0x60>)
 800abec:	f00a fe9e 	bl	801592c <iprintf>
 800abf0:	e019      	b.n	800ac26 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d012      	beq.n	800ac26 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac06:	f023 0301 	bic.w	r3, r3, #1
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac18:	f003 0308 	and.w	r3, r3, #8
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f007 fa71 	bl	8012108 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	08017238 	.word	0x08017238
 800ac30:	08017400 	.word	0x08017400
 800ac34:	08017288 	.word	0x08017288

0800ac38 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d107      	bne.n	800ac56 <netif_set_link_up+0x1e>
 800ac46:	4b13      	ldr	r3, [pc, #76]	; (800ac94 <netif_set_link_up+0x5c>)
 800ac48:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ac4c:	4912      	ldr	r1, [pc, #72]	; (800ac98 <netif_set_link_up+0x60>)
 800ac4e:	4813      	ldr	r0, [pc, #76]	; (800ac9c <netif_set_link_up+0x64>)
 800ac50:	f00a fe6c 	bl	801592c <iprintf>
 800ac54:	e01b      	b.n	800ac8e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d114      	bne.n	800ac8e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac6a:	f043 0304 	orr.w	r3, r3, #4
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac76:	2103      	movs	r1, #3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff ff6b 	bl	800ab54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <netif_set_link_up+0x56>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	08017238 	.word	0x08017238
 800ac98:	08017420 	.word	0x08017420
 800ac9c:	08017288 	.word	0x08017288

0800aca0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d107      	bne.n	800acbe <netif_set_link_down+0x1e>
 800acae:	4b11      	ldr	r3, [pc, #68]	; (800acf4 <netif_set_link_down+0x54>)
 800acb0:	f240 4206 	movw	r2, #1030	; 0x406
 800acb4:	4910      	ldr	r1, [pc, #64]	; (800acf8 <netif_set_link_down+0x58>)
 800acb6:	4811      	ldr	r0, [pc, #68]	; (800acfc <netif_set_link_down+0x5c>)
 800acb8:	f00a fe38 	bl	801592c <iprintf>
 800acbc:	e017      	b.n	800acee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d010      	beq.n	800acee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800acd2:	f023 0304 	bic.w	r3, r3, #4
 800acd6:	b2da      	uxtb	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	69db      	ldr	r3, [r3, #28]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <netif_set_link_down+0x4e>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	69db      	ldr	r3, [r3, #28]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	08017238 	.word	0x08017238
 800acf8:	08017444 	.word	0x08017444
 800acfc:	08017288 	.word	0x08017288

0800ad00 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	61da      	str	r2, [r3, #28]
  }
}
 800ad16:	bf00      	nop
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b085      	sub	sp, #20
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ad2e:	f06f 030b 	mvn.w	r3, #11
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
	...

0800ad40 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d013      	beq.n	800ad78 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ad50:	4b0d      	ldr	r3, [pc, #52]	; (800ad88 <netif_get_by_index+0x48>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60fb      	str	r3, [r7, #12]
 800ad56:	e00c      	b.n	800ad72 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad5e:	3301      	adds	r3, #1
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	79fa      	ldrb	r2, [r7, #7]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d101      	bne.n	800ad6c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	e006      	b.n	800ad7a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1ef      	bne.n	800ad58 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	2002e63c 	.word	0x2002e63c

0800ad8c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ad92:	f009 fa7f 	bl	8014294 <sys_arch_protect>
 800ad96:	6038      	str	r0, [r7, #0]
 800ad98:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <pbuf_free_ooseq+0x44>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
 800ad9e:	6838      	ldr	r0, [r7, #0]
 800ada0:	f009 fa86 	bl	80142b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ada4:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <pbuf_free_ooseq+0x48>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	607b      	str	r3, [r7, #4]
 800adaa:	e00a      	b.n	800adc2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f002 fa6f 	bl	800d298 <tcp_free_ooseq>
      return;
 800adba:	e005      	b.n	800adc8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	607b      	str	r3, [r7, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1f1      	bne.n	800adac <pbuf_free_ooseq+0x20>
    }
  }
}
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	2002e645 	.word	0x2002e645
 800add4:	2002e654 	.word	0x2002e654

0800add8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ade0:	f7ff ffd4 	bl	800ad8c <pbuf_free_ooseq>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800adf2:	f009 fa4f 	bl	8014294 <sys_arch_protect>
 800adf6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800adf8:	4b0f      	ldr	r3, [pc, #60]	; (800ae38 <pbuf_pool_is_empty+0x4c>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800adfe:	4b0e      	ldr	r3, [pc, #56]	; (800ae38 <pbuf_pool_is_empty+0x4c>)
 800ae00:	2201      	movs	r2, #1
 800ae02:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f009 fa53 	bl	80142b0 <sys_arch_unprotect>

  if (!queued) {
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10f      	bne.n	800ae30 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ae10:	2100      	movs	r1, #0
 800ae12:	480a      	ldr	r0, [pc, #40]	; (800ae3c <pbuf_pool_is_empty+0x50>)
 800ae14:	f7fe fb32 	bl	800947c <tcpip_try_callback>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d008      	beq.n	800ae30 <pbuf_pool_is_empty+0x44>
 800ae1e:	f009 fa39 	bl	8014294 <sys_arch_protect>
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <pbuf_pool_is_empty+0x4c>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	701a      	strb	r2, [r3, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f009 fa40 	bl	80142b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	2002e645 	.word	0x2002e645
 800ae3c:	0800add9 	.word	0x0800add9

0800ae40 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	460b      	mov	r3, r1
 800ae50:	80fb      	strh	r3, [r7, #6]
 800ae52:	4613      	mov	r3, r2
 800ae54:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	88fa      	ldrh	r2, [r7, #6]
 800ae66:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	88ba      	ldrh	r2, [r7, #4]
 800ae6c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ae6e:	8b3b      	ldrh	r3, [r7, #24]
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	7f3a      	ldrb	r2, [r7, #28]
 800ae7a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	73da      	strb	r2, [r3, #15]
}
 800ae88:	bf00      	nop
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08c      	sub	sp, #48	; 0x30
 800ae98:	af02      	add	r7, sp, #8
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	71fb      	strb	r3, [r7, #7]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	80bb      	strh	r3, [r7, #4]
 800aea2:	4613      	mov	r3, r2
 800aea4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800aeaa:	887b      	ldrh	r3, [r7, #2]
 800aeac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800aeb0:	d07f      	beq.n	800afb2 <pbuf_alloc+0x11e>
 800aeb2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800aeb6:	f300 80c8 	bgt.w	800b04a <pbuf_alloc+0x1b6>
 800aeba:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800aebe:	d010      	beq.n	800aee2 <pbuf_alloc+0x4e>
 800aec0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800aec4:	f300 80c1 	bgt.w	800b04a <pbuf_alloc+0x1b6>
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d002      	beq.n	800aed2 <pbuf_alloc+0x3e>
 800aecc:	2b41      	cmp	r3, #65	; 0x41
 800aece:	f040 80bc 	bne.w	800b04a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800aed2:	887a      	ldrh	r2, [r7, #2]
 800aed4:	88bb      	ldrh	r3, [r7, #4]
 800aed6:	4619      	mov	r1, r3
 800aed8:	2000      	movs	r0, #0
 800aeda:	f000 f8d1 	bl	800b080 <pbuf_alloc_reference>
 800aede:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800aee0:	e0bd      	b.n	800b05e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800aee2:	2300      	movs	r3, #0
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800aeea:	88bb      	ldrh	r3, [r7, #4]
 800aeec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800aeee:	200c      	movs	r0, #12
 800aef0:	f7ff fb9a 	bl	800a628 <memp_malloc>
 800aef4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d109      	bne.n	800af10 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800aefc:	f7ff ff76 	bl	800adec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	2b00      	cmp	r3, #0
 800af04:	d002      	beq.n	800af0c <pbuf_alloc+0x78>
            pbuf_free(p);
 800af06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af08:	f000 faa8 	bl	800b45c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e0a7      	b.n	800b060 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800af10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af12:	3303      	adds	r3, #3
 800af14:	b29b      	uxth	r3, r3
 800af16:	f023 0303 	bic.w	r3, r3, #3
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800af20:	b29b      	uxth	r3, r3
 800af22:	8b7a      	ldrh	r2, [r7, #26]
 800af24:	4293      	cmp	r3, r2
 800af26:	bf28      	it	cs
 800af28:	4613      	movcs	r3, r2
 800af2a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800af2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af2e:	3310      	adds	r3, #16
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	4413      	add	r3, r2
 800af34:	3303      	adds	r3, #3
 800af36:	f023 0303 	bic.w	r3, r3, #3
 800af3a:	4618      	mov	r0, r3
 800af3c:	89f9      	ldrh	r1, [r7, #14]
 800af3e:	8b7a      	ldrh	r2, [r7, #26]
 800af40:	2300      	movs	r3, #0
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	887b      	ldrh	r3, [r7, #2]
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	460b      	mov	r3, r1
 800af4a:	4601      	mov	r1, r0
 800af4c:	6938      	ldr	r0, [r7, #16]
 800af4e:	f7ff ff77 	bl	800ae40 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d006      	beq.n	800af6c <pbuf_alloc+0xd8>
 800af5e:	4b42      	ldr	r3, [pc, #264]	; (800b068 <pbuf_alloc+0x1d4>)
 800af60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af64:	4941      	ldr	r1, [pc, #260]	; (800b06c <pbuf_alloc+0x1d8>)
 800af66:	4842      	ldr	r0, [pc, #264]	; (800b070 <pbuf_alloc+0x1dc>)
 800af68:	f00a fce0 	bl	801592c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800af6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af6e:	3303      	adds	r3, #3
 800af70:	f023 0303 	bic.w	r3, r3, #3
 800af74:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800af78:	d106      	bne.n	800af88 <pbuf_alloc+0xf4>
 800af7a:	4b3b      	ldr	r3, [pc, #236]	; (800b068 <pbuf_alloc+0x1d4>)
 800af7c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800af80:	493c      	ldr	r1, [pc, #240]	; (800b074 <pbuf_alloc+0x1e0>)
 800af82:	483b      	ldr	r0, [pc, #236]	; (800b070 <pbuf_alloc+0x1dc>)
 800af84:	f00a fcd2 	bl	801592c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d102      	bne.n	800af94 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	627b      	str	r3, [r7, #36]	; 0x24
 800af92:	e002      	b.n	800af9a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800af9e:	8b7a      	ldrh	r2, [r7, #26]
 800afa0:	89fb      	ldrh	r3, [r7, #14]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800afaa:	8b7b      	ldrh	r3, [r7, #26]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d19e      	bne.n	800aeee <pbuf_alloc+0x5a>
      break;
 800afb0:	e055      	b.n	800b05e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800afb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afb4:	3303      	adds	r3, #3
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	f023 0303 	bic.w	r3, r3, #3
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	88bb      	ldrh	r3, [r7, #4]
 800afc0:	3303      	adds	r3, #3
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	f023 0303 	bic.w	r3, r3, #3
 800afc8:	b29b      	uxth	r3, r3
 800afca:	4413      	add	r3, r2
 800afcc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800afce:	8b3b      	ldrh	r3, [r7, #24]
 800afd0:	3310      	adds	r3, #16
 800afd2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800afd4:	8b3a      	ldrh	r2, [r7, #24]
 800afd6:	88bb      	ldrh	r3, [r7, #4]
 800afd8:	3303      	adds	r3, #3
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	429a      	cmp	r2, r3
 800afe0:	d306      	bcc.n	800aff0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800afe2:	8afa      	ldrh	r2, [r7, #22]
 800afe4:	88bb      	ldrh	r3, [r7, #4]
 800afe6:	3303      	adds	r3, #3
 800afe8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800afec:	429a      	cmp	r2, r3
 800afee:	d201      	bcs.n	800aff4 <pbuf_alloc+0x160>
        return NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	e035      	b.n	800b060 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800aff4:	8afb      	ldrh	r3, [r7, #22]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff f972 	bl	800a2e0 <mem_malloc>
 800affc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <pbuf_alloc+0x174>
        return NULL;
 800b004:	2300      	movs	r3, #0
 800b006:	e02b      	b.n	800b060 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b00a:	3310      	adds	r3, #16
 800b00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b00e:	4413      	add	r3, r2
 800b010:	3303      	adds	r3, #3
 800b012:	f023 0303 	bic.w	r3, r3, #3
 800b016:	4618      	mov	r0, r3
 800b018:	88b9      	ldrh	r1, [r7, #4]
 800b01a:	88ba      	ldrh	r2, [r7, #4]
 800b01c:	2300      	movs	r3, #0
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	887b      	ldrh	r3, [r7, #2]
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	460b      	mov	r3, r1
 800b026:	4601      	mov	r1, r0
 800b028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b02a:	f7ff ff09 	bl	800ae40 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d010      	beq.n	800b05c <pbuf_alloc+0x1c8>
 800b03a:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <pbuf_alloc+0x1d4>)
 800b03c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b040:	490d      	ldr	r1, [pc, #52]	; (800b078 <pbuf_alloc+0x1e4>)
 800b042:	480b      	ldr	r0, [pc, #44]	; (800b070 <pbuf_alloc+0x1dc>)
 800b044:	f00a fc72 	bl	801592c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b048:	e008      	b.n	800b05c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b04a:	4b07      	ldr	r3, [pc, #28]	; (800b068 <pbuf_alloc+0x1d4>)
 800b04c:	f240 1227 	movw	r2, #295	; 0x127
 800b050:	490a      	ldr	r1, [pc, #40]	; (800b07c <pbuf_alloc+0x1e8>)
 800b052:	4807      	ldr	r0, [pc, #28]	; (800b070 <pbuf_alloc+0x1dc>)
 800b054:	f00a fc6a 	bl	801592c <iprintf>
      return NULL;
 800b058:	2300      	movs	r3, #0
 800b05a:	e001      	b.n	800b060 <pbuf_alloc+0x1cc>
      break;
 800b05c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b060:	4618      	mov	r0, r3
 800b062:	3728      	adds	r7, #40	; 0x28
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	08017468 	.word	0x08017468
 800b06c:	08017498 	.word	0x08017498
 800b070:	080174c8 	.word	0x080174c8
 800b074:	080174f0 	.word	0x080174f0
 800b078:	08017524 	.word	0x08017524
 800b07c:	08017550 	.word	0x08017550

0800b080 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af02      	add	r7, sp, #8
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	807b      	strh	r3, [r7, #2]
 800b08c:	4613      	mov	r3, r2
 800b08e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b090:	883b      	ldrh	r3, [r7, #0]
 800b092:	2b41      	cmp	r3, #65	; 0x41
 800b094:	d009      	beq.n	800b0aa <pbuf_alloc_reference+0x2a>
 800b096:	883b      	ldrh	r3, [r7, #0]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d006      	beq.n	800b0aa <pbuf_alloc_reference+0x2a>
 800b09c:	4b0f      	ldr	r3, [pc, #60]	; (800b0dc <pbuf_alloc_reference+0x5c>)
 800b09e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b0a2:	490f      	ldr	r1, [pc, #60]	; (800b0e0 <pbuf_alloc_reference+0x60>)
 800b0a4:	480f      	ldr	r0, [pc, #60]	; (800b0e4 <pbuf_alloc_reference+0x64>)
 800b0a6:	f00a fc41 	bl	801592c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b0aa:	200b      	movs	r0, #11
 800b0ac:	f7ff fabc 	bl	800a628 <memp_malloc>
 800b0b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	e00b      	b.n	800b0d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b0bc:	8879      	ldrh	r1, [r7, #2]
 800b0be:	887a      	ldrh	r2, [r7, #2]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	883b      	ldrh	r3, [r7, #0]
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f7ff feb7 	bl	800ae40 <pbuf_init_alloced_pbuf>
  return p;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	08017468 	.word	0x08017468
 800b0e0:	0801756c 	.word	0x0801756c
 800b0e4:	080174c8 	.word	0x080174c8

0800b0e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af02      	add	r7, sp, #8
 800b0ee:	607b      	str	r3, [r7, #4]
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	81bb      	strh	r3, [r7, #12]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b100:	8a7b      	ldrh	r3, [r7, #18]
 800b102:	3303      	adds	r3, #3
 800b104:	f023 0203 	bic.w	r2, r3, #3
 800b108:	89bb      	ldrh	r3, [r7, #12]
 800b10a:	441a      	add	r2, r3
 800b10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b10e:	429a      	cmp	r2, r3
 800b110:	d901      	bls.n	800b116 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	e018      	b.n	800b148 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d007      	beq.n	800b12c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b11c:	8a7b      	ldrh	r3, [r7, #18]
 800b11e:	3303      	adds	r3, #3
 800b120:	f023 0303 	bic.w	r3, r3, #3
 800b124:	6a3a      	ldr	r2, [r7, #32]
 800b126:	4413      	add	r3, r2
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	e001      	b.n	800b130 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b12c:	2300      	movs	r3, #0
 800b12e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	89b9      	ldrh	r1, [r7, #12]
 800b134:	89ba      	ldrh	r2, [r7, #12]
 800b136:	2302      	movs	r3, #2
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	897b      	ldrh	r3, [r7, #10]
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	460b      	mov	r3, r1
 800b140:	6979      	ldr	r1, [r7, #20]
 800b142:	f7ff fe7d 	bl	800ae40 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b146:	687b      	ldr	r3, [r7, #4]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <pbuf_realloc+0x20>
 800b162:	4b3a      	ldr	r3, [pc, #232]	; (800b24c <pbuf_realloc+0xfc>)
 800b164:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b168:	4939      	ldr	r1, [pc, #228]	; (800b250 <pbuf_realloc+0x100>)
 800b16a:	483a      	ldr	r0, [pc, #232]	; (800b254 <pbuf_realloc+0x104>)
 800b16c:	f00a fbde 	bl	801592c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	891b      	ldrh	r3, [r3, #8]
 800b174:	887a      	ldrh	r2, [r7, #2]
 800b176:	429a      	cmp	r2, r3
 800b178:	d263      	bcs.n	800b242 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	891a      	ldrh	r2, [r3, #8]
 800b17e:	887b      	ldrh	r3, [r7, #2]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b184:	887b      	ldrh	r3, [r7, #2]
 800b186:	817b      	strh	r3, [r7, #10]
  q = p;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b18c:	e018      	b.n	800b1c0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	895b      	ldrh	r3, [r3, #10]
 800b192:	897a      	ldrh	r2, [r7, #10]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	891a      	ldrh	r2, [r3, #8]
 800b19c:	893b      	ldrh	r3, [r7, #8]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d106      	bne.n	800b1c0 <pbuf_realloc+0x70>
 800b1b2:	4b26      	ldr	r3, [pc, #152]	; (800b24c <pbuf_realloc+0xfc>)
 800b1b4:	f240 12af 	movw	r2, #431	; 0x1af
 800b1b8:	4927      	ldr	r1, [pc, #156]	; (800b258 <pbuf_realloc+0x108>)
 800b1ba:	4826      	ldr	r0, [pc, #152]	; (800b254 <pbuf_realloc+0x104>)
 800b1bc:	f00a fbb6 	bl	801592c <iprintf>
  while (rem_len > q->len) {
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	895b      	ldrh	r3, [r3, #10]
 800b1c4:	897a      	ldrh	r2, [r7, #10]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d8e1      	bhi.n	800b18e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	7b1b      	ldrb	r3, [r3, #12]
 800b1ce:	f003 030f 	and.w	r3, r3, #15
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d121      	bne.n	800b21a <pbuf_realloc+0xca>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	895b      	ldrh	r3, [r3, #10]
 800b1da:	897a      	ldrh	r2, [r7, #10]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d01c      	beq.n	800b21a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	7b5b      	ldrb	r3, [r3, #13]
 800b1e4:	f003 0302 	and.w	r3, r3, #2
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d116      	bne.n	800b21a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	897b      	ldrh	r3, [r7, #10]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f7fe ff64 	bl	800a0cc <mem_trim>
 800b204:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d106      	bne.n	800b21a <pbuf_realloc+0xca>
 800b20c:	4b0f      	ldr	r3, [pc, #60]	; (800b24c <pbuf_realloc+0xfc>)
 800b20e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b212:	4912      	ldr	r1, [pc, #72]	; (800b25c <pbuf_realloc+0x10c>)
 800b214:	480f      	ldr	r0, [pc, #60]	; (800b254 <pbuf_realloc+0x104>)
 800b216:	f00a fb89 	bl	801592c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	897a      	ldrh	r2, [r7, #10]
 800b21e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	895a      	ldrh	r2, [r3, #10]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4618      	mov	r0, r3
 800b236:	f000 f911 	bl	800b45c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e000      	b.n	800b244 <pbuf_realloc+0xf4>
    return;
 800b242:	bf00      	nop

}
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	08017468 	.word	0x08017468
 800b250:	08017580 	.word	0x08017580
 800b254:	080174c8 	.word	0x080174c8
 800b258:	08017598 	.word	0x08017598
 800b25c:	080175b0 	.word	0x080175b0

0800b260 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d106      	bne.n	800b282 <pbuf_add_header_impl+0x22>
 800b274:	4b2b      	ldr	r3, [pc, #172]	; (800b324 <pbuf_add_header_impl+0xc4>)
 800b276:	f240 12df 	movw	r2, #479	; 0x1df
 800b27a:	492b      	ldr	r1, [pc, #172]	; (800b328 <pbuf_add_header_impl+0xc8>)
 800b27c:	482b      	ldr	r0, [pc, #172]	; (800b32c <pbuf_add_header_impl+0xcc>)
 800b27e:	f00a fb55 	bl	801592c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <pbuf_add_header_impl+0x30>
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b28e:	d301      	bcc.n	800b294 <pbuf_add_header_impl+0x34>
    return 1;
 800b290:	2301      	movs	r3, #1
 800b292:	e043      	b.n	800b31c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <pbuf_add_header_impl+0x3e>
    return 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	e03e      	b.n	800b31c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	891a      	ldrh	r2, [r3, #8]
 800b2a6:	8a7b      	ldrh	r3, [r7, #18]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	8a7a      	ldrh	r2, [r7, #18]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d901      	bls.n	800b2b6 <pbuf_add_header_impl+0x56>
    return 1;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e032      	b.n	800b31c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	7b1b      	ldrb	r3, [r3, #12]
 800b2ba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b2bc:	8a3b      	ldrh	r3, [r7, #16]
 800b2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00c      	beq.n	800b2e0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	425b      	negs	r3, r3
 800b2ce:	4413      	add	r3, r2
 800b2d0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3310      	adds	r3, #16
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d20d      	bcs.n	800b2f8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e01d      	b.n	800b31c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d006      	beq.n	800b2f4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	425b      	negs	r3, r3
 800b2ee:	4413      	add	r3, r2
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	e001      	b.n	800b2f8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e011      	b.n	800b31c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	895a      	ldrh	r2, [r3, #10]
 800b302:	8a7b      	ldrh	r3, [r7, #18]
 800b304:	4413      	add	r3, r2
 800b306:	b29a      	uxth	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	891a      	ldrh	r2, [r3, #8]
 800b310:	8a7b      	ldrh	r3, [r7, #18]
 800b312:	4413      	add	r3, r2
 800b314:	b29a      	uxth	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	811a      	strh	r2, [r3, #8]


  return 0;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	08017468 	.word	0x08017468
 800b328:	080175cc 	.word	0x080175cc
 800b32c:	080174c8 	.word	0x080174c8

0800b330 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b33a:	2200      	movs	r2, #0
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff ff8e 	bl	800b260 <pbuf_add_header_impl>
 800b344:	4603      	mov	r3, r0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
	...

0800b350 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d106      	bne.n	800b36e <pbuf_remove_header+0x1e>
 800b360:	4b20      	ldr	r3, [pc, #128]	; (800b3e4 <pbuf_remove_header+0x94>)
 800b362:	f240 224b 	movw	r2, #587	; 0x24b
 800b366:	4920      	ldr	r1, [pc, #128]	; (800b3e8 <pbuf_remove_header+0x98>)
 800b368:	4820      	ldr	r0, [pc, #128]	; (800b3ec <pbuf_remove_header+0x9c>)
 800b36a:	f00a fadf 	bl	801592c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <pbuf_remove_header+0x2c>
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b37a:	d301      	bcc.n	800b380 <pbuf_remove_header+0x30>
    return 1;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e02c      	b.n	800b3da <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <pbuf_remove_header+0x3a>
    return 0;
 800b386:	2300      	movs	r3, #0
 800b388:	e027      	b.n	800b3da <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	895b      	ldrh	r3, [r3, #10]
 800b392:	89fa      	ldrh	r2, [r7, #14]
 800b394:	429a      	cmp	r2, r3
 800b396:	d908      	bls.n	800b3aa <pbuf_remove_header+0x5a>
 800b398:	4b12      	ldr	r3, [pc, #72]	; (800b3e4 <pbuf_remove_header+0x94>)
 800b39a:	f240 2255 	movw	r2, #597	; 0x255
 800b39e:	4914      	ldr	r1, [pc, #80]	; (800b3f0 <pbuf_remove_header+0xa0>)
 800b3a0:	4812      	ldr	r0, [pc, #72]	; (800b3ec <pbuf_remove_header+0x9c>)
 800b3a2:	f00a fac3 	bl	801592c <iprintf>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e017      	b.n	800b3da <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	441a      	add	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	895a      	ldrh	r2, [r3, #10]
 800b3c0:	89fb      	ldrh	r3, [r7, #14]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	891a      	ldrh	r2, [r3, #8]
 800b3ce:	89fb      	ldrh	r3, [r7, #14]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	08017468 	.word	0x08017468
 800b3e8:	080175cc 	.word	0x080175cc
 800b3ec:	080174c8 	.word	0x080174c8
 800b3f0:	080175d8 	.word	0x080175d8

0800b3f4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	807b      	strh	r3, [r7, #2]
 800b400:	4613      	mov	r3, r2
 800b402:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b404:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	da08      	bge.n	800b41e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b40c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b410:	425b      	negs	r3, r3
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ff9b 	bl	800b350 <pbuf_remove_header>
 800b41a:	4603      	mov	r3, r0
 800b41c:	e007      	b.n	800b42e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b41e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b422:	787a      	ldrb	r2, [r7, #1]
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7ff ff1a 	bl	800b260 <pbuf_add_header_impl>
 800b42c:	4603      	mov	r3, r0
  }
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b442:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b446:	2201      	movs	r2, #1
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff ffd2 	bl	800b3f4 <pbuf_header_impl>
 800b450:	4603      	mov	r3, r0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <pbuf_free+0x22>
 800b470:	4b3b      	ldr	r3, [pc, #236]	; (800b560 <pbuf_free+0x104>)
 800b472:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b476:	493b      	ldr	r1, [pc, #236]	; (800b564 <pbuf_free+0x108>)
 800b478:	483b      	ldr	r0, [pc, #236]	; (800b568 <pbuf_free+0x10c>)
 800b47a:	f00a fa57 	bl	801592c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	e069      	b.n	800b556 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b486:	e062      	b.n	800b54e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b488:	f008 ff04 	bl	8014294 <sys_arch_protect>
 800b48c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	7b9b      	ldrb	r3, [r3, #14]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <pbuf_free+0x48>
 800b496:	4b32      	ldr	r3, [pc, #200]	; (800b560 <pbuf_free+0x104>)
 800b498:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b49c:	4933      	ldr	r1, [pc, #204]	; (800b56c <pbuf_free+0x110>)
 800b49e:	4832      	ldr	r0, [pc, #200]	; (800b568 <pbuf_free+0x10c>)
 800b4a0:	f00a fa44 	bl	801592c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	7b9b      	ldrb	r3, [r3, #14]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	739a      	strb	r2, [r3, #14]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	7b9b      	ldrb	r3, [r3, #14]
 800b4b4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b4b6:	69b8      	ldr	r0, [r7, #24]
 800b4b8:	f008 fefa 	bl	80142b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d143      	bne.n	800b54a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	7b1b      	ldrb	r3, [r3, #12]
 800b4cc:	f003 030f 	and.w	r3, r3, #15
 800b4d0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7b5b      	ldrb	r3, [r3, #13]
 800b4d6:	f003 0302 	and.w	r3, r3, #2
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d011      	beq.n	800b502 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d106      	bne.n	800b4f8 <pbuf_free+0x9c>
 800b4ea:	4b1d      	ldr	r3, [pc, #116]	; (800b560 <pbuf_free+0x104>)
 800b4ec:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b4f0:	491f      	ldr	r1, [pc, #124]	; (800b570 <pbuf_free+0x114>)
 800b4f2:	481d      	ldr	r0, [pc, #116]	; (800b568 <pbuf_free+0x10c>)
 800b4f4:	f00a fa1a 	bl	801592c <iprintf>
        pc->custom_free_function(p);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	4798      	blx	r3
 800b500:	e01d      	b.n	800b53e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b502:	7bfb      	ldrb	r3, [r7, #15]
 800b504:	2b02      	cmp	r3, #2
 800b506:	d104      	bne.n	800b512 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	200c      	movs	r0, #12
 800b50c:	f7ff f902 	bl	800a714 <memp_free>
 800b510:	e015      	b.n	800b53e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d104      	bne.n	800b522 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	200b      	movs	r0, #11
 800b51c:	f7ff f8fa 	bl	800a714 <memp_free>
 800b520:	e00d      	b.n	800b53e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d103      	bne.n	800b530 <pbuf_free+0xd4>
          mem_free(p);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7fe fd3f 	bl	8009fac <mem_free>
 800b52e:	e006      	b.n	800b53e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b530:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <pbuf_free+0x104>)
 800b532:	f240 320f 	movw	r2, #783	; 0x30f
 800b536:	490f      	ldr	r1, [pc, #60]	; (800b574 <pbuf_free+0x118>)
 800b538:	480b      	ldr	r0, [pc, #44]	; (800b568 <pbuf_free+0x10c>)
 800b53a:	f00a f9f7 	bl	801592c <iprintf>
        }
      }
      count++;
 800b53e:	7ffb      	ldrb	r3, [r7, #31]
 800b540:	3301      	adds	r3, #1
 800b542:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	607b      	str	r3, [r7, #4]
 800b548:	e001      	b.n	800b54e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d199      	bne.n	800b488 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b554:	7ffb      	ldrb	r3, [r7, #31]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	08017468 	.word	0x08017468
 800b564:	080175cc 	.word	0x080175cc
 800b568:	080174c8 	.word	0x080174c8
 800b56c:	080175f8 	.word	0x080175f8
 800b570:	08017610 	.word	0x08017610
 800b574:	08017634 	.word	0x08017634

0800b578 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b580:	2300      	movs	r3, #0
 800b582:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b584:	e005      	b.n	800b592 <pbuf_clen+0x1a>
    ++len;
 800b586:	89fb      	ldrh	r3, [r7, #14]
 800b588:	3301      	adds	r3, #1
 800b58a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1f6      	bne.n	800b586 <pbuf_clen+0xe>
  }
  return len;
 800b598:	89fb      	ldrh	r3, [r7, #14]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
	...

0800b5a8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d016      	beq.n	800b5e4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b5b6:	f008 fe6d 	bl	8014294 <sys_arch_protect>
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7b9b      	ldrb	r3, [r3, #14]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	739a      	strb	r2, [r3, #14]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f008 fe71 	bl	80142b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	7b9b      	ldrb	r3, [r3, #14]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <pbuf_ref+0x3c>
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <pbuf_ref+0x44>)
 800b5d8:	f240 3242 	movw	r2, #834	; 0x342
 800b5dc:	4904      	ldr	r1, [pc, #16]	; (800b5f0 <pbuf_ref+0x48>)
 800b5de:	4805      	ldr	r0, [pc, #20]	; (800b5f4 <pbuf_ref+0x4c>)
 800b5e0:	f00a f9a4 	bl	801592c <iprintf>
  }
}
 800b5e4:	bf00      	nop
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	08017468 	.word	0x08017468
 800b5f0:	08017648 	.word	0x08017648
 800b5f4:	080174c8 	.word	0x080174c8

0800b5f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <pbuf_cat+0x16>
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d107      	bne.n	800b61e <pbuf_cat+0x26>
 800b60e:	4b20      	ldr	r3, [pc, #128]	; (800b690 <pbuf_cat+0x98>)
 800b610:	f240 3259 	movw	r2, #857	; 0x359
 800b614:	491f      	ldr	r1, [pc, #124]	; (800b694 <pbuf_cat+0x9c>)
 800b616:	4820      	ldr	r0, [pc, #128]	; (800b698 <pbuf_cat+0xa0>)
 800b618:	f00a f988 	bl	801592c <iprintf>
 800b61c:	e034      	b.n	800b688 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	e00a      	b.n	800b63a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	891a      	ldrh	r2, [r3, #8]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	891b      	ldrh	r3, [r3, #8]
 800b62c:	4413      	add	r3, r2
 800b62e:	b29a      	uxth	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1f0      	bne.n	800b624 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	891a      	ldrh	r2, [r3, #8]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	895b      	ldrh	r3, [r3, #10]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d006      	beq.n	800b65c <pbuf_cat+0x64>
 800b64e:	4b10      	ldr	r3, [pc, #64]	; (800b690 <pbuf_cat+0x98>)
 800b650:	f240 3262 	movw	r2, #866	; 0x362
 800b654:	4911      	ldr	r1, [pc, #68]	; (800b69c <pbuf_cat+0xa4>)
 800b656:	4810      	ldr	r0, [pc, #64]	; (800b698 <pbuf_cat+0xa0>)
 800b658:	f00a f968 	bl	801592c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d006      	beq.n	800b672 <pbuf_cat+0x7a>
 800b664:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <pbuf_cat+0x98>)
 800b666:	f240 3263 	movw	r2, #867	; 0x363
 800b66a:	490d      	ldr	r1, [pc, #52]	; (800b6a0 <pbuf_cat+0xa8>)
 800b66c:	480a      	ldr	r0, [pc, #40]	; (800b698 <pbuf_cat+0xa0>)
 800b66e:	f00a f95d 	bl	801592c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	891a      	ldrh	r2, [r3, #8]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	891b      	ldrh	r3, [r3, #8]
 800b67a:	4413      	add	r3, r2
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	08017468 	.word	0x08017468
 800b694:	0801765c 	.word	0x0801765c
 800b698:	080174c8 	.word	0x080174c8
 800b69c:	08017694 	.word	0x08017694
 800b6a0:	080176c4 	.word	0x080176c4

0800b6a4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff ffa1 	bl	800b5f8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b6b6:	6838      	ldr	r0, [r7, #0]
 800b6b8:	f7ff ff76 	bl	800b5a8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d008      	beq.n	800b6ee <pbuf_copy+0x2a>
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d005      	beq.n	800b6ee <pbuf_copy+0x2a>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	891a      	ldrh	r2, [r3, #8]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	891b      	ldrh	r3, [r3, #8]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d209      	bcs.n	800b702 <pbuf_copy+0x3e>
 800b6ee:	4b57      	ldr	r3, [pc, #348]	; (800b84c <pbuf_copy+0x188>)
 800b6f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b6f4:	4956      	ldr	r1, [pc, #344]	; (800b850 <pbuf_copy+0x18c>)
 800b6f6:	4857      	ldr	r0, [pc, #348]	; (800b854 <pbuf_copy+0x190>)
 800b6f8:	f00a f918 	bl	801592c <iprintf>
 800b6fc:	f06f 030f 	mvn.w	r3, #15
 800b700:	e09f      	b.n	800b842 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	895b      	ldrh	r3, [r3, #10]
 800b706:	461a      	mov	r2, r3
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	1ad2      	subs	r2, r2, r3
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	895b      	ldrh	r3, [r3, #10]
 800b710:	4619      	mov	r1, r3
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	1acb      	subs	r3, r1, r3
 800b716:	429a      	cmp	r2, r3
 800b718:	d306      	bcc.n	800b728 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	895b      	ldrh	r3, [r3, #10]
 800b71e:	461a      	mov	r2, r3
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	e005      	b.n	800b734 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	895b      	ldrh	r3, [r3, #10]
 800b72c:	461a      	mov	r2, r3
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	18d0      	adds	r0, r2, r3
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	4413      	add	r3, r2
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4619      	mov	r1, r3
 800b748:	f009 ffce 	bl	80156e8 <memcpy>
    offset_to += len;
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4413      	add	r3, r2
 800b752:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	4413      	add	r3, r2
 800b75a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	895b      	ldrh	r3, [r3, #10]
 800b760:	461a      	mov	r2, r3
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	4293      	cmp	r3, r2
 800b766:	d906      	bls.n	800b776 <pbuf_copy+0xb2>
 800b768:	4b38      	ldr	r3, [pc, #224]	; (800b84c <pbuf_copy+0x188>)
 800b76a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b76e:	493a      	ldr	r1, [pc, #232]	; (800b858 <pbuf_copy+0x194>)
 800b770:	4838      	ldr	r0, [pc, #224]	; (800b854 <pbuf_copy+0x190>)
 800b772:	f00a f8db 	bl	801592c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	895b      	ldrh	r3, [r3, #10]
 800b77a:	461a      	mov	r2, r3
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	4293      	cmp	r3, r2
 800b780:	d906      	bls.n	800b790 <pbuf_copy+0xcc>
 800b782:	4b32      	ldr	r3, [pc, #200]	; (800b84c <pbuf_copy+0x188>)
 800b784:	f240 32da 	movw	r2, #986	; 0x3da
 800b788:	4934      	ldr	r1, [pc, #208]	; (800b85c <pbuf_copy+0x198>)
 800b78a:	4832      	ldr	r0, [pc, #200]	; (800b854 <pbuf_copy+0x190>)
 800b78c:	f00a f8ce 	bl	801592c <iprintf>
    if (offset_from >= p_from->len) {
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	895b      	ldrh	r3, [r3, #10]
 800b794:	461a      	mov	r2, r3
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	4293      	cmp	r3, r2
 800b79a:	d304      	bcc.n	800b7a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b79c:	2300      	movs	r3, #0
 800b79e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	895b      	ldrh	r3, [r3, #10]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d114      	bne.n	800b7dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10c      	bne.n	800b7dc <pbuf_copy+0x118>
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <pbuf_copy+0x118>
 800b7c8:	4b20      	ldr	r3, [pc, #128]	; (800b84c <pbuf_copy+0x188>)
 800b7ca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b7ce:	4924      	ldr	r1, [pc, #144]	; (800b860 <pbuf_copy+0x19c>)
 800b7d0:	4820      	ldr	r0, [pc, #128]	; (800b854 <pbuf_copy+0x190>)
 800b7d2:	f00a f8ab 	bl	801592c <iprintf>
 800b7d6:	f06f 030f 	mvn.w	r3, #15
 800b7da:	e032      	b.n	800b842 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d013      	beq.n	800b80a <pbuf_copy+0x146>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	895a      	ldrh	r2, [r3, #10]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	891b      	ldrh	r3, [r3, #8]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d10d      	bne.n	800b80a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d009      	beq.n	800b80a <pbuf_copy+0x146>
 800b7f6:	4b15      	ldr	r3, [pc, #84]	; (800b84c <pbuf_copy+0x188>)
 800b7f8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b7fc:	4919      	ldr	r1, [pc, #100]	; (800b864 <pbuf_copy+0x1a0>)
 800b7fe:	4815      	ldr	r0, [pc, #84]	; (800b854 <pbuf_copy+0x190>)
 800b800:	f00a f894 	bl	801592c <iprintf>
 800b804:	f06f 0305 	mvn.w	r3, #5
 800b808:	e01b      	b.n	800b842 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d013      	beq.n	800b838 <pbuf_copy+0x174>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	895a      	ldrh	r2, [r3, #10]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	891b      	ldrh	r3, [r3, #8]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d10d      	bne.n	800b838 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d009      	beq.n	800b838 <pbuf_copy+0x174>
 800b824:	4b09      	ldr	r3, [pc, #36]	; (800b84c <pbuf_copy+0x188>)
 800b826:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b82a:	490e      	ldr	r1, [pc, #56]	; (800b864 <pbuf_copy+0x1a0>)
 800b82c:	4809      	ldr	r0, [pc, #36]	; (800b854 <pbuf_copy+0x190>)
 800b82e:	f00a f87d 	bl	801592c <iprintf>
 800b832:	f06f 0305 	mvn.w	r3, #5
 800b836:	e004      	b.n	800b842 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f47f af61 	bne.w	800b702 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	08017468 	.word	0x08017468
 800b850:	08017710 	.word	0x08017710
 800b854:	080174c8 	.word	0x080174c8
 800b858:	08017740 	.word	0x08017740
 800b85c:	08017758 	.word	0x08017758
 800b860:	08017774 	.word	0x08017774
 800b864:	08017784 	.word	0x08017784

0800b868 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	4611      	mov	r1, r2
 800b874:	461a      	mov	r2, r3
 800b876:	460b      	mov	r3, r1
 800b878:	80fb      	strh	r3, [r7, #6]
 800b87a:	4613      	mov	r3, r2
 800b87c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d108      	bne.n	800b89e <pbuf_copy_partial+0x36>
 800b88c:	4b2b      	ldr	r3, [pc, #172]	; (800b93c <pbuf_copy_partial+0xd4>)
 800b88e:	f240 420a 	movw	r2, #1034	; 0x40a
 800b892:	492b      	ldr	r1, [pc, #172]	; (800b940 <pbuf_copy_partial+0xd8>)
 800b894:	482b      	ldr	r0, [pc, #172]	; (800b944 <pbuf_copy_partial+0xdc>)
 800b896:	f00a f849 	bl	801592c <iprintf>
 800b89a:	2300      	movs	r3, #0
 800b89c:	e04a      	b.n	800b934 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d108      	bne.n	800b8b6 <pbuf_copy_partial+0x4e>
 800b8a4:	4b25      	ldr	r3, [pc, #148]	; (800b93c <pbuf_copy_partial+0xd4>)
 800b8a6:	f240 420b 	movw	r2, #1035	; 0x40b
 800b8aa:	4927      	ldr	r1, [pc, #156]	; (800b948 <pbuf_copy_partial+0xe0>)
 800b8ac:	4825      	ldr	r0, [pc, #148]	; (800b944 <pbuf_copy_partial+0xdc>)
 800b8ae:	f00a f83d 	bl	801592c <iprintf>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e03e      	b.n	800b934 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	61fb      	str	r3, [r7, #28]
 800b8ba:	e034      	b.n	800b926 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b8bc:	88bb      	ldrh	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00a      	beq.n	800b8d8 <pbuf_copy_partial+0x70>
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	895b      	ldrh	r3, [r3, #10]
 800b8c6:	88ba      	ldrh	r2, [r7, #4]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d305      	bcc.n	800b8d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	895b      	ldrh	r3, [r3, #10]
 800b8d0:	88ba      	ldrh	r2, [r7, #4]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	80bb      	strh	r3, [r7, #4]
 800b8d6:	e023      	b.n	800b920 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	895a      	ldrh	r2, [r3, #10]
 800b8dc:	88bb      	ldrh	r3, [r7, #4]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b8e2:	8b3a      	ldrh	r2, [r7, #24]
 800b8e4:	88fb      	ldrh	r3, [r7, #6]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d901      	bls.n	800b8ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b8ee:	8b7b      	ldrh	r3, [r7, #26]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	18d0      	adds	r0, r2, r3
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	88bb      	ldrh	r3, [r7, #4]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	8b3a      	ldrh	r2, [r7, #24]
 800b8fe:	4619      	mov	r1, r3
 800b900:	f009 fef2 	bl	80156e8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b904:	8afa      	ldrh	r2, [r7, #22]
 800b906:	8b3b      	ldrh	r3, [r7, #24]
 800b908:	4413      	add	r3, r2
 800b90a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b90c:	8b7a      	ldrh	r2, [r7, #26]
 800b90e:	8b3b      	ldrh	r3, [r7, #24]
 800b910:	4413      	add	r3, r2
 800b912:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b914:	88fa      	ldrh	r2, [r7, #6]
 800b916:	8b3b      	ldrh	r3, [r7, #24]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	61fb      	str	r3, [r7, #28]
 800b926:	88fb      	ldrh	r3, [r7, #6]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <pbuf_copy_partial+0xca>
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1c4      	bne.n	800b8bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b932:	8afb      	ldrh	r3, [r7, #22]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3720      	adds	r7, #32
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	08017468 	.word	0x08017468
 800b940:	080177b0 	.word	0x080177b0
 800b944:	080174c8 	.word	0x080174c8
 800b948:	080177d0 	.word	0x080177d0

0800b94c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b087      	sub	sp, #28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	460b      	mov	r3, r1
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800b95a:	897b      	ldrh	r3, [r7, #10]
 800b95c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800b962:	e007      	b.n	800b974 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	895b      	ldrh	r3, [r3, #10]
 800b968:	8afa      	ldrh	r2, [r7, #22]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d004      	beq.n	800b984 <pbuf_skip_const+0x38>
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	895b      	ldrh	r3, [r3, #10]
 800b97e:	8afa      	ldrh	r2, [r7, #22]
 800b980:	429a      	cmp	r2, r3
 800b982:	d2ef      	bcs.n	800b964 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d002      	beq.n	800b990 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	8afa      	ldrh	r2, [r7, #22]
 800b98e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800b990:	693b      	ldr	r3, [r7, #16]
}
 800b992:	4618      	mov	r0, r3
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
	...

0800b9a0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	603a      	str	r2, [r7, #0]
 800b9aa:	71fb      	strb	r3, [r7, #7]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	8919      	ldrh	r1, [r3, #8]
 800b9b4:	88ba      	ldrh	r2, [r7, #4]
 800b9b6:	79fb      	ldrb	r3, [r7, #7]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff fa6b 	bl	800ae94 <pbuf_alloc>
 800b9be:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d101      	bne.n	800b9ca <pbuf_clone+0x2a>
    return NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e011      	b.n	800b9ee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f7ff fe79 	bl	800b6c4 <pbuf_copy>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b9d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d006      	beq.n	800b9ec <pbuf_clone+0x4c>
 800b9de:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <pbuf_clone+0x58>)
 800b9e0:	f240 5224 	movw	r2, #1316	; 0x524
 800b9e4:	4905      	ldr	r1, [pc, #20]	; (800b9fc <pbuf_clone+0x5c>)
 800b9e6:	4806      	ldr	r0, [pc, #24]	; (800ba00 <pbuf_clone+0x60>)
 800b9e8:	f009 ffa0 	bl	801592c <iprintf>
  return q;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	08017468 	.word	0x08017468
 800b9fc:	080178dc 	.word	0x080178dc
 800ba00:	080174c8 	.word	0x080174c8

0800ba04 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800ba10:	887b      	ldrh	r3, [r7, #2]
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f80c 	bl	800ba32 <pbuf_try_get_at>
 800ba1a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	db02      	blt.n	800ba28 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	e000      	b.n	800ba2a <pbuf_get_at+0x26>
  }
  return 0;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800ba3e:	f107 020a 	add.w	r2, r7, #10
 800ba42:	887b      	ldrh	r3, [r7, #2]
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff ff80 	bl	800b94c <pbuf_skip_const>
 800ba4c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00a      	beq.n	800ba6a <pbuf_try_get_at+0x38>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	895a      	ldrh	r2, [r3, #10]
 800ba58:	897b      	ldrh	r3, [r7, #10]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d905      	bls.n	800ba6a <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	897a      	ldrh	r2, [r7, #10]
 800ba64:	4413      	add	r3, r2
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	e001      	b.n	800ba6e <pbuf_try_get_at+0x3c>
  }
  return -1;
 800ba6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b088      	sub	sp, #32
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	461a      	mov	r2, r3
 800ba82:	460b      	mov	r3, r1
 800ba84:	817b      	strh	r3, [r7, #10]
 800ba86:	4613      	mov	r3, r2
 800ba88:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800ba8a:	897b      	ldrh	r3, [r7, #10]
 800ba8c:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	891b      	ldrh	r3, [r3, #8]
 800ba96:	4619      	mov	r1, r3
 800ba98:	897a      	ldrh	r2, [r7, #10]
 800ba9a:	893b      	ldrh	r3, [r7, #8]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	4299      	cmp	r1, r3
 800baa0:	da0a      	bge.n	800bab8 <pbuf_memcmp+0x42>
    return 0xffff;
 800baa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baa6:	e037      	b.n	800bb18 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	895b      	ldrh	r3, [r3, #10]
 800baac:	8bfa      	ldrh	r2, [r7, #30]
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d004      	beq.n	800bac8 <pbuf_memcmp+0x52>
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	895b      	ldrh	r3, [r3, #10]
 800bac2:	8bfa      	ldrh	r2, [r7, #30]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d2ef      	bcs.n	800baa8 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800bac8:	2300      	movs	r3, #0
 800baca:	82fb      	strh	r3, [r7, #22]
 800bacc:	e01f      	b.n	800bb0e <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800bace:	8bfa      	ldrh	r2, [r7, #30]
 800bad0:	8afb      	ldrh	r3, [r7, #22]
 800bad2:	4413      	add	r3, r2
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	4619      	mov	r1, r3
 800bad8:	69b8      	ldr	r0, [r7, #24]
 800bada:	f7ff ff93 	bl	800ba04 <pbuf_get_at>
 800bade:	4603      	mov	r3, r0
 800bae0:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800bae2:	8afb      	ldrh	r3, [r7, #22]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	4413      	add	r3, r2
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800baec:	7d7a      	ldrb	r2, [r7, #21]
 800baee:	7d3b      	ldrb	r3, [r7, #20]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d009      	beq.n	800bb08 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800baf4:	8afb      	ldrh	r3, [r7, #22]
 800baf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bafa:	4293      	cmp	r3, r2
 800bafc:	bf28      	it	cs
 800bafe:	4613      	movcs	r3, r2
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	3301      	adds	r3, #1
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	e007      	b.n	800bb18 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800bb08:	8afb      	ldrh	r3, [r7, #22]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	82fb      	strh	r3, [r7, #22]
 800bb0e:	8afa      	ldrh	r2, [r7, #22]
 800bb10:	893b      	ldrh	r3, [r7, #8]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d3db      	bcc.n	800bace <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3720      	adds	r7, #32
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	460b      	mov	r3, r1
 800bb30:	80fb      	strh	r3, [r7, #6]
 800bb32:	4613      	mov	r3, r2
 800bb34:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	891a      	ldrh	r2, [r3, #8]
 800bb3a:	88fb      	ldrh	r3, [r7, #6]
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	891b      	ldrh	r3, [r3, #8]
 800bb44:	4619      	mov	r1, r3
 800bb46:	88fa      	ldrh	r2, [r7, #6]
 800bb48:	88bb      	ldrh	r3, [r7, #4]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	4299      	cmp	r1, r3
 800bb4e:	db16      	blt.n	800bb7e <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800bb50:	88bb      	ldrh	r3, [r7, #4]
 800bb52:	82fb      	strh	r3, [r7, #22]
 800bb54:	e00f      	b.n	800bb76 <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800bb56:	88fb      	ldrh	r3, [r7, #6]
 800bb58:	8af9      	ldrh	r1, [r7, #22]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f7ff ff8a 	bl	800ba76 <pbuf_memcmp>
 800bb62:	4603      	mov	r3, r0
 800bb64:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800bb66:	8a7b      	ldrh	r3, [r7, #18]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d101      	bne.n	800bb70 <pbuf_memfind+0x50>
        return i;
 800bb6c:	8afb      	ldrh	r3, [r7, #22]
 800bb6e:	e008      	b.n	800bb82 <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800bb70:	8afb      	ldrh	r3, [r7, #22]
 800bb72:	3301      	adds	r3, #1
 800bb74:	82fb      	strh	r3, [r7, #22]
 800bb76:	8afa      	ldrh	r2, [r7, #22]
 800bb78:	8abb      	ldrh	r3, [r7, #20]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d9eb      	bls.n	800bb56 <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 800bb7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bb90:	f009 ff5a 	bl	8015a48 <rand>
 800bb94:	4603      	mov	r3, r0
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	4b01      	ldr	r3, [pc, #4]	; (800bbac <tcp_init+0x20>)
 800bba6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bba8:	bf00      	nop
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20000024 	.word	0x20000024

0800bbb0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	7d1b      	ldrb	r3, [r3, #20]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d105      	bne.n	800bbcc <tcp_free+0x1c>
 800bbc0:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <tcp_free+0x2c>)
 800bbc2:	22d4      	movs	r2, #212	; 0xd4
 800bbc4:	4906      	ldr	r1, [pc, #24]	; (800bbe0 <tcp_free+0x30>)
 800bbc6:	4807      	ldr	r0, [pc, #28]	; (800bbe4 <tcp_free+0x34>)
 800bbc8:	f009 feb0 	bl	801592c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bbcc:	6879      	ldr	r1, [r7, #4]
 800bbce:	2001      	movs	r0, #1
 800bbd0:	f7fe fda0 	bl	800a714 <memp_free>
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	08017968 	.word	0x08017968
 800bbe0:	08017998 	.word	0x08017998
 800bbe4:	080179ac 	.word	0x080179ac

0800bbe8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	7d1b      	ldrb	r3, [r3, #20]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d105      	bne.n	800bc04 <tcp_free_listen+0x1c>
 800bbf8:	4b06      	ldr	r3, [pc, #24]	; (800bc14 <tcp_free_listen+0x2c>)
 800bbfa:	22df      	movs	r2, #223	; 0xdf
 800bbfc:	4906      	ldr	r1, [pc, #24]	; (800bc18 <tcp_free_listen+0x30>)
 800bbfe:	4807      	ldr	r0, [pc, #28]	; (800bc1c <tcp_free_listen+0x34>)
 800bc00:	f009 fe94 	bl	801592c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	2002      	movs	r0, #2
 800bc08:	f7fe fd84 	bl	800a714 <memp_free>
}
 800bc0c:	bf00      	nop
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	08017968 	.word	0x08017968
 800bc18:	080179d4 	.word	0x080179d4
 800bc1c:	080179ac 	.word	0x080179ac

0800bc20 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bc24:	f000 fea2 	bl	800c96c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bc28:	4b07      	ldr	r3, [pc, #28]	; (800bc48 <tcp_tmr+0x28>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <tcp_tmr+0x28>)
 800bc32:	701a      	strb	r2, [r3, #0]
 800bc34:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <tcp_tmr+0x28>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bc40:	f000 fb54 	bl	800c2ec <tcp_slowtmr>
  }
}
 800bc44:	bf00      	nop
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	2002e65d 	.word	0x2002e65d

0800bc4c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d105      	bne.n	800bc68 <tcp_remove_listener+0x1c>
 800bc5c:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <tcp_remove_listener+0x48>)
 800bc5e:	22ff      	movs	r2, #255	; 0xff
 800bc60:	490d      	ldr	r1, [pc, #52]	; (800bc98 <tcp_remove_listener+0x4c>)
 800bc62:	480e      	ldr	r0, [pc, #56]	; (800bc9c <tcp_remove_listener+0x50>)
 800bc64:	f009 fe62 	bl	801592c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e00a      	b.n	800bc84 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d102      	bne.n	800bc7e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1f1      	bne.n	800bc6e <tcp_remove_listener+0x22>
    }
  }
}
 800bc8a:	bf00      	nop
 800bc8c:	bf00      	nop
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	08017968 	.word	0x08017968
 800bc98:	080179f0 	.word	0x080179f0
 800bc9c:	080179ac 	.word	0x080179ac

0800bca0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d106      	bne.n	800bcbc <tcp_listen_closed+0x1c>
 800bcae:	4b14      	ldr	r3, [pc, #80]	; (800bd00 <tcp_listen_closed+0x60>)
 800bcb0:	f240 1211 	movw	r2, #273	; 0x111
 800bcb4:	4913      	ldr	r1, [pc, #76]	; (800bd04 <tcp_listen_closed+0x64>)
 800bcb6:	4814      	ldr	r0, [pc, #80]	; (800bd08 <tcp_listen_closed+0x68>)
 800bcb8:	f009 fe38 	bl	801592c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	7d1b      	ldrb	r3, [r3, #20]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d006      	beq.n	800bcd2 <tcp_listen_closed+0x32>
 800bcc4:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <tcp_listen_closed+0x60>)
 800bcc6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bcca:	4910      	ldr	r1, [pc, #64]	; (800bd0c <tcp_listen_closed+0x6c>)
 800bccc:	480e      	ldr	r0, [pc, #56]	; (800bd08 <tcp_listen_closed+0x68>)
 800bcce:	f009 fe2d 	bl	801592c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	e00b      	b.n	800bcf0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bcd8:	4a0d      	ldr	r2, [pc, #52]	; (800bd10 <tcp_listen_closed+0x70>)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff ffb1 	bl	800bc4c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	3301      	adds	r3, #1
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	d9f0      	bls.n	800bcd8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bcf6:	bf00      	nop
 800bcf8:	bf00      	nop
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	08017968 	.word	0x08017968
 800bd04:	08017a18 	.word	0x08017a18
 800bd08:	080179ac 	.word	0x080179ac
 800bd0c:	08017a24 	.word	0x08017a24
 800bd10:	08019c90 	.word	0x08019c90

0800bd14 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bd14:	b5b0      	push	{r4, r5, r7, lr}
 800bd16:	b088      	sub	sp, #32
 800bd18:	af04      	add	r7, sp, #16
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d106      	bne.n	800bd34 <tcp_close_shutdown+0x20>
 800bd26:	4b63      	ldr	r3, [pc, #396]	; (800beb4 <tcp_close_shutdown+0x1a0>)
 800bd28:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bd2c:	4962      	ldr	r1, [pc, #392]	; (800beb8 <tcp_close_shutdown+0x1a4>)
 800bd2e:	4863      	ldr	r0, [pc, #396]	; (800bebc <tcp_close_shutdown+0x1a8>)
 800bd30:	f009 fdfc 	bl	801592c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bd34:	78fb      	ldrb	r3, [r7, #3]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d066      	beq.n	800be08 <tcp_close_shutdown+0xf4>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7d1b      	ldrb	r3, [r3, #20]
 800bd3e:	2b04      	cmp	r3, #4
 800bd40:	d003      	beq.n	800bd4a <tcp_close_shutdown+0x36>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	7d1b      	ldrb	r3, [r3, #20]
 800bd46:	2b07      	cmp	r3, #7
 800bd48:	d15e      	bne.n	800be08 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d104      	bne.n	800bd5c <tcp_close_shutdown+0x48>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bd5a:	d055      	beq.n	800be08 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	8b5b      	ldrh	r3, [r3, #26]
 800bd60:	f003 0310 	and.w	r3, r3, #16
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <tcp_close_shutdown+0x62>
 800bd68:	4b52      	ldr	r3, [pc, #328]	; (800beb4 <tcp_close_shutdown+0x1a0>)
 800bd6a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bd6e:	4954      	ldr	r1, [pc, #336]	; (800bec0 <tcp_close_shutdown+0x1ac>)
 800bd70:	4852      	ldr	r0, [pc, #328]	; (800bebc <tcp_close_shutdown+0x1a8>)
 800bd72:	f009 fddb 	bl	801592c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bd7e:	687d      	ldr	r5, [r7, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	8ad2      	ldrh	r2, [r2, #22]
 800bd88:	6879      	ldr	r1, [r7, #4]
 800bd8a:	8b09      	ldrh	r1, [r1, #24]
 800bd8c:	9102      	str	r1, [sp, #8]
 800bd8e:	9201      	str	r2, [sp, #4]
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	462b      	mov	r3, r5
 800bd94:	4622      	mov	r2, r4
 800bd96:	4601      	mov	r1, r0
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f004 fe91 	bl	8010ac0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f001 f8c6 	bl	800cf30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bda4:	4b47      	ldr	r3, [pc, #284]	; (800bec4 <tcp_close_shutdown+0x1b0>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d105      	bne.n	800bdba <tcp_close_shutdown+0xa6>
 800bdae:	4b45      	ldr	r3, [pc, #276]	; (800bec4 <tcp_close_shutdown+0x1b0>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	4a43      	ldr	r2, [pc, #268]	; (800bec4 <tcp_close_shutdown+0x1b0>)
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	e013      	b.n	800bde2 <tcp_close_shutdown+0xce>
 800bdba:	4b42      	ldr	r3, [pc, #264]	; (800bec4 <tcp_close_shutdown+0x1b0>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	60fb      	str	r3, [r7, #12]
 800bdc0:	e00c      	b.n	800bddc <tcp_close_shutdown+0xc8>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d104      	bne.n	800bdd6 <tcp_close_shutdown+0xc2>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	68da      	ldr	r2, [r3, #12]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	60da      	str	r2, [r3, #12]
 800bdd4:	e005      	b.n	800bde2 <tcp_close_shutdown+0xce>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1ef      	bne.n	800bdc2 <tcp_close_shutdown+0xae>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	60da      	str	r2, [r3, #12]
 800bde8:	4b37      	ldr	r3, [pc, #220]	; (800bec8 <tcp_close_shutdown+0x1b4>)
 800bdea:	2201      	movs	r2, #1
 800bdec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bdee:	4b37      	ldr	r3, [pc, #220]	; (800becc <tcp_close_shutdown+0x1b8>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d102      	bne.n	800bdfe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bdf8:	f003 fd5e 	bl	800f8b8 <tcp_trigger_input_pcb_close>
 800bdfc:	e002      	b.n	800be04 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff fed6 	bl	800bbb0 <tcp_free>
      }
      return ERR_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	e050      	b.n	800beaa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	7d1b      	ldrb	r3, [r3, #20]
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d03b      	beq.n	800be88 <tcp_close_shutdown+0x174>
 800be10:	2b02      	cmp	r3, #2
 800be12:	dc44      	bgt.n	800be9e <tcp_close_shutdown+0x18a>
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <tcp_close_shutdown+0x10a>
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d02a      	beq.n	800be72 <tcp_close_shutdown+0x15e>
 800be1c:	e03f      	b.n	800be9e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	8adb      	ldrh	r3, [r3, #22]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d021      	beq.n	800be6a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800be26:	4b2a      	ldr	r3, [pc, #168]	; (800bed0 <tcp_close_shutdown+0x1bc>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d105      	bne.n	800be3c <tcp_close_shutdown+0x128>
 800be30:	4b27      	ldr	r3, [pc, #156]	; (800bed0 <tcp_close_shutdown+0x1bc>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	4a26      	ldr	r2, [pc, #152]	; (800bed0 <tcp_close_shutdown+0x1bc>)
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	e013      	b.n	800be64 <tcp_close_shutdown+0x150>
 800be3c:	4b24      	ldr	r3, [pc, #144]	; (800bed0 <tcp_close_shutdown+0x1bc>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	60bb      	str	r3, [r7, #8]
 800be42:	e00c      	b.n	800be5e <tcp_close_shutdown+0x14a>
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d104      	bne.n	800be58 <tcp_close_shutdown+0x144>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	68da      	ldr	r2, [r3, #12]
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	60da      	str	r2, [r3, #12]
 800be56:	e005      	b.n	800be64 <tcp_close_shutdown+0x150>
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	60bb      	str	r3, [r7, #8]
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1ef      	bne.n	800be44 <tcp_close_shutdown+0x130>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7ff fea0 	bl	800bbb0 <tcp_free>
      break;
 800be70:	e01a      	b.n	800bea8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff ff14 	bl	800bca0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4816      	ldr	r0, [pc, #88]	; (800bed4 <tcp_close_shutdown+0x1c0>)
 800be7c:	f001 f8a8 	bl	800cfd0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff feb1 	bl	800bbe8 <tcp_free_listen>
      break;
 800be86:	e00f      	b.n	800bea8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be88:	6879      	ldr	r1, [r7, #4]
 800be8a:	480e      	ldr	r0, [pc, #56]	; (800bec4 <tcp_close_shutdown+0x1b0>)
 800be8c:	f001 f8a0 	bl	800cfd0 <tcp_pcb_remove>
 800be90:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <tcp_close_shutdown+0x1b4>)
 800be92:	2201      	movs	r2, #1
 800be94:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff fe8a 	bl	800bbb0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800be9c:	e004      	b.n	800bea8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f81a 	bl	800bed8 <tcp_close_shutdown_fin>
 800bea4:	4603      	mov	r3, r0
 800bea6:	e000      	b.n	800beaa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bdb0      	pop	{r4, r5, r7, pc}
 800beb2:	bf00      	nop
 800beb4:	08017968 	.word	0x08017968
 800beb8:	08017a3c 	.word	0x08017a3c
 800bebc:	080179ac 	.word	0x080179ac
 800bec0:	08017a5c 	.word	0x08017a5c
 800bec4:	2002e654 	.word	0x2002e654
 800bec8:	2002e65c 	.word	0x2002e65c
 800becc:	2002e694 	.word	0x2002e694
 800bed0:	2002e64c 	.word	0x2002e64c
 800bed4:	2002e650 	.word	0x2002e650

0800bed8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <tcp_close_shutdown_fin+0x1c>
 800bee6:	4b2e      	ldr	r3, [pc, #184]	; (800bfa0 <tcp_close_shutdown_fin+0xc8>)
 800bee8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800beec:	492d      	ldr	r1, [pc, #180]	; (800bfa4 <tcp_close_shutdown_fin+0xcc>)
 800beee:	482e      	ldr	r0, [pc, #184]	; (800bfa8 <tcp_close_shutdown_fin+0xd0>)
 800bef0:	f009 fd1c 	bl	801592c <iprintf>

  switch (pcb->state) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7d1b      	ldrb	r3, [r3, #20]
 800bef8:	2b07      	cmp	r3, #7
 800befa:	d020      	beq.n	800bf3e <tcp_close_shutdown_fin+0x66>
 800befc:	2b07      	cmp	r3, #7
 800befe:	dc2b      	bgt.n	800bf58 <tcp_close_shutdown_fin+0x80>
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d002      	beq.n	800bf0a <tcp_close_shutdown_fin+0x32>
 800bf04:	2b04      	cmp	r3, #4
 800bf06:	d00d      	beq.n	800bf24 <tcp_close_shutdown_fin+0x4c>
 800bf08:	e026      	b.n	800bf58 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f003 fee6 	bl	800fcdc <tcp_send_fin>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d11f      	bne.n	800bf5c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2205      	movs	r2, #5
 800bf20:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf22:	e01b      	b.n	800bf5c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f003 fed9 	bl	800fcdc <tcp_send_fin>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d114      	bne.n	800bf60 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2205      	movs	r2, #5
 800bf3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf3c:	e010      	b.n	800bf60 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f003 fecc 	bl	800fcdc <tcp_send_fin>
 800bf44:	4603      	mov	r3, r0
 800bf46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d109      	bne.n	800bf64 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2209      	movs	r2, #9
 800bf54:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf56:	e005      	b.n	800bf64 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	e01c      	b.n	800bf96 <tcp_close_shutdown_fin+0xbe>
      break;
 800bf5c:	bf00      	nop
 800bf5e:	e002      	b.n	800bf66 <tcp_close_shutdown_fin+0x8e>
      break;
 800bf60:	bf00      	nop
 800bf62:	e000      	b.n	800bf66 <tcp_close_shutdown_fin+0x8e>
      break;
 800bf64:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bf66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d103      	bne.n	800bf76 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f003 fff2 	bl	800ff58 <tcp_output>
 800bf74:	e00d      	b.n	800bf92 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bf76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7e:	d108      	bne.n	800bf92 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	8b5b      	ldrh	r3, [r3, #26]
 800bf84:	f043 0308 	orr.w	r3, r3, #8
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e001      	b.n	800bf96 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bf92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	08017968 	.word	0x08017968
 800bfa4:	08017a18 	.word	0x08017a18
 800bfa8:	080179ac 	.word	0x080179ac

0800bfac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d109      	bne.n	800bfce <tcp_close+0x22>
 800bfba:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <tcp_close+0x4c>)
 800bfbc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bfc0:	490e      	ldr	r1, [pc, #56]	; (800bffc <tcp_close+0x50>)
 800bfc2:	480f      	ldr	r0, [pc, #60]	; (800c000 <tcp_close+0x54>)
 800bfc4:	f009 fcb2 	bl	801592c <iprintf>
 800bfc8:	f06f 030f 	mvn.w	r3, #15
 800bfcc:	e00f      	b.n	800bfee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7d1b      	ldrb	r3, [r3, #20]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d006      	beq.n	800bfe4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	8b5b      	ldrh	r3, [r3, #26]
 800bfda:	f043 0310 	orr.w	r3, r3, #16
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff fe94 	bl	800bd14 <tcp_close_shutdown>
 800bfec:	4603      	mov	r3, r0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	08017968 	.word	0x08017968
 800bffc:	08017a78 	.word	0x08017a78
 800c000:	080179ac 	.word	0x080179ac

0800c004 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08e      	sub	sp, #56	; 0x38
 800c008:	af04      	add	r7, sp, #16
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d107      	bne.n	800c024 <tcp_abandon+0x20>
 800c014:	4b52      	ldr	r3, [pc, #328]	; (800c160 <tcp_abandon+0x15c>)
 800c016:	f240 223d 	movw	r2, #573	; 0x23d
 800c01a:	4952      	ldr	r1, [pc, #328]	; (800c164 <tcp_abandon+0x160>)
 800c01c:	4852      	ldr	r0, [pc, #328]	; (800c168 <tcp_abandon+0x164>)
 800c01e:	f009 fc85 	bl	801592c <iprintf>
 800c022:	e099      	b.n	800c158 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	7d1b      	ldrb	r3, [r3, #20]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d106      	bne.n	800c03a <tcp_abandon+0x36>
 800c02c:	4b4c      	ldr	r3, [pc, #304]	; (800c160 <tcp_abandon+0x15c>)
 800c02e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c032:	494e      	ldr	r1, [pc, #312]	; (800c16c <tcp_abandon+0x168>)
 800c034:	484c      	ldr	r0, [pc, #304]	; (800c168 <tcp_abandon+0x164>)
 800c036:	f009 fc79 	bl	801592c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7d1b      	ldrb	r3, [r3, #20]
 800c03e:	2b0a      	cmp	r3, #10
 800c040:	d107      	bne.n	800c052 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c042:	6879      	ldr	r1, [r7, #4]
 800c044:	484a      	ldr	r0, [pc, #296]	; (800c170 <tcp_abandon+0x16c>)
 800c046:	f000 ffc3 	bl	800cfd0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff fdb0 	bl	800bbb0 <tcp_free>
 800c050:	e082      	b.n	800c158 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c05e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c06c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	7d1b      	ldrb	r3, [r3, #20]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d126      	bne.n	800c0ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	8adb      	ldrh	r3, [r3, #22]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d02e      	beq.n	800c0e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c084:	4b3b      	ldr	r3, [pc, #236]	; (800c174 <tcp_abandon+0x170>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d105      	bne.n	800c09a <tcp_abandon+0x96>
 800c08e:	4b39      	ldr	r3, [pc, #228]	; (800c174 <tcp_abandon+0x170>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	4a37      	ldr	r2, [pc, #220]	; (800c174 <tcp_abandon+0x170>)
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	e013      	b.n	800c0c2 <tcp_abandon+0xbe>
 800c09a:	4b36      	ldr	r3, [pc, #216]	; (800c174 <tcp_abandon+0x170>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	61fb      	str	r3, [r7, #28]
 800c0a0:	e00c      	b.n	800c0bc <tcp_abandon+0xb8>
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d104      	bne.n	800c0b6 <tcp_abandon+0xb2>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68da      	ldr	r2, [r3, #12]
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	60da      	str	r2, [r3, #12]
 800c0b4:	e005      	b.n	800c0c2 <tcp_abandon+0xbe>
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	61fb      	str	r3, [r7, #28]
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1ef      	bne.n	800c0a2 <tcp_abandon+0x9e>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	60da      	str	r2, [r3, #12]
 800c0c8:	e00b      	b.n	800c0e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	8adb      	ldrh	r3, [r3, #22]
 800c0d2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	4828      	ldr	r0, [pc, #160]	; (800c178 <tcp_abandon+0x174>)
 800c0d8:	f000 ff7a 	bl	800cfd0 <tcp_pcb_remove>
 800c0dc:	4b27      	ldr	r3, [pc, #156]	; (800c17c <tcp_abandon+0x178>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fd1c 	bl	800cb2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d004      	beq.n	800c106 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c100:	4618      	mov	r0, r3
 800c102:	f000 fd13 	bl	800cb2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d004      	beq.n	800c118 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fd0a 	bl	800cb2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00e      	beq.n	800c13c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3304      	adds	r3, #4
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	8b12      	ldrh	r2, [r2, #24]
 800c128:	9202      	str	r2, [sp, #8]
 800c12a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c12c:	9201      	str	r2, [sp, #4]
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	460b      	mov	r3, r1
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	69b9      	ldr	r1, [r7, #24]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f004 fcc2 	bl	8010ac0 <tcp_rst>
    }
    last_state = pcb->state;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	7d1b      	ldrb	r3, [r3, #20]
 800c140:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff fd34 	bl	800bbb0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d004      	beq.n	800c158 <tcp_abandon+0x154>
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	f06f 010c 	mvn.w	r1, #12
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	4798      	blx	r3
  }
}
 800c158:	3728      	adds	r7, #40	; 0x28
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	08017968 	.word	0x08017968
 800c164:	08017aac 	.word	0x08017aac
 800c168:	080179ac 	.word	0x080179ac
 800c16c:	08017ac8 	.word	0x08017ac8
 800c170:	2002e658 	.word	0x2002e658
 800c174:	2002e64c 	.word	0x2002e64c
 800c178:	2002e654 	.word	0x2002e654
 800c17c:	2002e65c 	.word	0x2002e65c

0800c180 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c188:	2101      	movs	r1, #1
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7ff ff3a 	bl	800c004 <tcp_abandon>
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <tcp_update_rcv_ann_wnd+0x1c>
 800c1a6:	4b25      	ldr	r3, [pc, #148]	; (800c23c <tcp_update_rcv_ann_wnd+0xa4>)
 800c1a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c1ac:	4924      	ldr	r1, [pc, #144]	; (800c240 <tcp_update_rcv_ann_wnd+0xa8>)
 800c1ae:	4825      	ldr	r0, [pc, #148]	; (800c244 <tcp_update_rcv_ann_wnd+0xac>)
 800c1b0:	f009 fbbc 	bl	801592c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c1bc:	4413      	add	r3, r2
 800c1be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c1c8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c1cc:	bf28      	it	cs
 800c1ce:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c1d2:	b292      	uxth	r2, r2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	db08      	blt.n	800c1f0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	e020      	b.n	800c232 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	dd03      	ble.n	800c206 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c204:	e014      	b.n	800c230 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c218:	d306      	bcc.n	800c228 <tcp_update_rcv_ann_wnd+0x90>
 800c21a:	4b08      	ldr	r3, [pc, #32]	; (800c23c <tcp_update_rcv_ann_wnd+0xa4>)
 800c21c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c220:	4909      	ldr	r1, [pc, #36]	; (800c248 <tcp_update_rcv_ann_wnd+0xb0>)
 800c222:	4808      	ldr	r0, [pc, #32]	; (800c244 <tcp_update_rcv_ann_wnd+0xac>)
 800c224:	f009 fb82 	bl	801592c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c230:	2300      	movs	r3, #0
  }
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	08017968 	.word	0x08017968
 800c240:	08017bc4 	.word	0x08017bc4
 800c244:	080179ac 	.word	0x080179ac
 800c248:	08017be8 	.word	0x08017be8

0800c24c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d107      	bne.n	800c26e <tcp_recved+0x22>
 800c25e:	4b1f      	ldr	r3, [pc, #124]	; (800c2dc <tcp_recved+0x90>)
 800c260:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c264:	491e      	ldr	r1, [pc, #120]	; (800c2e0 <tcp_recved+0x94>)
 800c266:	481f      	ldr	r0, [pc, #124]	; (800c2e4 <tcp_recved+0x98>)
 800c268:	f009 fb60 	bl	801592c <iprintf>
 800c26c:	e032      	b.n	800c2d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	7d1b      	ldrb	r3, [r3, #20]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d106      	bne.n	800c284 <tcp_recved+0x38>
 800c276:	4b19      	ldr	r3, [pc, #100]	; (800c2dc <tcp_recved+0x90>)
 800c278:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c27c:	491a      	ldr	r1, [pc, #104]	; (800c2e8 <tcp_recved+0x9c>)
 800c27e:	4819      	ldr	r0, [pc, #100]	; (800c2e4 <tcp_recved+0x98>)
 800c280:	f009 fb54 	bl	801592c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c288:	887b      	ldrh	r3, [r7, #2]
 800c28a:	4413      	add	r3, r2
 800c28c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c28e:	89fb      	ldrh	r3, [r7, #14]
 800c290:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c294:	d804      	bhi.n	800c2a0 <tcp_recved+0x54>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c29a:	89fa      	ldrh	r2, [r7, #14]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d204      	bcs.n	800c2aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c2a6:	851a      	strh	r2, [r3, #40]	; 0x28
 800c2a8:	e002      	b.n	800c2b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	89fa      	ldrh	r2, [r7, #14]
 800c2ae:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff ff71 	bl	800c198 <tcp_update_rcv_ann_wnd>
 800c2b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c2be:	d309      	bcc.n	800c2d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	8b5b      	ldrh	r3, [r3, #26]
 800c2c4:	f043 0302 	orr.w	r3, r3, #2
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f003 fe42 	bl	800ff58 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	08017968 	.word	0x08017968
 800c2e0:	08017c04 	.word	0x08017c04
 800c2e4:	080179ac 	.word	0x080179ac
 800c2e8:	08017c1c 	.word	0x08017c1c

0800c2ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c2ec:	b5b0      	push	{r4, r5, r7, lr}
 800c2ee:	b090      	sub	sp, #64	; 0x40
 800c2f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c2f8:	4b94      	ldr	r3, [pc, #592]	; (800c54c <tcp_slowtmr+0x260>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	4a93      	ldr	r2, [pc, #588]	; (800c54c <tcp_slowtmr+0x260>)
 800c300:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c302:	4b93      	ldr	r3, [pc, #588]	; (800c550 <tcp_slowtmr+0x264>)
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	3301      	adds	r3, #1
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	4b91      	ldr	r3, [pc, #580]	; (800c550 <tcp_slowtmr+0x264>)
 800c30c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c312:	4b90      	ldr	r3, [pc, #576]	; (800c554 <tcp_slowtmr+0x268>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c318:	e29d      	b.n	800c856 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31c:	7d1b      	ldrb	r3, [r3, #20]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d106      	bne.n	800c330 <tcp_slowtmr+0x44>
 800c322:	4b8d      	ldr	r3, [pc, #564]	; (800c558 <tcp_slowtmr+0x26c>)
 800c324:	f240 42be 	movw	r2, #1214	; 0x4be
 800c328:	498c      	ldr	r1, [pc, #560]	; (800c55c <tcp_slowtmr+0x270>)
 800c32a:	488d      	ldr	r0, [pc, #564]	; (800c560 <tcp_slowtmr+0x274>)
 800c32c:	f009 fafe 	bl	801592c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	7d1b      	ldrb	r3, [r3, #20]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d106      	bne.n	800c346 <tcp_slowtmr+0x5a>
 800c338:	4b87      	ldr	r3, [pc, #540]	; (800c558 <tcp_slowtmr+0x26c>)
 800c33a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c33e:	4989      	ldr	r1, [pc, #548]	; (800c564 <tcp_slowtmr+0x278>)
 800c340:	4887      	ldr	r0, [pc, #540]	; (800c560 <tcp_slowtmr+0x274>)
 800c342:	f009 faf3 	bl	801592c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	7d1b      	ldrb	r3, [r3, #20]
 800c34a:	2b0a      	cmp	r3, #10
 800c34c:	d106      	bne.n	800c35c <tcp_slowtmr+0x70>
 800c34e:	4b82      	ldr	r3, [pc, #520]	; (800c558 <tcp_slowtmr+0x26c>)
 800c350:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c354:	4984      	ldr	r1, [pc, #528]	; (800c568 <tcp_slowtmr+0x27c>)
 800c356:	4882      	ldr	r0, [pc, #520]	; (800c560 <tcp_slowtmr+0x274>)
 800c358:	f009 fae8 	bl	801592c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35e:	7f9a      	ldrb	r2, [r3, #30]
 800c360:	4b7b      	ldr	r3, [pc, #492]	; (800c550 <tcp_slowtmr+0x264>)
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	d105      	bne.n	800c374 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c372:	e270      	b.n	800c856 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c374:	4b76      	ldr	r3, [pc, #472]	; (800c550 <tcp_slowtmr+0x264>)
 800c376:	781a      	ldrb	r2, [r3, #0]
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38a:	7d1b      	ldrb	r3, [r3, #20]
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d10a      	bne.n	800c3a6 <tcp_slowtmr+0xba>
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c396:	2b05      	cmp	r3, #5
 800c398:	d905      	bls.n	800c3a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c39a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c39e:	3301      	adds	r3, #1
 800c3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3a4:	e11e      	b.n	800c5e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c3ac:	2b0b      	cmp	r3, #11
 800c3ae:	d905      	bls.n	800c3bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3ba:	e113      	b.n	800c5e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d075      	beq.n	800c4b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d006      	beq.n	800c3dc <tcp_slowtmr+0xf0>
 800c3ce:	4b62      	ldr	r3, [pc, #392]	; (800c558 <tcp_slowtmr+0x26c>)
 800c3d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c3d4:	4965      	ldr	r1, [pc, #404]	; (800c56c <tcp_slowtmr+0x280>)
 800c3d6:	4862      	ldr	r0, [pc, #392]	; (800c560 <tcp_slowtmr+0x274>)
 800c3d8:	f009 faa8 	bl	801592c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d106      	bne.n	800c3f2 <tcp_slowtmr+0x106>
 800c3e4:	4b5c      	ldr	r3, [pc, #368]	; (800c558 <tcp_slowtmr+0x26c>)
 800c3e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c3ea:	4961      	ldr	r1, [pc, #388]	; (800c570 <tcp_slowtmr+0x284>)
 800c3ec:	485c      	ldr	r0, [pc, #368]	; (800c560 <tcp_slowtmr+0x274>)
 800c3ee:	f009 fa9d 	bl	801592c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c3f8:	2b0b      	cmp	r3, #11
 800c3fa:	d905      	bls.n	800c408 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c400:	3301      	adds	r3, #1
 800c402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c406:	e0ed      	b.n	800c5e4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c40e:	3b01      	subs	r3, #1
 800c410:	4a58      	ldr	r2, [pc, #352]	; (800c574 <tcp_slowtmr+0x288>)
 800c412:	5cd3      	ldrb	r3, [r2, r3]
 800c414:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c41c:	7c7a      	ldrb	r2, [r7, #17]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d907      	bls.n	800c432 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c424:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c428:	3301      	adds	r3, #1
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c438:	7c7a      	ldrb	r2, [r7, #17]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	f200 80d2 	bhi.w	800c5e4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c440:	2301      	movs	r3, #1
 800c442:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d108      	bne.n	800c460 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c44e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c450:	f004 fc2a 	bl	8010ca8 <tcp_zero_window_probe>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d014      	beq.n	800c484 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c45a:	2300      	movs	r3, #0
 800c45c:	623b      	str	r3, [r7, #32]
 800c45e:	e011      	b.n	800c484 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c466:	4619      	mov	r1, r3
 800c468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c46a:	f003 faef 	bl	800fa4c <tcp_split_unsent_seg>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d107      	bne.n	800c484 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c476:	f003 fd6f 	bl	800ff58 <tcp_output>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c484:	6a3b      	ldr	r3, [r7, #32]
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 80ac 	beq.w	800c5e4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c496:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c49a:	2b06      	cmp	r3, #6
 800c49c:	f200 80a2 	bhi.w	800c5e4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c4b0:	e098      	b.n	800c5e4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	db0f      	blt.n	800c4dc <tcp_slowtmr+0x1f0>
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c4c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d008      	beq.n	800c4dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	b21a      	sxth	r2, r3
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	db7b      	blt.n	800c5e4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c4ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ee:	f004 f825 	bl	801053c <tcp_rexmit_rto_prepare>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d007      	beq.n	800c508 <tcp_slowtmr+0x21c>
 800c4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d171      	bne.n	800c5e4 <tcp_slowtmr+0x2f8>
 800c500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d06d      	beq.n	800c5e4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	7d1b      	ldrb	r3, [r3, #20]
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d03a      	beq.n	800c586 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c516:	2b0c      	cmp	r3, #12
 800c518:	bf28      	it	cs
 800c51a:	230c      	movcs	r3, #12
 800c51c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c520:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c524:	10db      	asrs	r3, r3, #3
 800c526:	b21b      	sxth	r3, r3
 800c528:	461a      	mov	r2, r3
 800c52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c530:	4413      	add	r3, r2
 800c532:	7efa      	ldrb	r2, [r7, #27]
 800c534:	4910      	ldr	r1, [pc, #64]	; (800c578 <tcp_slowtmr+0x28c>)
 800c536:	5c8a      	ldrb	r2, [r1, r2]
 800c538:	4093      	lsls	r3, r2
 800c53a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c542:	4293      	cmp	r3, r2
 800c544:	dc1a      	bgt.n	800c57c <tcp_slowtmr+0x290>
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	b21a      	sxth	r2, r3
 800c54a:	e019      	b.n	800c580 <tcp_slowtmr+0x294>
 800c54c:	2002e648 	.word	0x2002e648
 800c550:	2002e65e 	.word	0x2002e65e
 800c554:	2002e654 	.word	0x2002e654
 800c558:	08017968 	.word	0x08017968
 800c55c:	08017cac 	.word	0x08017cac
 800c560:	080179ac 	.word	0x080179ac
 800c564:	08017cd8 	.word	0x08017cd8
 800c568:	08017d04 	.word	0x08017d04
 800c56c:	08017d34 	.word	0x08017d34
 800c570:	08017d68 	.word	0x08017d68
 800c574:	08019c88 	.word	0x08019c88
 800c578:	08019c78 	.word	0x08019c78
 800c57c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c582:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	2200      	movs	r2, #0
 800c58a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c598:	4293      	cmp	r3, r2
 800c59a:	bf28      	it	cs
 800c59c:	4613      	movcs	r3, r2
 800c59e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c5a0:	8a7b      	ldrh	r3, [r7, #18]
 800c5a2:	085b      	lsrs	r3, r3, #1
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d206      	bcs.n	800c5cc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5c2:	005b      	lsls	r3, r3, #1
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c5de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5e0:	f004 f81c 	bl	801061c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e6:	7d1b      	ldrb	r3, [r3, #20]
 800c5e8:	2b06      	cmp	r3, #6
 800c5ea:	d111      	bne.n	800c610 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ee:	8b5b      	ldrh	r3, [r3, #26]
 800c5f0:	f003 0310 	and.w	r3, r3, #16
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00b      	beq.n	800c610 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5f8:	4b9c      	ldr	r3, [pc, #624]	; (800c86c <tcp_slowtmr+0x580>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	2b28      	cmp	r3, #40	; 0x28
 800c604:	d904      	bls.n	800c610 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c60a:	3301      	adds	r3, #1
 800c60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c612:	7a5b      	ldrb	r3, [r3, #9]
 800c614:	f003 0308 	and.w	r3, r3, #8
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d04a      	beq.n	800c6b2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c620:	2b04      	cmp	r3, #4
 800c622:	d003      	beq.n	800c62c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c626:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c628:	2b07      	cmp	r3, #7
 800c62a:	d142      	bne.n	800c6b2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c62c:	4b8f      	ldr	r3, [pc, #572]	; (800c86c <tcp_slowtmr+0x580>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c63c:	4b8c      	ldr	r3, [pc, #560]	; (800c870 <tcp_slowtmr+0x584>)
 800c63e:	440b      	add	r3, r1
 800c640:	498c      	ldr	r1, [pc, #560]	; (800c874 <tcp_slowtmr+0x588>)
 800c642:	fba1 1303 	umull	r1, r3, r1, r3
 800c646:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c648:	429a      	cmp	r2, r3
 800c64a:	d90a      	bls.n	800c662 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c650:	3301      	adds	r3, #1
 800c652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c656:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c65a:	3301      	adds	r3, #1
 800c65c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c660:	e027      	b.n	800c6b2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c662:	4b82      	ldr	r3, [pc, #520]	; (800c86c <tcp_slowtmr+0x580>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c678:	4618      	mov	r0, r3
 800c67a:	4b7f      	ldr	r3, [pc, #508]	; (800c878 <tcp_slowtmr+0x58c>)
 800c67c:	fb00 f303 	mul.w	r3, r0, r3
 800c680:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c682:	497c      	ldr	r1, [pc, #496]	; (800c874 <tcp_slowtmr+0x588>)
 800c684:	fba1 1303 	umull	r1, r3, r1, r3
 800c688:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d911      	bls.n	800c6b2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c68e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c690:	f004 faca 	bl	8010c28 <tcp_keepalive>
 800c694:	4603      	mov	r3, r0
 800c696:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c69a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d107      	bne.n	800c6b2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d011      	beq.n	800c6de <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c6ba:	4b6c      	ldr	r3, [pc, #432]	; (800c86c <tcp_slowtmr+0x580>)
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	1ad2      	subs	r2, r2, r3
 800c6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	440b      	add	r3, r1
 800c6d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d302      	bcc.n	800c6de <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6da:	f000 fddd 	bl	800d298 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e0:	7d1b      	ldrb	r3, [r3, #20]
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d10b      	bne.n	800c6fe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c6e6:	4b61      	ldr	r3, [pc, #388]	; (800c86c <tcp_slowtmr+0x580>)
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	6a1b      	ldr	r3, [r3, #32]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	2b28      	cmp	r3, #40	; 0x28
 800c6f2:	d904      	bls.n	800c6fe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	7d1b      	ldrb	r3, [r3, #20]
 800c702:	2b09      	cmp	r3, #9
 800c704:	d10b      	bne.n	800c71e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c706:	4b59      	ldr	r3, [pc, #356]	; (800c86c <tcp_slowtmr+0x580>)
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	2bf0      	cmp	r3, #240	; 0xf0
 800c712:	d904      	bls.n	800c71e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c718:	3301      	adds	r3, #1
 800c71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c71e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c722:	2b00      	cmp	r3, #0
 800c724:	d060      	beq.n	800c7e8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c72c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c72e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c730:	f000 fbfe 	bl	800cf30 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	2b00      	cmp	r3, #0
 800c738:	d010      	beq.n	800c75c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c73a:	4b50      	ldr	r3, [pc, #320]	; (800c87c <tcp_slowtmr+0x590>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c740:	429a      	cmp	r2, r3
 800c742:	d106      	bne.n	800c752 <tcp_slowtmr+0x466>
 800c744:	4b4e      	ldr	r3, [pc, #312]	; (800c880 <tcp_slowtmr+0x594>)
 800c746:	f240 526d 	movw	r2, #1389	; 0x56d
 800c74a:	494e      	ldr	r1, [pc, #312]	; (800c884 <tcp_slowtmr+0x598>)
 800c74c:	484e      	ldr	r0, [pc, #312]	; (800c888 <tcp_slowtmr+0x59c>)
 800c74e:	f009 f8ed 	bl	801592c <iprintf>
        prev->next = pcb->next;
 800c752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c754:	68da      	ldr	r2, [r3, #12]
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	60da      	str	r2, [r3, #12]
 800c75a:	e00f      	b.n	800c77c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c75c:	4b47      	ldr	r3, [pc, #284]	; (800c87c <tcp_slowtmr+0x590>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c762:	429a      	cmp	r2, r3
 800c764:	d006      	beq.n	800c774 <tcp_slowtmr+0x488>
 800c766:	4b46      	ldr	r3, [pc, #280]	; (800c880 <tcp_slowtmr+0x594>)
 800c768:	f240 5271 	movw	r2, #1393	; 0x571
 800c76c:	4947      	ldr	r1, [pc, #284]	; (800c88c <tcp_slowtmr+0x5a0>)
 800c76e:	4846      	ldr	r0, [pc, #280]	; (800c888 <tcp_slowtmr+0x59c>)
 800c770:	f009 f8dc 	bl	801592c <iprintf>
        tcp_active_pcbs = pcb->next;
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	4a40      	ldr	r2, [pc, #256]	; (800c87c <tcp_slowtmr+0x590>)
 800c77a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c77c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c780:	2b00      	cmp	r3, #0
 800c782:	d013      	beq.n	800c7ac <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c78c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	3304      	adds	r3, #4
 800c792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c794:	8ad2      	ldrh	r2, [r2, #22]
 800c796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c798:	8b09      	ldrh	r1, [r1, #24]
 800c79a:	9102      	str	r1, [sp, #8]
 800c79c:	9201      	str	r2, [sp, #4]
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	462b      	mov	r3, r5
 800c7a2:	4622      	mov	r2, r4
 800c7a4:	4601      	mov	r1, r0
 800c7a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7a8:	f004 f98a 	bl	8010ac0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	7d1b      	ldrb	r3, [r3, #20]
 800c7b6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c7c2:	6838      	ldr	r0, [r7, #0]
 800c7c4:	f7ff f9f4 	bl	800bbb0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c7c8:	4b31      	ldr	r3, [pc, #196]	; (800c890 <tcp_slowtmr+0x5a4>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d004      	beq.n	800c7de <tcp_slowtmr+0x4f2>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f06f 010c 	mvn.w	r1, #12
 800c7da:	68b8      	ldr	r0, [r7, #8]
 800c7dc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c7de:	4b2c      	ldr	r3, [pc, #176]	; (800c890 <tcp_slowtmr+0x5a4>)
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d037      	beq.n	800c856 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c7e6:	e592      	b.n	800c30e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f4:	7f1b      	ldrb	r3, [r3, #28]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	7f1a      	ldrb	r2, [r3, #28]
 800c802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c804:	7f5b      	ldrb	r3, [r3, #29]
 800c806:	429a      	cmp	r2, r3
 800c808:	d325      	bcc.n	800c856 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	2200      	movs	r2, #0
 800c80e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c810:	4b1f      	ldr	r3, [pc, #124]	; (800c890 <tcp_slowtmr+0x5a4>)
 800c812:	2200      	movs	r2, #0
 800c814:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00b      	beq.n	800c838 <tcp_slowtmr+0x54c>
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c828:	6912      	ldr	r2, [r2, #16]
 800c82a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c82c:	4610      	mov	r0, r2
 800c82e:	4798      	blx	r3
 800c830:	4603      	mov	r3, r0
 800c832:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c836:	e002      	b.n	800c83e <tcp_slowtmr+0x552>
 800c838:	2300      	movs	r3, #0
 800c83a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c83e:	4b14      	ldr	r3, [pc, #80]	; (800c890 <tcp_slowtmr+0x5a4>)
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d000      	beq.n	800c848 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c846:	e562      	b.n	800c30e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c848:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d102      	bne.n	800c856 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c852:	f003 fb81 	bl	800ff58 <tcp_output>
  while (pcb != NULL) {
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f47f ad5e 	bne.w	800c31a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c862:	4b0c      	ldr	r3, [pc, #48]	; (800c894 <tcp_slowtmr+0x5a8>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c868:	e069      	b.n	800c93e <tcp_slowtmr+0x652>
 800c86a:	bf00      	nop
 800c86c:	2002e648 	.word	0x2002e648
 800c870:	000a4cb8 	.word	0x000a4cb8
 800c874:	10624dd3 	.word	0x10624dd3
 800c878:	000124f8 	.word	0x000124f8
 800c87c:	2002e654 	.word	0x2002e654
 800c880:	08017968 	.word	0x08017968
 800c884:	08017da0 	.word	0x08017da0
 800c888:	080179ac 	.word	0x080179ac
 800c88c:	08017dcc 	.word	0x08017dcc
 800c890:	2002e65c 	.word	0x2002e65c
 800c894:	2002e658 	.word	0x2002e658
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	7d1b      	ldrb	r3, [r3, #20]
 800c89c:	2b0a      	cmp	r3, #10
 800c89e:	d006      	beq.n	800c8ae <tcp_slowtmr+0x5c2>
 800c8a0:	4b2b      	ldr	r3, [pc, #172]	; (800c950 <tcp_slowtmr+0x664>)
 800c8a2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c8a6:	492b      	ldr	r1, [pc, #172]	; (800c954 <tcp_slowtmr+0x668>)
 800c8a8:	482b      	ldr	r0, [pc, #172]	; (800c958 <tcp_slowtmr+0x66c>)
 800c8aa:	f009 f83f 	bl	801592c <iprintf>
    pcb_remove = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c8b4:	4b29      	ldr	r3, [pc, #164]	; (800c95c <tcp_slowtmr+0x670>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	6a1b      	ldr	r3, [r3, #32]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	2bf0      	cmp	r3, #240	; 0xf0
 800c8c0:	d904      	bls.n	800c8cc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c8c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d02f      	beq.n	800c934 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c8d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8d6:	f000 fb2b 	bl	800cf30 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d010      	beq.n	800c902 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c8e0:	4b1f      	ldr	r3, [pc, #124]	; (800c960 <tcp_slowtmr+0x674>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d106      	bne.n	800c8f8 <tcp_slowtmr+0x60c>
 800c8ea:	4b19      	ldr	r3, [pc, #100]	; (800c950 <tcp_slowtmr+0x664>)
 800c8ec:	f240 52af 	movw	r2, #1455	; 0x5af
 800c8f0:	491c      	ldr	r1, [pc, #112]	; (800c964 <tcp_slowtmr+0x678>)
 800c8f2:	4819      	ldr	r0, [pc, #100]	; (800c958 <tcp_slowtmr+0x66c>)
 800c8f4:	f009 f81a 	bl	801592c <iprintf>
        prev->next = pcb->next;
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	68da      	ldr	r2, [r3, #12]
 800c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fe:	60da      	str	r2, [r3, #12]
 800c900:	e00f      	b.n	800c922 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c902:	4b17      	ldr	r3, [pc, #92]	; (800c960 <tcp_slowtmr+0x674>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c908:	429a      	cmp	r2, r3
 800c90a:	d006      	beq.n	800c91a <tcp_slowtmr+0x62e>
 800c90c:	4b10      	ldr	r3, [pc, #64]	; (800c950 <tcp_slowtmr+0x664>)
 800c90e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c912:	4915      	ldr	r1, [pc, #84]	; (800c968 <tcp_slowtmr+0x67c>)
 800c914:	4810      	ldr	r0, [pc, #64]	; (800c958 <tcp_slowtmr+0x66c>)
 800c916:	f009 f809 	bl	801592c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	4a10      	ldr	r2, [pc, #64]	; (800c960 <tcp_slowtmr+0x674>)
 800c920:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c924:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c92c:	69f8      	ldr	r0, [r7, #28]
 800c92e:	f7ff f93f 	bl	800bbb0 <tcp_free>
 800c932:	e004      	b.n	800c93e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1a9      	bne.n	800c898 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c944:	bf00      	nop
 800c946:	bf00      	nop
 800c948:	3730      	adds	r7, #48	; 0x30
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bdb0      	pop	{r4, r5, r7, pc}
 800c94e:	bf00      	nop
 800c950:	08017968 	.word	0x08017968
 800c954:	08017df8 	.word	0x08017df8
 800c958:	080179ac 	.word	0x080179ac
 800c95c:	2002e648 	.word	0x2002e648
 800c960:	2002e658 	.word	0x2002e658
 800c964:	08017e28 	.word	0x08017e28
 800c968:	08017e50 	.word	0x08017e50

0800c96c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c972:	4b2d      	ldr	r3, [pc, #180]	; (800ca28 <tcp_fasttmr+0xbc>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	3301      	adds	r3, #1
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	4b2b      	ldr	r3, [pc, #172]	; (800ca28 <tcp_fasttmr+0xbc>)
 800c97c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c97e:	4b2b      	ldr	r3, [pc, #172]	; (800ca2c <tcp_fasttmr+0xc0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c984:	e048      	b.n	800ca18 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	7f9a      	ldrb	r2, [r3, #30]
 800c98a:	4b27      	ldr	r3, [pc, #156]	; (800ca28 <tcp_fasttmr+0xbc>)
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d03f      	beq.n	800ca12 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c992:	4b25      	ldr	r3, [pc, #148]	; (800ca28 <tcp_fasttmr+0xbc>)
 800c994:	781a      	ldrb	r2, [r3, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	8b5b      	ldrh	r3, [r3, #26]
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d010      	beq.n	800c9c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	8b5b      	ldrh	r3, [r3, #26]
 800c9aa:	f043 0302 	orr.w	r3, r3, #2
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f003 facf 	bl	800ff58 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	8b5b      	ldrh	r3, [r3, #26]
 800c9be:	f023 0303 	bic.w	r3, r3, #3
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	8b5b      	ldrh	r3, [r3, #26]
 800c9cc:	f003 0308 	and.w	r3, r3, #8
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d009      	beq.n	800c9e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	8b5b      	ldrh	r3, [r3, #26]
 800c9d8:	f023 0308 	bic.w	r3, r3, #8
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff fa78 	bl	800bed8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00a      	beq.n	800ca0c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c9f6:	4b0e      	ldr	r3, [pc, #56]	; (800ca30 <tcp_fasttmr+0xc4>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f819 	bl	800ca34 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ca02:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <tcp_fasttmr+0xc4>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d000      	beq.n	800ca0c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ca0a:	e7b8      	b.n	800c97e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	607b      	str	r3, [r7, #4]
 800ca10:	e002      	b.n	800ca18 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1b3      	bne.n	800c986 <tcp_fasttmr+0x1a>
    }
  }
}
 800ca1e:	bf00      	nop
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	2002e65e 	.word	0x2002e65e
 800ca2c:	2002e654 	.word	0x2002e654
 800ca30:	2002e65c 	.word	0x2002e65c

0800ca34 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ca34:	b590      	push	{r4, r7, lr}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d109      	bne.n	800ca56 <tcp_process_refused_data+0x22>
 800ca42:	4b37      	ldr	r3, [pc, #220]	; (800cb20 <tcp_process_refused_data+0xec>)
 800ca44:	f240 6209 	movw	r2, #1545	; 0x609
 800ca48:	4936      	ldr	r1, [pc, #216]	; (800cb24 <tcp_process_refused_data+0xf0>)
 800ca4a:	4837      	ldr	r0, [pc, #220]	; (800cb28 <tcp_process_refused_data+0xf4>)
 800ca4c:	f008 ff6e 	bl	801592c <iprintf>
 800ca50:	f06f 030f 	mvn.w	r3, #15
 800ca54:	e060      	b.n	800cb18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca5a:	7b5b      	ldrb	r3, [r3, #13]
 800ca5c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca62:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00b      	beq.n	800ca8c <tcp_process_refused_data+0x58>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6918      	ldr	r0, [r3, #16]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	47a0      	blx	r4
 800ca86:	4603      	mov	r3, r0
 800ca88:	73fb      	strb	r3, [r7, #15]
 800ca8a:	e007      	b.n	800ca9c <tcp_process_refused_data+0x68>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	6879      	ldr	r1, [r7, #4]
 800ca92:	2000      	movs	r0, #0
 800ca94:	f000 f8a4 	bl	800cbe0 <tcp_recv_null>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ca9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d12a      	bne.n	800cafa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	f003 0320 	and.w	r3, r3, #32
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d033      	beq.n	800cb16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cab2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cab6:	d005      	beq.n	800cac4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cabc:	3301      	adds	r3, #1
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00b      	beq.n	800cae6 <tcp_process_refused_data+0xb2>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6918      	ldr	r0, [r3, #16]
 800cad8:	2300      	movs	r3, #0
 800cada:	2200      	movs	r2, #0
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	47a0      	blx	r4
 800cae0:	4603      	mov	r3, r0
 800cae2:	73fb      	strb	r3, [r7, #15]
 800cae4:	e001      	b.n	800caea <tcp_process_refused_data+0xb6>
 800cae6:	2300      	movs	r3, #0
 800cae8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800caea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caee:	f113 0f0d 	cmn.w	r3, #13
 800caf2:	d110      	bne.n	800cb16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800caf4:	f06f 030c 	mvn.w	r3, #12
 800caf8:	e00e      	b.n	800cb18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cafe:	f113 0f0d 	cmn.w	r3, #13
 800cb02:	d102      	bne.n	800cb0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cb04:	f06f 030c 	mvn.w	r3, #12
 800cb08:	e006      	b.n	800cb18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cb10:	f06f 0304 	mvn.w	r3, #4
 800cb14:	e000      	b.n	800cb18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd90      	pop	{r4, r7, pc}
 800cb20:	08017968 	.word	0x08017968
 800cb24:	08017e78 	.word	0x08017e78
 800cb28:	080179ac 	.word	0x080179ac

0800cb2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cb34:	e007      	b.n	800cb46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f80a 	bl	800cb56 <tcp_seg_free>
    seg = next;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1f4      	bne.n	800cb36 <tcp_segs_free+0xa>
  }
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b082      	sub	sp, #8
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00c      	beq.n	800cb7e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d004      	beq.n	800cb76 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fe fc73 	bl	800b45c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	2003      	movs	r0, #3
 800cb7a:	f7fd fdcb 	bl	800a714 <memp_free>
  }
}
 800cb7e:	bf00      	nop
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d106      	bne.n	800cba4 <tcp_seg_copy+0x1c>
 800cb96:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <tcp_seg_copy+0x4c>)
 800cb98:	f240 6282 	movw	r2, #1666	; 0x682
 800cb9c:	490e      	ldr	r1, [pc, #56]	; (800cbd8 <tcp_seg_copy+0x50>)
 800cb9e:	480f      	ldr	r0, [pc, #60]	; (800cbdc <tcp_seg_copy+0x54>)
 800cba0:	f008 fec4 	bl	801592c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cba4:	2003      	movs	r0, #3
 800cba6:	f7fd fd3f 	bl	800a628 <memp_malloc>
 800cbaa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <tcp_seg_copy+0x2e>
    return NULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e00a      	b.n	800cbcc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cbb6:	2210      	movs	r2, #16
 800cbb8:	6879      	ldr	r1, [r7, #4]
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f008 fd94 	bl	80156e8 <memcpy>
  pbuf_ref(cseg->p);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fcef 	bl	800b5a8 <pbuf_ref>
  return cseg;
 800cbca:	68fb      	ldr	r3, [r7, #12]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	08017968 	.word	0x08017968
 800cbd8:	08017ebc 	.word	0x08017ebc
 800cbdc:	080179ac 	.word	0x080179ac

0800cbe0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d109      	bne.n	800cc08 <tcp_recv_null+0x28>
 800cbf4:	4b12      	ldr	r3, [pc, #72]	; (800cc40 <tcp_recv_null+0x60>)
 800cbf6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cbfa:	4912      	ldr	r1, [pc, #72]	; (800cc44 <tcp_recv_null+0x64>)
 800cbfc:	4812      	ldr	r0, [pc, #72]	; (800cc48 <tcp_recv_null+0x68>)
 800cbfe:	f008 fe95 	bl	801592c <iprintf>
 800cc02:	f06f 030f 	mvn.w	r3, #15
 800cc06:	e016      	b.n	800cc36 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d009      	beq.n	800cc22 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	891b      	ldrh	r3, [r3, #8]
 800cc12:	4619      	mov	r1, r3
 800cc14:	68b8      	ldr	r0, [r7, #8]
 800cc16:	f7ff fb19 	bl	800c24c <tcp_recved>
    pbuf_free(p);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7fe fc1e 	bl	800b45c <pbuf_free>
 800cc20:	e008      	b.n	800cc34 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cc22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d104      	bne.n	800cc34 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cc2a:	68b8      	ldr	r0, [r7, #8]
 800cc2c:	f7ff f9be 	bl	800bfac <tcp_close>
 800cc30:	4603      	mov	r3, r0
 800cc32:	e000      	b.n	800cc36 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	08017968 	.word	0x08017968
 800cc44:	08017ed8 	.word	0x08017ed8
 800cc48:	080179ac 	.word	0x080179ac

0800cc4c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b086      	sub	sp, #24
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cc56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	db01      	blt.n	800cc62 <tcp_kill_prio+0x16>
 800cc5e:	79fb      	ldrb	r3, [r7, #7]
 800cc60:	e000      	b.n	800cc64 <tcp_kill_prio+0x18>
 800cc62:	237f      	movs	r3, #127	; 0x7f
 800cc64:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cc66:	7afb      	ldrb	r3, [r7, #11]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d034      	beq.n	800ccd6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cc6c:	7afb      	ldrb	r3, [r7, #11]
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc76:	2300      	movs	r3, #0
 800cc78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc7a:	4b19      	ldr	r3, [pc, #100]	; (800cce0 <tcp_kill_prio+0x94>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	617b      	str	r3, [r7, #20]
 800cc80:	e01f      	b.n	800ccc2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	7d5b      	ldrb	r3, [r3, #21]
 800cc86:	7afa      	ldrb	r2, [r7, #11]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d80c      	bhi.n	800cca6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cc90:	7afa      	ldrb	r2, [r7, #11]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d112      	bne.n	800ccbc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cc96:	4b13      	ldr	r3, [pc, #76]	; (800cce4 <tcp_kill_prio+0x98>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d80a      	bhi.n	800ccbc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cca6:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <tcp_kill_prio+0x98>)
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	7d5b      	ldrb	r3, [r3, #21]
 800ccba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	617b      	str	r3, [r7, #20]
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1dc      	bne.n	800cc82 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d004      	beq.n	800ccd8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ccce:	6938      	ldr	r0, [r7, #16]
 800ccd0:	f7ff fa56 	bl	800c180 <tcp_abort>
 800ccd4:	e000      	b.n	800ccd8 <tcp_kill_prio+0x8c>
    return;
 800ccd6:	bf00      	nop
  }
}
 800ccd8:	3718      	adds	r7, #24
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	2002e654 	.word	0x2002e654
 800cce4:	2002e648 	.word	0x2002e648

0800cce8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	2b08      	cmp	r3, #8
 800ccf6:	d009      	beq.n	800cd0c <tcp_kill_state+0x24>
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	2b09      	cmp	r3, #9
 800ccfc:	d006      	beq.n	800cd0c <tcp_kill_state+0x24>
 800ccfe:	4b1a      	ldr	r3, [pc, #104]	; (800cd68 <tcp_kill_state+0x80>)
 800cd00:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cd04:	4919      	ldr	r1, [pc, #100]	; (800cd6c <tcp_kill_state+0x84>)
 800cd06:	481a      	ldr	r0, [pc, #104]	; (800cd70 <tcp_kill_state+0x88>)
 800cd08:	f008 fe10 	bl	801592c <iprintf>

  inactivity = 0;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd14:	4b17      	ldr	r3, [pc, #92]	; (800cd74 <tcp_kill_state+0x8c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	617b      	str	r3, [r7, #20]
 800cd1a:	e017      	b.n	800cd4c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	7d1b      	ldrb	r3, [r3, #20]
 800cd20:	79fa      	ldrb	r2, [r7, #7]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d10f      	bne.n	800cd46 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cd26:	4b14      	ldr	r3, [pc, #80]	; (800cd78 <tcp_kill_state+0x90>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	6a1b      	ldr	r3, [r3, #32]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d807      	bhi.n	800cd46 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cd36:	4b10      	ldr	r3, [pc, #64]	; (800cd78 <tcp_kill_state+0x90>)
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	617b      	str	r3, [r7, #20]
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1e4      	bne.n	800cd1c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cd58:	2100      	movs	r1, #0
 800cd5a:	6938      	ldr	r0, [r7, #16]
 800cd5c:	f7ff f952 	bl	800c004 <tcp_abandon>
  }
}
 800cd60:	bf00      	nop
 800cd62:	3718      	adds	r7, #24
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	08017968 	.word	0x08017968
 800cd6c:	08017ef4 	.word	0x08017ef4
 800cd70:	080179ac 	.word	0x080179ac
 800cd74:	2002e654 	.word	0x2002e654
 800cd78:	2002e648 	.word	0x2002e648

0800cd7c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd8a:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <tcp_kill_timewait+0x58>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e012      	b.n	800cdb8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cd92:	4b11      	ldr	r3, [pc, #68]	; (800cdd8 <tcp_kill_timewait+0x5c>)
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d807      	bhi.n	800cdb2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cda2:	4b0d      	ldr	r3, [pc, #52]	; (800cdd8 <tcp_kill_timewait+0x5c>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1e9      	bne.n	800cd92 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cdc4:	68b8      	ldr	r0, [r7, #8]
 800cdc6:	f7ff f9db 	bl	800c180 <tcp_abort>
  }
}
 800cdca:	bf00      	nop
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	2002e658 	.word	0x2002e658
 800cdd8:	2002e648 	.word	0x2002e648

0800cddc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cde2:	4b10      	ldr	r3, [pc, #64]	; (800ce24 <tcp_handle_closepend+0x48>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cde8:	e014      	b.n	800ce14 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	8b5b      	ldrh	r3, [r3, #26]
 800cdf4:	f003 0308 	and.w	r3, r3, #8
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d009      	beq.n	800ce10 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	8b5b      	ldrh	r3, [r3, #26]
 800ce00:	f023 0308 	bic.w	r3, r3, #8
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff f864 	bl	800bed8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1e7      	bne.n	800cdea <tcp_handle_closepend+0xe>
  }
}
 800ce1a:	bf00      	nop
 800ce1c:	bf00      	nop
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	2002e654 	.word	0x2002e654

0800ce28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce32:	2001      	movs	r0, #1
 800ce34:	f7fd fbf8 	bl	800a628 <memp_malloc>
 800ce38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d126      	bne.n	800ce8e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ce40:	f7ff ffcc 	bl	800cddc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ce44:	f7ff ff9a 	bl	800cd7c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce48:	2001      	movs	r0, #1
 800ce4a:	f7fd fbed 	bl	800a628 <memp_malloc>
 800ce4e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d11b      	bne.n	800ce8e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ce56:	2009      	movs	r0, #9
 800ce58:	f7ff ff46 	bl	800cce8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce5c:	2001      	movs	r0, #1
 800ce5e:	f7fd fbe3 	bl	800a628 <memp_malloc>
 800ce62:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d111      	bne.n	800ce8e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ce6a:	2008      	movs	r0, #8
 800ce6c:	f7ff ff3c 	bl	800cce8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce70:	2001      	movs	r0, #1
 800ce72:	f7fd fbd9 	bl	800a628 <memp_malloc>
 800ce76:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d107      	bne.n	800ce8e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ce7e:	79fb      	ldrb	r3, [r7, #7]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7ff fee3 	bl	800cc4c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ce86:	2001      	movs	r0, #1
 800ce88:	f7fd fbce 	bl	800a628 <memp_malloc>
 800ce8c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d03f      	beq.n	800cf14 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ce94:	229c      	movs	r2, #156	; 0x9c
 800ce96:	2100      	movs	r1, #0
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f008 fc4d 	bl	8015738 <memset>
    pcb->prio = prio;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	79fa      	ldrb	r2, [r7, #7]
 800cea2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ceaa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ceb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	22ff      	movs	r2, #255	; 0xff
 800cec2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ceca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2206      	movs	r2, #6
 800ced0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2206      	movs	r2, #6
 800ced8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cee0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ceea:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <tcp_alloc+0xf8>)
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cef2:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <tcp_alloc+0xfc>)
 800cef4:	781a      	ldrb	r2, [r3, #0]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cf00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	4a08      	ldr	r2, [pc, #32]	; (800cf28 <tcp_alloc+0x100>)
 800cf08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	4a07      	ldr	r2, [pc, #28]	; (800cf2c <tcp_alloc+0x104>)
 800cf10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cf14:	68fb      	ldr	r3, [r7, #12]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	2002e648 	.word	0x2002e648
 800cf24:	2002e65e 	.word	0x2002e65e
 800cf28:	0800cbe1 	.word	0x0800cbe1
 800cf2c:	006ddd00 	.word	0x006ddd00

0800cf30 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d107      	bne.n	800cf4e <tcp_pcb_purge+0x1e>
 800cf3e:	4b21      	ldr	r3, [pc, #132]	; (800cfc4 <tcp_pcb_purge+0x94>)
 800cf40:	f640 0251 	movw	r2, #2129	; 0x851
 800cf44:	4920      	ldr	r1, [pc, #128]	; (800cfc8 <tcp_pcb_purge+0x98>)
 800cf46:	4821      	ldr	r0, [pc, #132]	; (800cfcc <tcp_pcb_purge+0x9c>)
 800cf48:	f008 fcf0 	bl	801592c <iprintf>
 800cf4c:	e037      	b.n	800cfbe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	7d1b      	ldrb	r3, [r3, #20]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d033      	beq.n	800cfbe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cf5a:	2b0a      	cmp	r3, #10
 800cf5c:	d02f      	beq.n	800cfbe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d02b      	beq.n	800cfbe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d007      	beq.n	800cf7e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe fa72 	bl	800b45c <pbuf_free>
      pcb->refused_data = NULL;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d002      	beq.n	800cf8c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f986 	bl	800d298 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf92:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7ff fdc7 	bl	800cb2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff fdc2 	bl	800cb2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	66da      	str	r2, [r3, #108]	; 0x6c
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	08017968 	.word	0x08017968
 800cfc8:	08017fb4 	.word	0x08017fb4
 800cfcc:	080179ac 	.word	0x080179ac

0800cfd0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d106      	bne.n	800cfee <tcp_pcb_remove+0x1e>
 800cfe0:	4b3e      	ldr	r3, [pc, #248]	; (800d0dc <tcp_pcb_remove+0x10c>)
 800cfe2:	f640 0283 	movw	r2, #2179	; 0x883
 800cfe6:	493e      	ldr	r1, [pc, #248]	; (800d0e0 <tcp_pcb_remove+0x110>)
 800cfe8:	483e      	ldr	r0, [pc, #248]	; (800d0e4 <tcp_pcb_remove+0x114>)
 800cfea:	f008 fc9f 	bl	801592c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d106      	bne.n	800d002 <tcp_pcb_remove+0x32>
 800cff4:	4b39      	ldr	r3, [pc, #228]	; (800d0dc <tcp_pcb_remove+0x10c>)
 800cff6:	f640 0284 	movw	r2, #2180	; 0x884
 800cffa:	493b      	ldr	r1, [pc, #236]	; (800d0e8 <tcp_pcb_remove+0x118>)
 800cffc:	4839      	ldr	r0, [pc, #228]	; (800d0e4 <tcp_pcb_remove+0x114>)
 800cffe:	f008 fc95 	bl	801592c <iprintf>

  TCP_RMV(pcblist, pcb);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d105      	bne.n	800d018 <tcp_pcb_remove+0x48>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68da      	ldr	r2, [r3, #12]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	601a      	str	r2, [r3, #0]
 800d016:	e013      	b.n	800d040 <tcp_pcb_remove+0x70>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	60fb      	str	r3, [r7, #12]
 800d01e:	e00c      	b.n	800d03a <tcp_pcb_remove+0x6a>
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	429a      	cmp	r2, r3
 800d028:	d104      	bne.n	800d034 <tcp_pcb_remove+0x64>
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	68da      	ldr	r2, [r3, #12]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	60da      	str	r2, [r3, #12]
 800d032:	e005      	b.n	800d040 <tcp_pcb_remove+0x70>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1ef      	bne.n	800d020 <tcp_pcb_remove+0x50>
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2200      	movs	r2, #0
 800d044:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d046:	6838      	ldr	r0, [r7, #0]
 800d048:	f7ff ff72 	bl	800cf30 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	7d1b      	ldrb	r3, [r3, #20]
 800d050:	2b0a      	cmp	r3, #10
 800d052:	d013      	beq.n	800d07c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d00f      	beq.n	800d07c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	8b5b      	ldrh	r3, [r3, #26]
 800d060:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d064:	2b00      	cmp	r3, #0
 800d066:	d009      	beq.n	800d07c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	8b5b      	ldrh	r3, [r3, #26]
 800d06c:	f043 0302 	orr.w	r3, r3, #2
 800d070:	b29a      	uxth	r2, r3
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d076:	6838      	ldr	r0, [r7, #0]
 800d078:	f002 ff6e 	bl	800ff58 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	7d1b      	ldrb	r3, [r3, #20]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d020      	beq.n	800d0c6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d006      	beq.n	800d09a <tcp_pcb_remove+0xca>
 800d08c:	4b13      	ldr	r3, [pc, #76]	; (800d0dc <tcp_pcb_remove+0x10c>)
 800d08e:	f640 0293 	movw	r2, #2195	; 0x893
 800d092:	4916      	ldr	r1, [pc, #88]	; (800d0ec <tcp_pcb_remove+0x11c>)
 800d094:	4813      	ldr	r0, [pc, #76]	; (800d0e4 <tcp_pcb_remove+0x114>)
 800d096:	f008 fc49 	bl	801592c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d006      	beq.n	800d0b0 <tcp_pcb_remove+0xe0>
 800d0a2:	4b0e      	ldr	r3, [pc, #56]	; (800d0dc <tcp_pcb_remove+0x10c>)
 800d0a4:	f640 0294 	movw	r2, #2196	; 0x894
 800d0a8:	4911      	ldr	r1, [pc, #68]	; (800d0f0 <tcp_pcb_remove+0x120>)
 800d0aa:	480e      	ldr	r0, [pc, #56]	; (800d0e4 <tcp_pcb_remove+0x114>)
 800d0ac:	f008 fc3e 	bl	801592c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d006      	beq.n	800d0c6 <tcp_pcb_remove+0xf6>
 800d0b8:	4b08      	ldr	r3, [pc, #32]	; (800d0dc <tcp_pcb_remove+0x10c>)
 800d0ba:	f640 0296 	movw	r2, #2198	; 0x896
 800d0be:	490d      	ldr	r1, [pc, #52]	; (800d0f4 <tcp_pcb_remove+0x124>)
 800d0c0:	4808      	ldr	r0, [pc, #32]	; (800d0e4 <tcp_pcb_remove+0x114>)
 800d0c2:	f008 fc33 	bl	801592c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d0d2:	bf00      	nop
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	08017968 	.word	0x08017968
 800d0e0:	08017fd0 	.word	0x08017fd0
 800d0e4:	080179ac 	.word	0x080179ac
 800d0e8:	08017fec 	.word	0x08017fec
 800d0ec:	0801800c 	.word	0x0801800c
 800d0f0:	08018024 	.word	0x08018024
 800d0f4:	08018040 	.word	0x08018040

0800d0f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d106      	bne.n	800d114 <tcp_next_iss+0x1c>
 800d106:	4b0a      	ldr	r3, [pc, #40]	; (800d130 <tcp_next_iss+0x38>)
 800d108:	f640 02af 	movw	r2, #2223	; 0x8af
 800d10c:	4909      	ldr	r1, [pc, #36]	; (800d134 <tcp_next_iss+0x3c>)
 800d10e:	480a      	ldr	r0, [pc, #40]	; (800d138 <tcp_next_iss+0x40>)
 800d110:	f008 fc0c 	bl	801592c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d114:	4b09      	ldr	r3, [pc, #36]	; (800d13c <tcp_next_iss+0x44>)
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	4b09      	ldr	r3, [pc, #36]	; (800d140 <tcp_next_iss+0x48>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4413      	add	r3, r2
 800d11e:	4a07      	ldr	r2, [pc, #28]	; (800d13c <tcp_next_iss+0x44>)
 800d120:	6013      	str	r3, [r2, #0]
  return iss;
 800d122:	4b06      	ldr	r3, [pc, #24]	; (800d13c <tcp_next_iss+0x44>)
 800d124:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d126:	4618      	mov	r0, r3
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	08017968 	.word	0x08017968
 800d134:	08018058 	.word	0x08018058
 800d138:	080179ac 	.word	0x080179ac
 800d13c:	20000028 	.word	0x20000028
 800d140:	2002e648 	.word	0x2002e648

0800d144 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d106      	bne.n	800d166 <tcp_eff_send_mss_netif+0x22>
 800d158:	4b14      	ldr	r3, [pc, #80]	; (800d1ac <tcp_eff_send_mss_netif+0x68>)
 800d15a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d15e:	4914      	ldr	r1, [pc, #80]	; (800d1b0 <tcp_eff_send_mss_netif+0x6c>)
 800d160:	4814      	ldr	r0, [pc, #80]	; (800d1b4 <tcp_eff_send_mss_netif+0x70>)
 800d162:	f008 fbe3 	bl	801592c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d16c:	89fb      	ldrh	r3, [r7, #14]
 800d16e:	e019      	b.n	800d1a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d174:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d176:	8afb      	ldrh	r3, [r7, #22]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d012      	beq.n	800d1a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d17c:	2328      	movs	r3, #40	; 0x28
 800d17e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d180:	8afa      	ldrh	r2, [r7, #22]
 800d182:	8abb      	ldrh	r3, [r7, #20]
 800d184:	429a      	cmp	r2, r3
 800d186:	d904      	bls.n	800d192 <tcp_eff_send_mss_netif+0x4e>
 800d188:	8afa      	ldrh	r2, [r7, #22]
 800d18a:	8abb      	ldrh	r3, [r7, #20]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	b29b      	uxth	r3, r3
 800d190:	e000      	b.n	800d194 <tcp_eff_send_mss_netif+0x50>
 800d192:	2300      	movs	r3, #0
 800d194:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d196:	8a7a      	ldrh	r2, [r7, #18]
 800d198:	89fb      	ldrh	r3, [r7, #14]
 800d19a:	4293      	cmp	r3, r2
 800d19c:	bf28      	it	cs
 800d19e:	4613      	movcs	r3, r2
 800d1a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d1a2:	89fb      	ldrh	r3, [r7, #14]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	08017968 	.word	0x08017968
 800d1b0:	08018074 	.word	0x08018074
 800d1b4:	080179ac 	.word	0x080179ac

0800d1b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d119      	bne.n	800d200 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d1cc:	4b10      	ldr	r3, [pc, #64]	; (800d210 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d1ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d1d2:	4910      	ldr	r1, [pc, #64]	; (800d214 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d1d4:	4810      	ldr	r0, [pc, #64]	; (800d218 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d1d6:	f008 fba9 	bl	801592c <iprintf>

  while (pcb != NULL) {
 800d1da:	e011      	b.n	800d200 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d108      	bne.n	800d1fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f7fe ffc6 	bl	800c180 <tcp_abort>
      pcb = next;
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	60fb      	str	r3, [r7, #12]
 800d1f8:	e002      	b.n	800d200 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1ea      	bne.n	800d1dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d206:	bf00      	nop
 800d208:	bf00      	nop
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	08017968 	.word	0x08017968
 800d214:	0801809c 	.word	0x0801809c
 800d218:	080179ac 	.word	0x080179ac

0800d21c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d02a      	beq.n	800d282 <tcp_netif_ip_addr_changed+0x66>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d026      	beq.n	800d282 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d234:	4b15      	ldr	r3, [pc, #84]	; (800d28c <tcp_netif_ip_addr_changed+0x70>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4619      	mov	r1, r3
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7ff ffbc 	bl	800d1b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d240:	4b13      	ldr	r3, [pc, #76]	; (800d290 <tcp_netif_ip_addr_changed+0x74>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4619      	mov	r1, r3
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff ffb6 	bl	800d1b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d017      	beq.n	800d282 <tcp_netif_ip_addr_changed+0x66>
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d013      	beq.n	800d282 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d25a:	4b0e      	ldr	r3, [pc, #56]	; (800d294 <tcp_netif_ip_addr_changed+0x78>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	60fb      	str	r3, [r7, #12]
 800d260:	e00c      	b.n	800d27c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d103      	bne.n	800d276 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1ef      	bne.n	800d262 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d282:	bf00      	nop
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	2002e654 	.word	0x2002e654
 800d290:	2002e64c 	.word	0x2002e64c
 800d294:	2002e650 	.word	0x2002e650

0800d298 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d007      	beq.n	800d2b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7ff fc3d 	bl	800cb2c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d2b8:	bf00      	nop
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d2c0:	b590      	push	{r4, r7, lr}
 800d2c2:	b08d      	sub	sp, #52	; 0x34
 800d2c4:	af04      	add	r7, sp, #16
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d105      	bne.n	800d2dc <tcp_input+0x1c>
 800d2d0:	4b9b      	ldr	r3, [pc, #620]	; (800d540 <tcp_input+0x280>)
 800d2d2:	2283      	movs	r2, #131	; 0x83
 800d2d4:	499b      	ldr	r1, [pc, #620]	; (800d544 <tcp_input+0x284>)
 800d2d6:	489c      	ldr	r0, [pc, #624]	; (800d548 <tcp_input+0x288>)
 800d2d8:	f008 fb28 	bl	801592c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	4a9a      	ldr	r2, [pc, #616]	; (800d54c <tcp_input+0x28c>)
 800d2e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	895b      	ldrh	r3, [r3, #10]
 800d2e8:	2b13      	cmp	r3, #19
 800d2ea:	f240 83d1 	bls.w	800da90 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d2ee:	4b98      	ldr	r3, [pc, #608]	; (800d550 <tcp_input+0x290>)
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	4a97      	ldr	r2, [pc, #604]	; (800d550 <tcp_input+0x290>)
 800d2f4:	6812      	ldr	r2, [r2, #0]
 800d2f6:	4611      	mov	r1, r2
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f005 ff7d 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	f040 83c7 	bne.w	800da94 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d306:	4b92      	ldr	r3, [pc, #584]	; (800d550 <tcp_input+0x290>)
 800d308:	695b      	ldr	r3, [r3, #20]
 800d30a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d30e:	2be0      	cmp	r3, #224	; 0xe0
 800d310:	f000 83c0 	beq.w	800da94 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d314:	4b8d      	ldr	r3, [pc, #564]	; (800d54c <tcp_input+0x28c>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	899b      	ldrh	r3, [r3, #12]
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7fc fcab 	bl	8009c78 <lwip_htons>
 800d322:	4603      	mov	r3, r0
 800d324:	0b1b      	lsrs	r3, r3, #12
 800d326:	b29b      	uxth	r3, r3
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d32e:	7cbb      	ldrb	r3, [r7, #18]
 800d330:	2b13      	cmp	r3, #19
 800d332:	f240 83b1 	bls.w	800da98 <tcp_input+0x7d8>
 800d336:	7cbb      	ldrb	r3, [r7, #18]
 800d338:	b29a      	uxth	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	891b      	ldrh	r3, [r3, #8]
 800d33e:	429a      	cmp	r2, r3
 800d340:	f200 83aa 	bhi.w	800da98 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d344:	7cbb      	ldrb	r3, [r7, #18]
 800d346:	b29b      	uxth	r3, r3
 800d348:	3b14      	subs	r3, #20
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	4b81      	ldr	r3, [pc, #516]	; (800d554 <tcp_input+0x294>)
 800d34e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d350:	4b81      	ldr	r3, [pc, #516]	; (800d558 <tcp_input+0x298>)
 800d352:	2200      	movs	r2, #0
 800d354:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	895a      	ldrh	r2, [r3, #10]
 800d35a:	7cbb      	ldrb	r3, [r7, #18]
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	429a      	cmp	r2, r3
 800d360:	d309      	bcc.n	800d376 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d362:	4b7c      	ldr	r3, [pc, #496]	; (800d554 <tcp_input+0x294>)
 800d364:	881a      	ldrh	r2, [r3, #0]
 800d366:	4b7d      	ldr	r3, [pc, #500]	; (800d55c <tcp_input+0x29c>)
 800d368:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d36a:	7cbb      	ldrb	r3, [r7, #18]
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7fd ffee 	bl	800b350 <pbuf_remove_header>
 800d374:	e04e      	b.n	800d414 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d105      	bne.n	800d38a <tcp_input+0xca>
 800d37e:	4b70      	ldr	r3, [pc, #448]	; (800d540 <tcp_input+0x280>)
 800d380:	22c2      	movs	r2, #194	; 0xc2
 800d382:	4977      	ldr	r1, [pc, #476]	; (800d560 <tcp_input+0x2a0>)
 800d384:	4870      	ldr	r0, [pc, #448]	; (800d548 <tcp_input+0x288>)
 800d386:	f008 fad1 	bl	801592c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d38a:	2114      	movs	r1, #20
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7fd ffdf 	bl	800b350 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	895a      	ldrh	r2, [r3, #10]
 800d396:	4b71      	ldr	r3, [pc, #452]	; (800d55c <tcp_input+0x29c>)
 800d398:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d39a:	4b6e      	ldr	r3, [pc, #440]	; (800d554 <tcp_input+0x294>)
 800d39c:	881a      	ldrh	r2, [r3, #0]
 800d39e:	4b6f      	ldr	r3, [pc, #444]	; (800d55c <tcp_input+0x29c>)
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d3a6:	4b6d      	ldr	r3, [pc, #436]	; (800d55c <tcp_input+0x29c>)
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7fd ffcf 	bl	800b350 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	895b      	ldrh	r3, [r3, #10]
 800d3b8:	8a3a      	ldrh	r2, [r7, #16]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	f200 836e 	bhi.w	800da9c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	4a64      	ldr	r2, [pc, #400]	; (800d558 <tcp_input+0x298>)
 800d3c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	8a3a      	ldrh	r2, [r7, #16]
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fd ffbc 	bl	800b350 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	891a      	ldrh	r2, [r3, #8]
 800d3dc:	8a3b      	ldrh	r3, [r7, #16]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	895b      	ldrh	r3, [r3, #10]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d005      	beq.n	800d3fa <tcp_input+0x13a>
 800d3ee:	4b54      	ldr	r3, [pc, #336]	; (800d540 <tcp_input+0x280>)
 800d3f0:	22df      	movs	r2, #223	; 0xdf
 800d3f2:	495c      	ldr	r1, [pc, #368]	; (800d564 <tcp_input+0x2a4>)
 800d3f4:	4854      	ldr	r0, [pc, #336]	; (800d548 <tcp_input+0x288>)
 800d3f6:	f008 fa99 	bl	801592c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	891a      	ldrh	r2, [r3, #8]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	891b      	ldrh	r3, [r3, #8]
 800d404:	429a      	cmp	r2, r3
 800d406:	d005      	beq.n	800d414 <tcp_input+0x154>
 800d408:	4b4d      	ldr	r3, [pc, #308]	; (800d540 <tcp_input+0x280>)
 800d40a:	22e0      	movs	r2, #224	; 0xe0
 800d40c:	4956      	ldr	r1, [pc, #344]	; (800d568 <tcp_input+0x2a8>)
 800d40e:	484e      	ldr	r0, [pc, #312]	; (800d548 <tcp_input+0x288>)
 800d410:	f008 fa8c 	bl	801592c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d414:	4b4d      	ldr	r3, [pc, #308]	; (800d54c <tcp_input+0x28c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	4a4b      	ldr	r2, [pc, #300]	; (800d54c <tcp_input+0x28c>)
 800d41e:	6814      	ldr	r4, [r2, #0]
 800d420:	4618      	mov	r0, r3
 800d422:	f7fc fc29 	bl	8009c78 <lwip_htons>
 800d426:	4603      	mov	r3, r0
 800d428:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d42a:	4b48      	ldr	r3, [pc, #288]	; (800d54c <tcp_input+0x28c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	885b      	ldrh	r3, [r3, #2]
 800d430:	b29b      	uxth	r3, r3
 800d432:	4a46      	ldr	r2, [pc, #280]	; (800d54c <tcp_input+0x28c>)
 800d434:	6814      	ldr	r4, [r2, #0]
 800d436:	4618      	mov	r0, r3
 800d438:	f7fc fc1e 	bl	8009c78 <lwip_htons>
 800d43c:	4603      	mov	r3, r0
 800d43e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d440:	4b42      	ldr	r3, [pc, #264]	; (800d54c <tcp_input+0x28c>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	4a41      	ldr	r2, [pc, #260]	; (800d54c <tcp_input+0x28c>)
 800d448:	6814      	ldr	r4, [r2, #0]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fc fc29 	bl	8009ca2 <lwip_htonl>
 800d450:	4603      	mov	r3, r0
 800d452:	6063      	str	r3, [r4, #4]
 800d454:	6863      	ldr	r3, [r4, #4]
 800d456:	4a45      	ldr	r2, [pc, #276]	; (800d56c <tcp_input+0x2ac>)
 800d458:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d45a:	4b3c      	ldr	r3, [pc, #240]	; (800d54c <tcp_input+0x28c>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	4a3a      	ldr	r2, [pc, #232]	; (800d54c <tcp_input+0x28c>)
 800d462:	6814      	ldr	r4, [r2, #0]
 800d464:	4618      	mov	r0, r3
 800d466:	f7fc fc1c 	bl	8009ca2 <lwip_htonl>
 800d46a:	4603      	mov	r3, r0
 800d46c:	60a3      	str	r3, [r4, #8]
 800d46e:	68a3      	ldr	r3, [r4, #8]
 800d470:	4a3f      	ldr	r2, [pc, #252]	; (800d570 <tcp_input+0x2b0>)
 800d472:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d474:	4b35      	ldr	r3, [pc, #212]	; (800d54c <tcp_input+0x28c>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	89db      	ldrh	r3, [r3, #14]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	4a33      	ldr	r2, [pc, #204]	; (800d54c <tcp_input+0x28c>)
 800d47e:	6814      	ldr	r4, [r2, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	f7fc fbf9 	bl	8009c78 <lwip_htons>
 800d486:	4603      	mov	r3, r0
 800d488:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d48a:	4b30      	ldr	r3, [pc, #192]	; (800d54c <tcp_input+0x28c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	899b      	ldrh	r3, [r3, #12]
 800d490:	b29b      	uxth	r3, r3
 800d492:	4618      	mov	r0, r3
 800d494:	f7fc fbf0 	bl	8009c78 <lwip_htons>
 800d498:	4603      	mov	r3, r0
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	4b34      	ldr	r3, [pc, #208]	; (800d574 <tcp_input+0x2b4>)
 800d4a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	891a      	ldrh	r2, [r3, #8]
 800d4aa:	4b33      	ldr	r3, [pc, #204]	; (800d578 <tcp_input+0x2b8>)
 800d4ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d4ae:	4b31      	ldr	r3, [pc, #196]	; (800d574 <tcp_input+0x2b4>)
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	f003 0303 	and.w	r3, r3, #3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00c      	beq.n	800d4d4 <tcp_input+0x214>
    tcplen++;
 800d4ba:	4b2f      	ldr	r3, [pc, #188]	; (800d578 <tcp_input+0x2b8>)
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	4b2d      	ldr	r3, [pc, #180]	; (800d578 <tcp_input+0x2b8>)
 800d4c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	891a      	ldrh	r2, [r3, #8]
 800d4ca:	4b2b      	ldr	r3, [pc, #172]	; (800d578 <tcp_input+0x2b8>)
 800d4cc:	881b      	ldrh	r3, [r3, #0]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	f200 82e6 	bhi.w	800daa0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4d8:	4b28      	ldr	r3, [pc, #160]	; (800d57c <tcp_input+0x2bc>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	61fb      	str	r3, [r7, #28]
 800d4de:	e09d      	b.n	800d61c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	7d1b      	ldrb	r3, [r3, #20]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d105      	bne.n	800d4f4 <tcp_input+0x234>
 800d4e8:	4b15      	ldr	r3, [pc, #84]	; (800d540 <tcp_input+0x280>)
 800d4ea:	22fb      	movs	r2, #251	; 0xfb
 800d4ec:	4924      	ldr	r1, [pc, #144]	; (800d580 <tcp_input+0x2c0>)
 800d4ee:	4816      	ldr	r0, [pc, #88]	; (800d548 <tcp_input+0x288>)
 800d4f0:	f008 fa1c 	bl	801592c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	7d1b      	ldrb	r3, [r3, #20]
 800d4f8:	2b0a      	cmp	r3, #10
 800d4fa:	d105      	bne.n	800d508 <tcp_input+0x248>
 800d4fc:	4b10      	ldr	r3, [pc, #64]	; (800d540 <tcp_input+0x280>)
 800d4fe:	22fc      	movs	r2, #252	; 0xfc
 800d500:	4920      	ldr	r1, [pc, #128]	; (800d584 <tcp_input+0x2c4>)
 800d502:	4811      	ldr	r0, [pc, #68]	; (800d548 <tcp_input+0x288>)
 800d504:	f008 fa12 	bl	801592c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	7d1b      	ldrb	r3, [r3, #20]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d105      	bne.n	800d51c <tcp_input+0x25c>
 800d510:	4b0b      	ldr	r3, [pc, #44]	; (800d540 <tcp_input+0x280>)
 800d512:	22fd      	movs	r2, #253	; 0xfd
 800d514:	491c      	ldr	r1, [pc, #112]	; (800d588 <tcp_input+0x2c8>)
 800d516:	480c      	ldr	r0, [pc, #48]	; (800d548 <tcp_input+0x288>)
 800d518:	f008 fa08 	bl	801592c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	7a1b      	ldrb	r3, [r3, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d033      	beq.n	800d58c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	7a1a      	ldrb	r2, [r3, #8]
 800d528:	4b09      	ldr	r3, [pc, #36]	; (800d550 <tcp_input+0x290>)
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d530:	3301      	adds	r3, #1
 800d532:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d534:	429a      	cmp	r2, r3
 800d536:	d029      	beq.n	800d58c <tcp_input+0x2cc>
      prev = pcb;
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	61bb      	str	r3, [r7, #24]
      continue;
 800d53c:	e06b      	b.n	800d616 <tcp_input+0x356>
 800d53e:	bf00      	nop
 800d540:	080180d0 	.word	0x080180d0
 800d544:	08018104 	.word	0x08018104
 800d548:	0801811c 	.word	0x0801811c
 800d54c:	2002e670 	.word	0x2002e670
 800d550:	2002aef4 	.word	0x2002aef4
 800d554:	2002e674 	.word	0x2002e674
 800d558:	2002e678 	.word	0x2002e678
 800d55c:	2002e676 	.word	0x2002e676
 800d560:	08018144 	.word	0x08018144
 800d564:	08018154 	.word	0x08018154
 800d568:	08018160 	.word	0x08018160
 800d56c:	2002e680 	.word	0x2002e680
 800d570:	2002e684 	.word	0x2002e684
 800d574:	2002e68c 	.word	0x2002e68c
 800d578:	2002e68a 	.word	0x2002e68a
 800d57c:	2002e654 	.word	0x2002e654
 800d580:	08018180 	.word	0x08018180
 800d584:	080181a8 	.word	0x080181a8
 800d588:	080181d4 	.word	0x080181d4
    }

    if (pcb->remote_port == tcphdr->src &&
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	8b1a      	ldrh	r2, [r3, #24]
 800d590:	4b72      	ldr	r3, [pc, #456]	; (800d75c <tcp_input+0x49c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	b29b      	uxth	r3, r3
 800d598:	429a      	cmp	r2, r3
 800d59a:	d13a      	bne.n	800d612 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	8ada      	ldrh	r2, [r3, #22]
 800d5a0:	4b6e      	ldr	r3, [pc, #440]	; (800d75c <tcp_input+0x49c>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	885b      	ldrh	r3, [r3, #2]
 800d5a6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d132      	bne.n	800d612 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	4b6b      	ldr	r3, [pc, #428]	; (800d760 <tcp_input+0x4a0>)
 800d5b2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d12c      	bne.n	800d612 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	4b68      	ldr	r3, [pc, #416]	; (800d760 <tcp_input+0x4a0>)
 800d5be:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d126      	bne.n	800d612 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	69fa      	ldr	r2, [r7, #28]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d106      	bne.n	800d5dc <tcp_input+0x31c>
 800d5ce:	4b65      	ldr	r3, [pc, #404]	; (800d764 <tcp_input+0x4a4>)
 800d5d0:	f240 120d 	movw	r2, #269	; 0x10d
 800d5d4:	4964      	ldr	r1, [pc, #400]	; (800d768 <tcp_input+0x4a8>)
 800d5d6:	4865      	ldr	r0, [pc, #404]	; (800d76c <tcp_input+0x4ac>)
 800d5d8:	f008 f9a8 	bl	801592c <iprintf>
      if (prev != NULL) {
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d00a      	beq.n	800d5f8 <tcp_input+0x338>
        prev->next = pcb->next;
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	68da      	ldr	r2, [r3, #12]
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d5ea:	4b61      	ldr	r3, [pc, #388]	; (800d770 <tcp_input+0x4b0>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d5f2:	4a5f      	ldr	r2, [pc, #380]	; (800d770 <tcp_input+0x4b0>)
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	69fa      	ldr	r2, [r7, #28]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d111      	bne.n	800d626 <tcp_input+0x366>
 800d602:	4b58      	ldr	r3, [pc, #352]	; (800d764 <tcp_input+0x4a4>)
 800d604:	f240 1215 	movw	r2, #277	; 0x115
 800d608:	495a      	ldr	r1, [pc, #360]	; (800d774 <tcp_input+0x4b4>)
 800d60a:	4858      	ldr	r0, [pc, #352]	; (800d76c <tcp_input+0x4ac>)
 800d60c:	f008 f98e 	bl	801592c <iprintf>
      break;
 800d610:	e009      	b.n	800d626 <tcp_input+0x366>
    }
    prev = pcb;
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	61fb      	str	r3, [r7, #28]
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f47f af5e 	bne.w	800d4e0 <tcp_input+0x220>
 800d624:	e000      	b.n	800d628 <tcp_input+0x368>
      break;
 800d626:	bf00      	nop
  }

  if (pcb == NULL) {
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f040 80aa 	bne.w	800d784 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d630:	4b51      	ldr	r3, [pc, #324]	; (800d778 <tcp_input+0x4b8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	61fb      	str	r3, [r7, #28]
 800d636:	e03f      	b.n	800d6b8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	7d1b      	ldrb	r3, [r3, #20]
 800d63c:	2b0a      	cmp	r3, #10
 800d63e:	d006      	beq.n	800d64e <tcp_input+0x38e>
 800d640:	4b48      	ldr	r3, [pc, #288]	; (800d764 <tcp_input+0x4a4>)
 800d642:	f240 121f 	movw	r2, #287	; 0x11f
 800d646:	494d      	ldr	r1, [pc, #308]	; (800d77c <tcp_input+0x4bc>)
 800d648:	4848      	ldr	r0, [pc, #288]	; (800d76c <tcp_input+0x4ac>)
 800d64a:	f008 f96f 	bl	801592c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	7a1b      	ldrb	r3, [r3, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d009      	beq.n	800d66a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	7a1a      	ldrb	r2, [r3, #8]
 800d65a:	4b41      	ldr	r3, [pc, #260]	; (800d760 <tcp_input+0x4a0>)
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d662:	3301      	adds	r3, #1
 800d664:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d666:	429a      	cmp	r2, r3
 800d668:	d122      	bne.n	800d6b0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	8b1a      	ldrh	r2, [r3, #24]
 800d66e:	4b3b      	ldr	r3, [pc, #236]	; (800d75c <tcp_input+0x49c>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	881b      	ldrh	r3, [r3, #0]
 800d674:	b29b      	uxth	r3, r3
 800d676:	429a      	cmp	r2, r3
 800d678:	d11b      	bne.n	800d6b2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	8ada      	ldrh	r2, [r3, #22]
 800d67e:	4b37      	ldr	r3, [pc, #220]	; (800d75c <tcp_input+0x49c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	885b      	ldrh	r3, [r3, #2]
 800d684:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d686:	429a      	cmp	r2, r3
 800d688:	d113      	bne.n	800d6b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	685a      	ldr	r2, [r3, #4]
 800d68e:	4b34      	ldr	r3, [pc, #208]	; (800d760 <tcp_input+0x4a0>)
 800d690:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d692:	429a      	cmp	r2, r3
 800d694:	d10d      	bne.n	800d6b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	4b31      	ldr	r3, [pc, #196]	; (800d760 <tcp_input+0x4a0>)
 800d69c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d107      	bne.n	800d6b2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d6a2:	69f8      	ldr	r0, [r7, #28]
 800d6a4:	f000 fb56 	bl	800dd54 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7fd fed7 	bl	800b45c <pbuf_free>
        return;
 800d6ae:	e1fd      	b.n	800daac <tcp_input+0x7ec>
        continue;
 800d6b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	61fb      	str	r3, [r7, #28]
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1bc      	bne.n	800d638 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d6c2:	4b2f      	ldr	r3, [pc, #188]	; (800d780 <tcp_input+0x4c0>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	617b      	str	r3, [r7, #20]
 800d6c8:	e02a      	b.n	800d720 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	7a1b      	ldrb	r3, [r3, #8]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00c      	beq.n	800d6ec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	7a1a      	ldrb	r2, [r3, #8]
 800d6d6:	4b22      	ldr	r3, [pc, #136]	; (800d760 <tcp_input+0x4a0>)
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6de:	3301      	adds	r3, #1
 800d6e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d002      	beq.n	800d6ec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	61bb      	str	r3, [r7, #24]
        continue;
 800d6ea:	e016      	b.n	800d71a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	8ada      	ldrh	r2, [r3, #22]
 800d6f0:	4b1a      	ldr	r3, [pc, #104]	; (800d75c <tcp_input+0x49c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	885b      	ldrh	r3, [r3, #2]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d10c      	bne.n	800d716 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	4b17      	ldr	r3, [pc, #92]	; (800d760 <tcp_input+0x4a0>)
 800d702:	695b      	ldr	r3, [r3, #20]
 800d704:	429a      	cmp	r2, r3
 800d706:	d00f      	beq.n	800d728 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00d      	beq.n	800d72a <tcp_input+0x46a>
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d009      	beq.n	800d72a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	617b      	str	r3, [r7, #20]
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1d1      	bne.n	800d6ca <tcp_input+0x40a>
 800d726:	e000      	b.n	800d72a <tcp_input+0x46a>
            break;
 800d728:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d029      	beq.n	800d784 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00a      	beq.n	800d74c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	68da      	ldr	r2, [r3, #12]
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d73e:	4b10      	ldr	r3, [pc, #64]	; (800d780 <tcp_input+0x4c0>)
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d746:	4a0e      	ldr	r2, [pc, #56]	; (800d780 <tcp_input+0x4c0>)
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d74c:	6978      	ldr	r0, [r7, #20]
 800d74e:	f000 fa03 	bl	800db58 <tcp_listen_input>
      }
      pbuf_free(p);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7fd fe82 	bl	800b45c <pbuf_free>
      return;
 800d758:	e1a8      	b.n	800daac <tcp_input+0x7ec>
 800d75a:	bf00      	nop
 800d75c:	2002e670 	.word	0x2002e670
 800d760:	2002aef4 	.word	0x2002aef4
 800d764:	080180d0 	.word	0x080180d0
 800d768:	080181fc 	.word	0x080181fc
 800d76c:	0801811c 	.word	0x0801811c
 800d770:	2002e654 	.word	0x2002e654
 800d774:	08018228 	.word	0x08018228
 800d778:	2002e658 	.word	0x2002e658
 800d77c:	08018254 	.word	0x08018254
 800d780:	2002e650 	.word	0x2002e650
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	2b00      	cmp	r3, #0
 800d788:	f000 8158 	beq.w	800da3c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d78c:	4b95      	ldr	r3, [pc, #596]	; (800d9e4 <tcp_input+0x724>)
 800d78e:	2200      	movs	r2, #0
 800d790:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	891a      	ldrh	r2, [r3, #8]
 800d796:	4b93      	ldr	r3, [pc, #588]	; (800d9e4 <tcp_input+0x724>)
 800d798:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d79a:	4a92      	ldr	r2, [pc, #584]	; (800d9e4 <tcp_input+0x724>)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d7a0:	4b91      	ldr	r3, [pc, #580]	; (800d9e8 <tcp_input+0x728>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a8f      	ldr	r2, [pc, #572]	; (800d9e4 <tcp_input+0x724>)
 800d7a6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d7a8:	4b90      	ldr	r3, [pc, #576]	; (800d9ec <tcp_input+0x72c>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d7ae:	4b90      	ldr	r3, [pc, #576]	; (800d9f0 <tcp_input+0x730>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d7b4:	4b8f      	ldr	r3, [pc, #572]	; (800d9f4 <tcp_input+0x734>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d7ba:	4b8f      	ldr	r3, [pc, #572]	; (800d9f8 <tcp_input+0x738>)
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	f003 0308 	and.w	r3, r3, #8
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d006      	beq.n	800d7d4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	7b5b      	ldrb	r3, [r3, #13]
 800d7ca:	f043 0301 	orr.w	r3, r3, #1
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d017      	beq.n	800d80c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d7dc:	69f8      	ldr	r0, [r7, #28]
 800d7de:	f7ff f929 	bl	800ca34 <tcp_process_refused_data>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f113 0f0d 	cmn.w	r3, #13
 800d7e8:	d007      	beq.n	800d7fa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00c      	beq.n	800d80c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d7f2:	4b82      	ldr	r3, [pc, #520]	; (800d9fc <tcp_input+0x73c>)
 800d7f4:	881b      	ldrh	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d008      	beq.n	800d80c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f040 80e3 	bne.w	800d9ca <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d804:	69f8      	ldr	r0, [r7, #28]
 800d806:	f003 f9ad 	bl	8010b64 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d80a:	e0de      	b.n	800d9ca <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d80c:	4a7c      	ldr	r2, [pc, #496]	; (800da00 <tcp_input+0x740>)
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d812:	69f8      	ldr	r0, [r7, #28]
 800d814:	f000 fb18 	bl	800de48 <tcp_process>
 800d818:	4603      	mov	r3, r0
 800d81a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d81c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d820:	f113 0f0d 	cmn.w	r3, #13
 800d824:	f000 80d3 	beq.w	800d9ce <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d828:	4b71      	ldr	r3, [pc, #452]	; (800d9f0 <tcp_input+0x730>)
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	f003 0308 	and.w	r3, r3, #8
 800d830:	2b00      	cmp	r3, #0
 800d832:	d015      	beq.n	800d860 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d008      	beq.n	800d850 <tcp_input+0x590>
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d844:	69fa      	ldr	r2, [r7, #28]
 800d846:	6912      	ldr	r2, [r2, #16]
 800d848:	f06f 010d 	mvn.w	r1, #13
 800d84c:	4610      	mov	r0, r2
 800d84e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d850:	69f9      	ldr	r1, [r7, #28]
 800d852:	486c      	ldr	r0, [pc, #432]	; (800da04 <tcp_input+0x744>)
 800d854:	f7ff fbbc 	bl	800cfd0 <tcp_pcb_remove>
        tcp_free(pcb);
 800d858:	69f8      	ldr	r0, [r7, #28]
 800d85a:	f7fe f9a9 	bl	800bbb0 <tcp_free>
 800d85e:	e0da      	b.n	800da16 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d864:	4b63      	ldr	r3, [pc, #396]	; (800d9f4 <tcp_input+0x734>)
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d01d      	beq.n	800d8a8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d86c:	4b61      	ldr	r3, [pc, #388]	; (800d9f4 <tcp_input+0x734>)
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00a      	beq.n	800d892 <tcp_input+0x5d2>
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d882:	69fa      	ldr	r2, [r7, #28]
 800d884:	6910      	ldr	r0, [r2, #16]
 800d886:	89fa      	ldrh	r2, [r7, #14]
 800d888:	69f9      	ldr	r1, [r7, #28]
 800d88a:	4798      	blx	r3
 800d88c:	4603      	mov	r3, r0
 800d88e:	74fb      	strb	r3, [r7, #19]
 800d890:	e001      	b.n	800d896 <tcp_input+0x5d6>
 800d892:	2300      	movs	r3, #0
 800d894:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d896:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d89a:	f113 0f0d 	cmn.w	r3, #13
 800d89e:	f000 8098 	beq.w	800d9d2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d8a2:	4b54      	ldr	r3, [pc, #336]	; (800d9f4 <tcp_input+0x734>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d8a8:	69f8      	ldr	r0, [r7, #28]
 800d8aa:	f000 f915 	bl	800dad8 <tcp_input_delayed_close>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f040 8090 	bne.w	800d9d6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d8b6:	4b4d      	ldr	r3, [pc, #308]	; (800d9ec <tcp_input+0x72c>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d041      	beq.n	800d942 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d006      	beq.n	800d8d4 <tcp_input+0x614>
 800d8c6:	4b50      	ldr	r3, [pc, #320]	; (800da08 <tcp_input+0x748>)
 800d8c8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d8cc:	494f      	ldr	r1, [pc, #316]	; (800da0c <tcp_input+0x74c>)
 800d8ce:	4850      	ldr	r0, [pc, #320]	; (800da10 <tcp_input+0x750>)
 800d8d0:	f008 f82c 	bl	801592c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	8b5b      	ldrh	r3, [r3, #26]
 800d8d8:	f003 0310 	and.w	r3, r3, #16
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d008      	beq.n	800d8f2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d8e0:	4b42      	ldr	r3, [pc, #264]	; (800d9ec <tcp_input+0x72c>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7fd fdb9 	bl	800b45c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d8ea:	69f8      	ldr	r0, [r7, #28]
 800d8ec:	f7fe fc48 	bl	800c180 <tcp_abort>
            goto aborted;
 800d8f0:	e091      	b.n	800da16 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00c      	beq.n	800d916 <tcp_input+0x656>
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	6918      	ldr	r0, [r3, #16]
 800d906:	4b39      	ldr	r3, [pc, #228]	; (800d9ec <tcp_input+0x72c>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	2300      	movs	r3, #0
 800d90c:	69f9      	ldr	r1, [r7, #28]
 800d90e:	47a0      	blx	r4
 800d910:	4603      	mov	r3, r0
 800d912:	74fb      	strb	r3, [r7, #19]
 800d914:	e008      	b.n	800d928 <tcp_input+0x668>
 800d916:	4b35      	ldr	r3, [pc, #212]	; (800d9ec <tcp_input+0x72c>)
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	2300      	movs	r3, #0
 800d91c:	69f9      	ldr	r1, [r7, #28]
 800d91e:	2000      	movs	r0, #0
 800d920:	f7ff f95e 	bl	800cbe0 <tcp_recv_null>
 800d924:	4603      	mov	r3, r0
 800d926:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d928:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d92c:	f113 0f0d 	cmn.w	r3, #13
 800d930:	d053      	beq.n	800d9da <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d932:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d93a:	4b2c      	ldr	r3, [pc, #176]	; (800d9ec <tcp_input+0x72c>)
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d942:	4b2b      	ldr	r3, [pc, #172]	; (800d9f0 <tcp_input+0x730>)
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	f003 0320 	and.w	r3, r3, #32
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d030      	beq.n	800d9b0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d952:	2b00      	cmp	r3, #0
 800d954:	d009      	beq.n	800d96a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d95a:	7b5a      	ldrb	r2, [r3, #13]
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d960:	f042 0220 	orr.w	r2, r2, #32
 800d964:	b2d2      	uxtb	r2, r2
 800d966:	735a      	strb	r2, [r3, #13]
 800d968:	e022      	b.n	800d9b0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d96e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d972:	d005      	beq.n	800d980 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d978:	3301      	adds	r3, #1
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00b      	beq.n	800d9a2 <tcp_input+0x6e2>
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	6918      	ldr	r0, [r3, #16]
 800d994:	2300      	movs	r3, #0
 800d996:	2200      	movs	r2, #0
 800d998:	69f9      	ldr	r1, [r7, #28]
 800d99a:	47a0      	blx	r4
 800d99c:	4603      	mov	r3, r0
 800d99e:	74fb      	strb	r3, [r7, #19]
 800d9a0:	e001      	b.n	800d9a6 <tcp_input+0x6e6>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d9a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9aa:	f113 0f0d 	cmn.w	r3, #13
 800d9ae:	d016      	beq.n	800d9de <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d9b0:	4b13      	ldr	r3, [pc, #76]	; (800da00 <tcp_input+0x740>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d9b6:	69f8      	ldr	r0, [r7, #28]
 800d9b8:	f000 f88e 	bl	800dad8 <tcp_input_delayed_close>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d128      	bne.n	800da14 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d9c2:	69f8      	ldr	r0, [r7, #28]
 800d9c4:	f002 fac8 	bl	800ff58 <tcp_output>
 800d9c8:	e025      	b.n	800da16 <tcp_input+0x756>
        goto aborted;
 800d9ca:	bf00      	nop
 800d9cc:	e023      	b.n	800da16 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d9ce:	bf00      	nop
 800d9d0:	e021      	b.n	800da16 <tcp_input+0x756>
              goto aborted;
 800d9d2:	bf00      	nop
 800d9d4:	e01f      	b.n	800da16 <tcp_input+0x756>
          goto aborted;
 800d9d6:	bf00      	nop
 800d9d8:	e01d      	b.n	800da16 <tcp_input+0x756>
            goto aborted;
 800d9da:	bf00      	nop
 800d9dc:	e01b      	b.n	800da16 <tcp_input+0x756>
              goto aborted;
 800d9de:	bf00      	nop
 800d9e0:	e019      	b.n	800da16 <tcp_input+0x756>
 800d9e2:	bf00      	nop
 800d9e4:	2002e660 	.word	0x2002e660
 800d9e8:	2002e670 	.word	0x2002e670
 800d9ec:	2002e690 	.word	0x2002e690
 800d9f0:	2002e68d 	.word	0x2002e68d
 800d9f4:	2002e688 	.word	0x2002e688
 800d9f8:	2002e68c 	.word	0x2002e68c
 800d9fc:	2002e68a 	.word	0x2002e68a
 800da00:	2002e694 	.word	0x2002e694
 800da04:	2002e654 	.word	0x2002e654
 800da08:	080180d0 	.word	0x080180d0
 800da0c:	08018284 	.word	0x08018284
 800da10:	0801811c 	.word	0x0801811c
          goto aborted;
 800da14:	bf00      	nop
    tcp_input_pcb = NULL;
 800da16:	4b27      	ldr	r3, [pc, #156]	; (800dab4 <tcp_input+0x7f4>)
 800da18:	2200      	movs	r2, #0
 800da1a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800da1c:	4b26      	ldr	r3, [pc, #152]	; (800dab8 <tcp_input+0x7f8>)
 800da1e:	2200      	movs	r2, #0
 800da20:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800da22:	4b26      	ldr	r3, [pc, #152]	; (800dabc <tcp_input+0x7fc>)
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d03f      	beq.n	800daaa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800da2a:	4b24      	ldr	r3, [pc, #144]	; (800dabc <tcp_input+0x7fc>)
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fd fd14 	bl	800b45c <pbuf_free>
      inseg.p = NULL;
 800da34:	4b21      	ldr	r3, [pc, #132]	; (800dabc <tcp_input+0x7fc>)
 800da36:	2200      	movs	r2, #0
 800da38:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800da3a:	e036      	b.n	800daaa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800da3c:	4b20      	ldr	r3, [pc, #128]	; (800dac0 <tcp_input+0x800>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	899b      	ldrh	r3, [r3, #12]
 800da42:	b29b      	uxth	r3, r3
 800da44:	4618      	mov	r0, r3
 800da46:	f7fc f917 	bl	8009c78 <lwip_htons>
 800da4a:	4603      	mov	r3, r0
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	f003 0304 	and.w	r3, r3, #4
 800da52:	2b00      	cmp	r3, #0
 800da54:	d118      	bne.n	800da88 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da56:	4b1b      	ldr	r3, [pc, #108]	; (800dac4 <tcp_input+0x804>)
 800da58:	6819      	ldr	r1, [r3, #0]
 800da5a:	4b1b      	ldr	r3, [pc, #108]	; (800dac8 <tcp_input+0x808>)
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	461a      	mov	r2, r3
 800da60:	4b1a      	ldr	r3, [pc, #104]	; (800dacc <tcp_input+0x80c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da66:	4b16      	ldr	r3, [pc, #88]	; (800dac0 <tcp_input+0x800>)
 800da68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da6a:	885b      	ldrh	r3, [r3, #2]
 800da6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da6e:	4a14      	ldr	r2, [pc, #80]	; (800dac0 <tcp_input+0x800>)
 800da70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da72:	8812      	ldrh	r2, [r2, #0]
 800da74:	b292      	uxth	r2, r2
 800da76:	9202      	str	r2, [sp, #8]
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	4b15      	ldr	r3, [pc, #84]	; (800dad0 <tcp_input+0x810>)
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4b15      	ldr	r3, [pc, #84]	; (800dad4 <tcp_input+0x814>)
 800da80:	4602      	mov	r2, r0
 800da82:	2000      	movs	r0, #0
 800da84:	f003 f81c 	bl	8010ac0 <tcp_rst>
    pbuf_free(p);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7fd fce7 	bl	800b45c <pbuf_free>
  return;
 800da8e:	e00c      	b.n	800daaa <tcp_input+0x7ea>
    goto dropped;
 800da90:	bf00      	nop
 800da92:	e006      	b.n	800daa2 <tcp_input+0x7e2>
    goto dropped;
 800da94:	bf00      	nop
 800da96:	e004      	b.n	800daa2 <tcp_input+0x7e2>
    goto dropped;
 800da98:	bf00      	nop
 800da9a:	e002      	b.n	800daa2 <tcp_input+0x7e2>
      goto dropped;
 800da9c:	bf00      	nop
 800da9e:	e000      	b.n	800daa2 <tcp_input+0x7e2>
      goto dropped;
 800daa0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7fd fcda 	bl	800b45c <pbuf_free>
 800daa8:	e000      	b.n	800daac <tcp_input+0x7ec>
  return;
 800daaa:	bf00      	nop
}
 800daac:	3724      	adds	r7, #36	; 0x24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd90      	pop	{r4, r7, pc}
 800dab2:	bf00      	nop
 800dab4:	2002e694 	.word	0x2002e694
 800dab8:	2002e690 	.word	0x2002e690
 800dabc:	2002e660 	.word	0x2002e660
 800dac0:	2002e670 	.word	0x2002e670
 800dac4:	2002e684 	.word	0x2002e684
 800dac8:	2002e68a 	.word	0x2002e68a
 800dacc:	2002e680 	.word	0x2002e680
 800dad0:	2002af04 	.word	0x2002af04
 800dad4:	2002af08 	.word	0x2002af08

0800dad8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d106      	bne.n	800daf4 <tcp_input_delayed_close+0x1c>
 800dae6:	4b17      	ldr	r3, [pc, #92]	; (800db44 <tcp_input_delayed_close+0x6c>)
 800dae8:	f240 225a 	movw	r2, #602	; 0x25a
 800daec:	4916      	ldr	r1, [pc, #88]	; (800db48 <tcp_input_delayed_close+0x70>)
 800daee:	4817      	ldr	r0, [pc, #92]	; (800db4c <tcp_input_delayed_close+0x74>)
 800daf0:	f007 ff1c 	bl	801592c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800daf4:	4b16      	ldr	r3, [pc, #88]	; (800db50 <tcp_input_delayed_close+0x78>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	f003 0310 	and.w	r3, r3, #16
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01c      	beq.n	800db3a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	8b5b      	ldrh	r3, [r3, #26]
 800db04:	f003 0310 	and.w	r3, r3, #16
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10d      	bne.n	800db28 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db12:	2b00      	cmp	r3, #0
 800db14:	d008      	beq.n	800db28 <tcp_input_delayed_close+0x50>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	6912      	ldr	r2, [r2, #16]
 800db20:	f06f 010e 	mvn.w	r1, #14
 800db24:	4610      	mov	r0, r2
 800db26:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800db28:	6879      	ldr	r1, [r7, #4]
 800db2a:	480a      	ldr	r0, [pc, #40]	; (800db54 <tcp_input_delayed_close+0x7c>)
 800db2c:	f7ff fa50 	bl	800cfd0 <tcp_pcb_remove>
    tcp_free(pcb);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f7fe f83d 	bl	800bbb0 <tcp_free>
    return 1;
 800db36:	2301      	movs	r3, #1
 800db38:	e000      	b.n	800db3c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	080180d0 	.word	0x080180d0
 800db48:	080182a0 	.word	0x080182a0
 800db4c:	0801811c 	.word	0x0801811c
 800db50:	2002e68d 	.word	0x2002e68d
 800db54:	2002e654 	.word	0x2002e654

0800db58 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800db58:	b590      	push	{r4, r7, lr}
 800db5a:	b08b      	sub	sp, #44	; 0x2c
 800db5c:	af04      	add	r7, sp, #16
 800db5e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800db60:	4b6f      	ldr	r3, [pc, #444]	; (800dd20 <tcp_listen_input+0x1c8>)
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	f003 0304 	and.w	r3, r3, #4
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f040 80d2 	bne.w	800dd12 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d106      	bne.n	800db82 <tcp_listen_input+0x2a>
 800db74:	4b6b      	ldr	r3, [pc, #428]	; (800dd24 <tcp_listen_input+0x1cc>)
 800db76:	f240 2281 	movw	r2, #641	; 0x281
 800db7a:	496b      	ldr	r1, [pc, #428]	; (800dd28 <tcp_listen_input+0x1d0>)
 800db7c:	486b      	ldr	r0, [pc, #428]	; (800dd2c <tcp_listen_input+0x1d4>)
 800db7e:	f007 fed5 	bl	801592c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800db82:	4b67      	ldr	r3, [pc, #412]	; (800dd20 <tcp_listen_input+0x1c8>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	f003 0310 	and.w	r3, r3, #16
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d019      	beq.n	800dbc2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db8e:	4b68      	ldr	r3, [pc, #416]	; (800dd30 <tcp_listen_input+0x1d8>)
 800db90:	6819      	ldr	r1, [r3, #0]
 800db92:	4b68      	ldr	r3, [pc, #416]	; (800dd34 <tcp_listen_input+0x1dc>)
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	4b67      	ldr	r3, [pc, #412]	; (800dd38 <tcp_listen_input+0x1e0>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db9e:	4b67      	ldr	r3, [pc, #412]	; (800dd3c <tcp_listen_input+0x1e4>)
 800dba0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dba2:	885b      	ldrh	r3, [r3, #2]
 800dba4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dba6:	4a65      	ldr	r2, [pc, #404]	; (800dd3c <tcp_listen_input+0x1e4>)
 800dba8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbaa:	8812      	ldrh	r2, [r2, #0]
 800dbac:	b292      	uxth	r2, r2
 800dbae:	9202      	str	r2, [sp, #8]
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	4b63      	ldr	r3, [pc, #396]	; (800dd40 <tcp_listen_input+0x1e8>)
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	4b63      	ldr	r3, [pc, #396]	; (800dd44 <tcp_listen_input+0x1ec>)
 800dbb8:	4602      	mov	r2, r0
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f002 ff80 	bl	8010ac0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800dbc0:	e0a9      	b.n	800dd16 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800dbc2:	4b57      	ldr	r3, [pc, #348]	; (800dd20 <tcp_listen_input+0x1c8>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 80a3 	beq.w	800dd16 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	7d5b      	ldrb	r3, [r3, #21]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff f927 	bl	800ce28 <tcp_alloc>
 800dbda:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d111      	bne.n	800dc06 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00a      	beq.n	800dc00 <tcp_listen_input+0xa8>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	6910      	ldr	r0, [r2, #16]
 800dbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	4798      	blx	r3
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	73bb      	strb	r3, [r7, #14]
      return;
 800dbfe:	e08b      	b.n	800dd18 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dc00:	23f0      	movs	r3, #240	; 0xf0
 800dc02:	73bb      	strb	r3, [r7, #14]
      return;
 800dc04:	e088      	b.n	800dd18 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dc06:	4b50      	ldr	r3, [pc, #320]	; (800dd48 <tcp_listen_input+0x1f0>)
 800dc08:	695a      	ldr	r2, [r3, #20]
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dc0e:	4b4e      	ldr	r3, [pc, #312]	; (800dd48 <tcp_listen_input+0x1f0>)
 800dc10:	691a      	ldr	r2, [r3, #16]
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	8ada      	ldrh	r2, [r3, #22]
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dc1e:	4b47      	ldr	r3, [pc, #284]	; (800dd3c <tcp_listen_input+0x1e4>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	881b      	ldrh	r3, [r3, #0]
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	2203      	movs	r2, #3
 800dc2e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dc30:	4b41      	ldr	r3, [pc, #260]	; (800dd38 <tcp_listen_input+0x1e0>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	1c5a      	adds	r2, r3, #1
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800dc42:	6978      	ldr	r0, [r7, #20]
 800dc44:	f7ff fa58 	bl	800d0f8 <tcp_next_iss>
 800dc48:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dc62:	4b35      	ldr	r3, [pc, #212]	; (800dd38 <tcp_listen_input+0x1e0>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	1e5a      	subs	r2, r3, #1
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	691a      	ldr	r2, [r3, #16]
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	7a5b      	ldrb	r3, [r3, #9]
 800dc7e:	f003 030c 	and.w	r3, r3, #12
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7a1a      	ldrb	r2, [r3, #8]
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dc90:	4b2e      	ldr	r3, [pc, #184]	; (800dd4c <tcp_listen_input+0x1f4>)
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	60da      	str	r2, [r3, #12]
 800dc98:	4a2c      	ldr	r2, [pc, #176]	; (800dd4c <tcp_listen_input+0x1f4>)
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	6013      	str	r3, [r2, #0]
 800dc9e:	f003 f8d1 	bl	8010e44 <tcp_timer_needed>
 800dca2:	4b2b      	ldr	r3, [pc, #172]	; (800dd50 <tcp_listen_input+0x1f8>)
 800dca4:	2201      	movs	r2, #1
 800dca6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dca8:	6978      	ldr	r0, [r7, #20]
 800dcaa:	f001 fd8f 	bl	800f7cc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dcae:	4b23      	ldr	r3, [pc, #140]	; (800dd3c <tcp_listen_input+0x1e4>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	89db      	ldrh	r3, [r3, #14]
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	3304      	adds	r3, #4
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f004 fffb 	bl	8012ccc <ip4_route>
 800dcd6:	4601      	mov	r1, r0
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	461a      	mov	r2, r3
 800dcde:	4620      	mov	r0, r4
 800dce0:	f7ff fa30 	bl	800d144 <tcp_eff_send_mss_netif>
 800dce4:	4603      	mov	r3, r0
 800dce6:	461a      	mov	r2, r3
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800dcec:	2112      	movs	r1, #18
 800dcee:	6978      	ldr	r0, [r7, #20]
 800dcf0:	f002 f844 	bl	800fd7c <tcp_enqueue_flags>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dcf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d004      	beq.n	800dd0a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800dd00:	2100      	movs	r1, #0
 800dd02:	6978      	ldr	r0, [r7, #20]
 800dd04:	f7fe f97e 	bl	800c004 <tcp_abandon>
      return;
 800dd08:	e006      	b.n	800dd18 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800dd0a:	6978      	ldr	r0, [r7, #20]
 800dd0c:	f002 f924 	bl	800ff58 <tcp_output>
  return;
 800dd10:	e001      	b.n	800dd16 <tcp_listen_input+0x1be>
    return;
 800dd12:	bf00      	nop
 800dd14:	e000      	b.n	800dd18 <tcp_listen_input+0x1c0>
  return;
 800dd16:	bf00      	nop
}
 800dd18:	371c      	adds	r7, #28
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd90      	pop	{r4, r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	2002e68c 	.word	0x2002e68c
 800dd24:	080180d0 	.word	0x080180d0
 800dd28:	080182c8 	.word	0x080182c8
 800dd2c:	0801811c 	.word	0x0801811c
 800dd30:	2002e684 	.word	0x2002e684
 800dd34:	2002e68a 	.word	0x2002e68a
 800dd38:	2002e680 	.word	0x2002e680
 800dd3c:	2002e670 	.word	0x2002e670
 800dd40:	2002af04 	.word	0x2002af04
 800dd44:	2002af08 	.word	0x2002af08
 800dd48:	2002aef4 	.word	0x2002aef4
 800dd4c:	2002e654 	.word	0x2002e654
 800dd50:	2002e65c 	.word	0x2002e65c

0800dd54 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af04      	add	r7, sp, #16
 800dd5a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dd5c:	4b2f      	ldr	r3, [pc, #188]	; (800de1c <tcp_timewait_input+0xc8>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	f003 0304 	and.w	r3, r3, #4
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d153      	bne.n	800de10 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d106      	bne.n	800dd7c <tcp_timewait_input+0x28>
 800dd6e:	4b2c      	ldr	r3, [pc, #176]	; (800de20 <tcp_timewait_input+0xcc>)
 800dd70:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dd74:	492b      	ldr	r1, [pc, #172]	; (800de24 <tcp_timewait_input+0xd0>)
 800dd76:	482c      	ldr	r0, [pc, #176]	; (800de28 <tcp_timewait_input+0xd4>)
 800dd78:	f007 fdd8 	bl	801592c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dd7c:	4b27      	ldr	r3, [pc, #156]	; (800de1c <tcp_timewait_input+0xc8>)
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	f003 0302 	and.w	r3, r3, #2
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d02a      	beq.n	800ddde <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dd88:	4b28      	ldr	r3, [pc, #160]	; (800de2c <tcp_timewait_input+0xd8>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	db2d      	blt.n	800ddf2 <tcp_timewait_input+0x9e>
 800dd96:	4b25      	ldr	r3, [pc, #148]	; (800de2c <tcp_timewait_input+0xd8>)
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9e:	6879      	ldr	r1, [r7, #4]
 800dda0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dda2:	440b      	add	r3, r1
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	dc23      	bgt.n	800ddf2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddaa:	4b21      	ldr	r3, [pc, #132]	; (800de30 <tcp_timewait_input+0xdc>)
 800ddac:	6819      	ldr	r1, [r3, #0]
 800ddae:	4b21      	ldr	r3, [pc, #132]	; (800de34 <tcp_timewait_input+0xe0>)
 800ddb0:	881b      	ldrh	r3, [r3, #0]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	4b1d      	ldr	r3, [pc, #116]	; (800de2c <tcp_timewait_input+0xd8>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddba:	4b1f      	ldr	r3, [pc, #124]	; (800de38 <tcp_timewait_input+0xe4>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddbe:	885b      	ldrh	r3, [r3, #2]
 800ddc0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddc2:	4a1d      	ldr	r2, [pc, #116]	; (800de38 <tcp_timewait_input+0xe4>)
 800ddc4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddc6:	8812      	ldrh	r2, [r2, #0]
 800ddc8:	b292      	uxth	r2, r2
 800ddca:	9202      	str	r2, [sp, #8]
 800ddcc:	9301      	str	r3, [sp, #4]
 800ddce:	4b1b      	ldr	r3, [pc, #108]	; (800de3c <tcp_timewait_input+0xe8>)
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	4b1b      	ldr	r3, [pc, #108]	; (800de40 <tcp_timewait_input+0xec>)
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f002 fe72 	bl	8010ac0 <tcp_rst>
      return;
 800dddc:	e01b      	b.n	800de16 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ddde:	4b0f      	ldr	r3, [pc, #60]	; (800de1c <tcp_timewait_input+0xc8>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	f003 0301 	and.w	r3, r3, #1
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d003      	beq.n	800ddf2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ddea:	4b16      	ldr	r3, [pc, #88]	; (800de44 <tcp_timewait_input+0xf0>)
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ddf2:	4b10      	ldr	r3, [pc, #64]	; (800de34 <tcp_timewait_input+0xe0>)
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00c      	beq.n	800de14 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	8b5b      	ldrh	r3, [r3, #26]
 800ddfe:	f043 0302 	orr.w	r3, r3, #2
 800de02:	b29a      	uxth	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f002 f8a5 	bl	800ff58 <tcp_output>
  }
  return;
 800de0e:	e001      	b.n	800de14 <tcp_timewait_input+0xc0>
    return;
 800de10:	bf00      	nop
 800de12:	e000      	b.n	800de16 <tcp_timewait_input+0xc2>
  return;
 800de14:	bf00      	nop
}
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	2002e68c 	.word	0x2002e68c
 800de20:	080180d0 	.word	0x080180d0
 800de24:	080182e8 	.word	0x080182e8
 800de28:	0801811c 	.word	0x0801811c
 800de2c:	2002e680 	.word	0x2002e680
 800de30:	2002e684 	.word	0x2002e684
 800de34:	2002e68a 	.word	0x2002e68a
 800de38:	2002e670 	.word	0x2002e670
 800de3c:	2002af04 	.word	0x2002af04
 800de40:	2002af08 	.word	0x2002af08
 800de44:	2002e648 	.word	0x2002e648

0800de48 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800de48:	b590      	push	{r4, r7, lr}
 800de4a:	b08d      	sub	sp, #52	; 0x34
 800de4c:	af04      	add	r7, sp, #16
 800de4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d106      	bne.n	800de6c <tcp_process+0x24>
 800de5e:	4b9d      	ldr	r3, [pc, #628]	; (800e0d4 <tcp_process+0x28c>)
 800de60:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800de64:	499c      	ldr	r1, [pc, #624]	; (800e0d8 <tcp_process+0x290>)
 800de66:	489d      	ldr	r0, [pc, #628]	; (800e0dc <tcp_process+0x294>)
 800de68:	f007 fd60 	bl	801592c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800de6c:	4b9c      	ldr	r3, [pc, #624]	; (800e0e0 <tcp_process+0x298>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	f003 0304 	and.w	r3, r3, #4
 800de74:	2b00      	cmp	r3, #0
 800de76:	d04e      	beq.n	800df16 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7d1b      	ldrb	r3, [r3, #20]
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d108      	bne.n	800de92 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de84:	4b97      	ldr	r3, [pc, #604]	; (800e0e4 <tcp_process+0x29c>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d123      	bne.n	800ded4 <tcp_process+0x8c>
        acceptable = 1;
 800de8c:	2301      	movs	r3, #1
 800de8e:	76fb      	strb	r3, [r7, #27]
 800de90:	e020      	b.n	800ded4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de96:	4b94      	ldr	r3, [pc, #592]	; (800e0e8 <tcp_process+0x2a0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d102      	bne.n	800dea4 <tcp_process+0x5c>
        acceptable = 1;
 800de9e:	2301      	movs	r3, #1
 800dea0:	76fb      	strb	r3, [r7, #27]
 800dea2:	e017      	b.n	800ded4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dea4:	4b90      	ldr	r3, [pc, #576]	; (800e0e8 <tcp_process+0x2a0>)
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	db10      	blt.n	800ded4 <tcp_process+0x8c>
 800deb2:	4b8d      	ldr	r3, [pc, #564]	; (800e0e8 <tcp_process+0x2a0>)
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800debe:	440b      	add	r3, r1
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	dc06      	bgt.n	800ded4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	8b5b      	ldrh	r3, [r3, #26]
 800deca:	f043 0302 	orr.w	r3, r3, #2
 800dece:	b29a      	uxth	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ded4:	7efb      	ldrb	r3, [r7, #27]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d01b      	beq.n	800df12 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	7d1b      	ldrb	r3, [r3, #20]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d106      	bne.n	800def0 <tcp_process+0xa8>
 800dee2:	4b7c      	ldr	r3, [pc, #496]	; (800e0d4 <tcp_process+0x28c>)
 800dee4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dee8:	4980      	ldr	r1, [pc, #512]	; (800e0ec <tcp_process+0x2a4>)
 800deea:	487c      	ldr	r0, [pc, #496]	; (800e0dc <tcp_process+0x294>)
 800deec:	f007 fd1e 	bl	801592c <iprintf>
      recv_flags |= TF_RESET;
 800def0:	4b7f      	ldr	r3, [pc, #508]	; (800e0f0 <tcp_process+0x2a8>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	f043 0308 	orr.w	r3, r3, #8
 800def8:	b2da      	uxtb	r2, r3
 800defa:	4b7d      	ldr	r3, [pc, #500]	; (800e0f0 <tcp_process+0x2a8>)
 800defc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	8b5b      	ldrh	r3, [r3, #26]
 800df02:	f023 0301 	bic.w	r3, r3, #1
 800df06:	b29a      	uxth	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800df0c:	f06f 030d 	mvn.w	r3, #13
 800df10:	e37a      	b.n	800e608 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800df12:	2300      	movs	r3, #0
 800df14:	e378      	b.n	800e608 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800df16:	4b72      	ldr	r3, [pc, #456]	; (800e0e0 <tcp_process+0x298>)
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	f003 0302 	and.w	r3, r3, #2
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d010      	beq.n	800df44 <tcp_process+0xfc>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	7d1b      	ldrb	r3, [r3, #20]
 800df26:	2b02      	cmp	r3, #2
 800df28:	d00c      	beq.n	800df44 <tcp_process+0xfc>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	7d1b      	ldrb	r3, [r3, #20]
 800df2e:	2b03      	cmp	r3, #3
 800df30:	d008      	beq.n	800df44 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	8b5b      	ldrh	r3, [r3, #26]
 800df36:	f043 0302 	orr.w	r3, r3, #2
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800df40:	2300      	movs	r3, #0
 800df42:	e361      	b.n	800e608 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	8b5b      	ldrh	r3, [r3, #26]
 800df48:	f003 0310 	and.w	r3, r3, #16
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d103      	bne.n	800df58 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800df50:	4b68      	ldr	r3, [pc, #416]	; (800e0f4 <tcp_process+0x2ac>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f001 fc2f 	bl	800f7cc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	7d1b      	ldrb	r3, [r3, #20]
 800df72:	3b02      	subs	r3, #2
 800df74:	2b07      	cmp	r3, #7
 800df76:	f200 8337 	bhi.w	800e5e8 <tcp_process+0x7a0>
 800df7a:	a201      	add	r2, pc, #4	; (adr r2, 800df80 <tcp_process+0x138>)
 800df7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df80:	0800dfa1 	.word	0x0800dfa1
 800df84:	0800e1d1 	.word	0x0800e1d1
 800df88:	0800e349 	.word	0x0800e349
 800df8c:	0800e373 	.word	0x0800e373
 800df90:	0800e497 	.word	0x0800e497
 800df94:	0800e349 	.word	0x0800e349
 800df98:	0800e523 	.word	0x0800e523
 800df9c:	0800e5b3 	.word	0x0800e5b3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dfa0:	4b4f      	ldr	r3, [pc, #316]	; (800e0e0 <tcp_process+0x298>)
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	f003 0310 	and.w	r3, r3, #16
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 80e4 	beq.w	800e176 <tcp_process+0x32e>
 800dfae:	4b4c      	ldr	r3, [pc, #304]	; (800e0e0 <tcp_process+0x298>)
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	f003 0302 	and.w	r3, r3, #2
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f000 80dd 	beq.w	800e176 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfc0:	1c5a      	adds	r2, r3, #1
 800dfc2:	4b48      	ldr	r3, [pc, #288]	; (800e0e4 <tcp_process+0x29c>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	f040 80d5 	bne.w	800e176 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dfcc:	4b46      	ldr	r3, [pc, #280]	; (800e0e8 <tcp_process+0x2a0>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	1c5a      	adds	r2, r3, #1
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dfde:	4b41      	ldr	r3, [pc, #260]	; (800e0e4 <tcp_process+0x29c>)
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dfe6:	4b44      	ldr	r3, [pc, #272]	; (800e0f8 <tcp_process+0x2b0>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	89db      	ldrh	r3, [r3, #14]
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e000:	4b39      	ldr	r3, [pc, #228]	; (800e0e8 <tcp_process+0x2a0>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	1e5a      	subs	r2, r3, #1
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2204      	movs	r2, #4
 800e00e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3304      	adds	r3, #4
 800e018:	4618      	mov	r0, r3
 800e01a:	f004 fe57 	bl	8012ccc <ip4_route>
 800e01e:	4601      	mov	r1, r0
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	3304      	adds	r3, #4
 800e024:	461a      	mov	r2, r3
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff f88c 	bl	800d144 <tcp_eff_send_mss_netif>
 800e02c:	4603      	mov	r3, r0
 800e02e:	461a      	mov	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e038:	009a      	lsls	r2, r3, #2
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	f241 111c 	movw	r1, #4380	; 0x111c
 800e044:	428b      	cmp	r3, r1
 800e046:	bf38      	it	cc
 800e048:	460b      	movcc	r3, r1
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d204      	bcs.n	800e058 <tcp_process+0x210>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	b29b      	uxth	r3, r3
 800e056:	e00d      	b.n	800e074 <tcp_process+0x22c>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e05c:	005b      	lsls	r3, r3, #1
 800e05e:	f241 121c 	movw	r2, #4380	; 0x111c
 800e062:	4293      	cmp	r3, r2
 800e064:	d904      	bls.n	800e070 <tcp_process+0x228>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e06a:	005b      	lsls	r3, r3, #1
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	e001      	b.n	800e074 <tcp_process+0x22c>
 800e070:	f241 131c 	movw	r3, #4380	; 0x111c
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e080:	2b00      	cmp	r3, #0
 800e082:	d106      	bne.n	800e092 <tcp_process+0x24a>
 800e084:	4b13      	ldr	r3, [pc, #76]	; (800e0d4 <tcp_process+0x28c>)
 800e086:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e08a:	491c      	ldr	r1, [pc, #112]	; (800e0fc <tcp_process+0x2b4>)
 800e08c:	4813      	ldr	r0, [pc, #76]	; (800e0dc <tcp_process+0x294>)
 800e08e:	f007 fc4d 	bl	801592c <iprintf>
        --pcb->snd_queuelen;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e098:	3b01      	subs	r3, #1
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d12a      	bne.n	800e104 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d106      	bne.n	800e0c8 <tcp_process+0x280>
 800e0ba:	4b06      	ldr	r3, [pc, #24]	; (800e0d4 <tcp_process+0x28c>)
 800e0bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e0c0:	490f      	ldr	r1, [pc, #60]	; (800e100 <tcp_process+0x2b8>)
 800e0c2:	4806      	ldr	r0, [pc, #24]	; (800e0dc <tcp_process+0x294>)
 800e0c4:	f007 fc32 	bl	801592c <iprintf>
          pcb->unsent = rseg->next;
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	66da      	str	r2, [r3, #108]	; 0x6c
 800e0d0:	e01c      	b.n	800e10c <tcp_process+0x2c4>
 800e0d2:	bf00      	nop
 800e0d4:	080180d0 	.word	0x080180d0
 800e0d8:	08018308 	.word	0x08018308
 800e0dc:	0801811c 	.word	0x0801811c
 800e0e0:	2002e68c 	.word	0x2002e68c
 800e0e4:	2002e684 	.word	0x2002e684
 800e0e8:	2002e680 	.word	0x2002e680
 800e0ec:	08018324 	.word	0x08018324
 800e0f0:	2002e68d 	.word	0x2002e68d
 800e0f4:	2002e648 	.word	0x2002e648
 800e0f8:	2002e670 	.word	0x2002e670
 800e0fc:	08018344 	.word	0x08018344
 800e100:	0801835c 	.word	0x0801835c
        } else {
          pcb->unacked = rseg->next;
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e10c:	69f8      	ldr	r0, [r7, #28]
 800e10e:	f7fe fd22 	bl	800cb56 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e116:	2b00      	cmp	r3, #0
 800e118:	d104      	bne.n	800e124 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e120:	861a      	strh	r2, [r3, #48]	; 0x30
 800e122:	e006      	b.n	800e132 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00a      	beq.n	800e152 <tcp_process+0x30a>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	6910      	ldr	r0, [r2, #16]
 800e146:	2200      	movs	r2, #0
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	4798      	blx	r3
 800e14c:	4603      	mov	r3, r0
 800e14e:	76bb      	strb	r3, [r7, #26]
 800e150:	e001      	b.n	800e156 <tcp_process+0x30e>
 800e152:	2300      	movs	r3, #0
 800e154:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e156:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e15a:	f113 0f0d 	cmn.w	r3, #13
 800e15e:	d102      	bne.n	800e166 <tcp_process+0x31e>
          return ERR_ABRT;
 800e160:	f06f 030c 	mvn.w	r3, #12
 800e164:	e250      	b.n	800e608 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	8b5b      	ldrh	r3, [r3, #26]
 800e16a:	f043 0302 	orr.w	r3, r3, #2
 800e16e:	b29a      	uxth	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e174:	e23a      	b.n	800e5ec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e176:	4b98      	ldr	r3, [pc, #608]	; (800e3d8 <tcp_process+0x590>)
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	f003 0310 	and.w	r3, r3, #16
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f000 8234 	beq.w	800e5ec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e184:	4b95      	ldr	r3, [pc, #596]	; (800e3dc <tcp_process+0x594>)
 800e186:	6819      	ldr	r1, [r3, #0]
 800e188:	4b95      	ldr	r3, [pc, #596]	; (800e3e0 <tcp_process+0x598>)
 800e18a:	881b      	ldrh	r3, [r3, #0]
 800e18c:	461a      	mov	r2, r3
 800e18e:	4b95      	ldr	r3, [pc, #596]	; (800e3e4 <tcp_process+0x59c>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e194:	4b94      	ldr	r3, [pc, #592]	; (800e3e8 <tcp_process+0x5a0>)
 800e196:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e198:	885b      	ldrh	r3, [r3, #2]
 800e19a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e19c:	4a92      	ldr	r2, [pc, #584]	; (800e3e8 <tcp_process+0x5a0>)
 800e19e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1a0:	8812      	ldrh	r2, [r2, #0]
 800e1a2:	b292      	uxth	r2, r2
 800e1a4:	9202      	str	r2, [sp, #8]
 800e1a6:	9301      	str	r3, [sp, #4]
 800e1a8:	4b90      	ldr	r3, [pc, #576]	; (800e3ec <tcp_process+0x5a4>)
 800e1aa:	9300      	str	r3, [sp, #0]
 800e1ac:	4b90      	ldr	r3, [pc, #576]	; (800e3f0 <tcp_process+0x5a8>)
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f002 fc85 	bl	8010ac0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1bc:	2b05      	cmp	r3, #5
 800e1be:	f200 8215 	bhi.w	800e5ec <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f002 fa4f 	bl	801066c <tcp_rexmit_rto>
      break;
 800e1ce:	e20d      	b.n	800e5ec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e1d0:	4b81      	ldr	r3, [pc, #516]	; (800e3d8 <tcp_process+0x590>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	f003 0310 	and.w	r3, r3, #16
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f000 80a1 	beq.w	800e320 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e1de:	4b7f      	ldr	r3, [pc, #508]	; (800e3dc <tcp_process+0x594>)
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	db7e      	blt.n	800e2ec <tcp_process+0x4a4>
 800e1ee:	4b7b      	ldr	r3, [pc, #492]	; (800e3dc <tcp_process+0x594>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	dc77      	bgt.n	800e2ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2204      	movs	r2, #4
 800e200:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e206:	2b00      	cmp	r3, #0
 800e208:	d102      	bne.n	800e210 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e20a:	23fa      	movs	r3, #250	; 0xfa
 800e20c:	76bb      	strb	r3, [r7, #26]
 800e20e:	e01d      	b.n	800e24c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d106      	bne.n	800e228 <tcp_process+0x3e0>
 800e21a:	4b76      	ldr	r3, [pc, #472]	; (800e3f4 <tcp_process+0x5ac>)
 800e21c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e220:	4975      	ldr	r1, [pc, #468]	; (800e3f8 <tcp_process+0x5b0>)
 800e222:	4876      	ldr	r0, [pc, #472]	; (800e3fc <tcp_process+0x5b4>)
 800e224:	f007 fb82 	bl	801592c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00a      	beq.n	800e248 <tcp_process+0x400>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	6910      	ldr	r0, [r2, #16]
 800e23c:	2200      	movs	r2, #0
 800e23e:	6879      	ldr	r1, [r7, #4]
 800e240:	4798      	blx	r3
 800e242:	4603      	mov	r3, r0
 800e244:	76bb      	strb	r3, [r7, #26]
 800e246:	e001      	b.n	800e24c <tcp_process+0x404>
 800e248:	23f0      	movs	r3, #240	; 0xf0
 800e24a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e24c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00a      	beq.n	800e26a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e254:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e258:	f113 0f0d 	cmn.w	r3, #13
 800e25c:	d002      	beq.n	800e264 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7fd ff8e 	bl	800c180 <tcp_abort>
            }
            return ERR_ABRT;
 800e264:	f06f 030c 	mvn.w	r3, #12
 800e268:	e1ce      	b.n	800e608 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fae0 	bl	800e830 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e270:	4b63      	ldr	r3, [pc, #396]	; (800e400 <tcp_process+0x5b8>)
 800e272:	881b      	ldrh	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d005      	beq.n	800e284 <tcp_process+0x43c>
            recv_acked--;
 800e278:	4b61      	ldr	r3, [pc, #388]	; (800e400 <tcp_process+0x5b8>)
 800e27a:	881b      	ldrh	r3, [r3, #0]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	b29a      	uxth	r2, r3
 800e280:	4b5f      	ldr	r3, [pc, #380]	; (800e400 <tcp_process+0x5b8>)
 800e282:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e288:	009a      	lsls	r2, r3, #2
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	f241 111c 	movw	r1, #4380	; 0x111c
 800e294:	428b      	cmp	r3, r1
 800e296:	bf38      	it	cc
 800e298:	460b      	movcc	r3, r1
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d204      	bcs.n	800e2a8 <tcp_process+0x460>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	e00d      	b.n	800e2c4 <tcp_process+0x47c>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	f241 121c 	movw	r2, #4380	; 0x111c
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d904      	bls.n	800e2c0 <tcp_process+0x478>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2ba:	005b      	lsls	r3, r3, #1
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	e001      	b.n	800e2c4 <tcp_process+0x47c>
 800e2c0:	f241 131c 	movw	r3, #4380	; 0x111c
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e2ca:	4b4e      	ldr	r3, [pc, #312]	; (800e404 <tcp_process+0x5bc>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	f003 0320 	and.w	r3, r3, #32
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d037      	beq.n	800e346 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	8b5b      	ldrh	r3, [r3, #26]
 800e2da:	f043 0302 	orr.w	r3, r3, #2
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2207      	movs	r2, #7
 800e2e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e2ea:	e02c      	b.n	800e346 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2ec:	4b3b      	ldr	r3, [pc, #236]	; (800e3dc <tcp_process+0x594>)
 800e2ee:	6819      	ldr	r1, [r3, #0]
 800e2f0:	4b3b      	ldr	r3, [pc, #236]	; (800e3e0 <tcp_process+0x598>)
 800e2f2:	881b      	ldrh	r3, [r3, #0]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	4b3b      	ldr	r3, [pc, #236]	; (800e3e4 <tcp_process+0x59c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2fc:	4b3a      	ldr	r3, [pc, #232]	; (800e3e8 <tcp_process+0x5a0>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e300:	885b      	ldrh	r3, [r3, #2]
 800e302:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e304:	4a38      	ldr	r2, [pc, #224]	; (800e3e8 <tcp_process+0x5a0>)
 800e306:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e308:	8812      	ldrh	r2, [r2, #0]
 800e30a:	b292      	uxth	r2, r2
 800e30c:	9202      	str	r2, [sp, #8]
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	4b36      	ldr	r3, [pc, #216]	; (800e3ec <tcp_process+0x5a4>)
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	4b36      	ldr	r3, [pc, #216]	; (800e3f0 <tcp_process+0x5a8>)
 800e316:	4602      	mov	r2, r0
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f002 fbd1 	bl	8010ac0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e31e:	e167      	b.n	800e5f0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e320:	4b2d      	ldr	r3, [pc, #180]	; (800e3d8 <tcp_process+0x590>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	f003 0302 	and.w	r3, r3, #2
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f000 8161 	beq.w	800e5f0 <tcp_process+0x7a8>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e332:	1e5a      	subs	r2, r3, #1
 800e334:	4b2b      	ldr	r3, [pc, #172]	; (800e3e4 <tcp_process+0x59c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	429a      	cmp	r2, r3
 800e33a:	f040 8159 	bne.w	800e5f0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f002 f9b6 	bl	80106b0 <tcp_rexmit>
      break;
 800e344:	e154      	b.n	800e5f0 <tcp_process+0x7a8>
 800e346:	e153      	b.n	800e5f0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fa71 	bl	800e830 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e34e:	4b2d      	ldr	r3, [pc, #180]	; (800e404 <tcp_process+0x5bc>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	f003 0320 	and.w	r3, r3, #32
 800e356:	2b00      	cmp	r3, #0
 800e358:	f000 814c 	beq.w	800e5f4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8b5b      	ldrh	r3, [r3, #26]
 800e360:	f043 0302 	orr.w	r3, r3, #2
 800e364:	b29a      	uxth	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2207      	movs	r2, #7
 800e36e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e370:	e140      	b.n	800e5f4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fa5c 	bl	800e830 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e378:	4b22      	ldr	r3, [pc, #136]	; (800e404 <tcp_process+0x5bc>)
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	f003 0320 	and.w	r3, r3, #32
 800e380:	2b00      	cmp	r3, #0
 800e382:	d071      	beq.n	800e468 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e384:	4b14      	ldr	r3, [pc, #80]	; (800e3d8 <tcp_process+0x590>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	f003 0310 	and.w	r3, r3, #16
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d060      	beq.n	800e452 <tcp_process+0x60a>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e394:	4b11      	ldr	r3, [pc, #68]	; (800e3dc <tcp_process+0x594>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d15a      	bne.n	800e452 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d156      	bne.n	800e452 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	8b5b      	ldrh	r3, [r3, #26]
 800e3a8:	f043 0302 	orr.w	r3, r3, #2
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7fe fdbc 	bl	800cf30 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e3b8:	4b13      	ldr	r3, [pc, #76]	; (800e408 <tcp_process+0x5c0>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d105      	bne.n	800e3ce <tcp_process+0x586>
 800e3c2:	4b11      	ldr	r3, [pc, #68]	; (800e408 <tcp_process+0x5c0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	4a0f      	ldr	r2, [pc, #60]	; (800e408 <tcp_process+0x5c0>)
 800e3ca:	6013      	str	r3, [r2, #0]
 800e3cc:	e02e      	b.n	800e42c <tcp_process+0x5e4>
 800e3ce:	4b0e      	ldr	r3, [pc, #56]	; (800e408 <tcp_process+0x5c0>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	617b      	str	r3, [r7, #20]
 800e3d4:	e027      	b.n	800e426 <tcp_process+0x5de>
 800e3d6:	bf00      	nop
 800e3d8:	2002e68c 	.word	0x2002e68c
 800e3dc:	2002e684 	.word	0x2002e684
 800e3e0:	2002e68a 	.word	0x2002e68a
 800e3e4:	2002e680 	.word	0x2002e680
 800e3e8:	2002e670 	.word	0x2002e670
 800e3ec:	2002af04 	.word	0x2002af04
 800e3f0:	2002af08 	.word	0x2002af08
 800e3f4:	080180d0 	.word	0x080180d0
 800e3f8:	08018370 	.word	0x08018370
 800e3fc:	0801811c 	.word	0x0801811c
 800e400:	2002e688 	.word	0x2002e688
 800e404:	2002e68d 	.word	0x2002e68d
 800e408:	2002e654 	.word	0x2002e654
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	429a      	cmp	r2, r3
 800e414:	d104      	bne.n	800e420 <tcp_process+0x5d8>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	68da      	ldr	r2, [r3, #12]
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	60da      	str	r2, [r3, #12]
 800e41e:	e005      	b.n	800e42c <tcp_process+0x5e4>
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	617b      	str	r3, [r7, #20]
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1ef      	bne.n	800e40c <tcp_process+0x5c4>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2200      	movs	r2, #0
 800e430:	60da      	str	r2, [r3, #12]
 800e432:	4b77      	ldr	r3, [pc, #476]	; (800e610 <tcp_process+0x7c8>)
 800e434:	2201      	movs	r2, #1
 800e436:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	220a      	movs	r2, #10
 800e43c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e43e:	4b75      	ldr	r3, [pc, #468]	; (800e614 <tcp_process+0x7cc>)
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	60da      	str	r2, [r3, #12]
 800e446:	4a73      	ldr	r2, [pc, #460]	; (800e614 <tcp_process+0x7cc>)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6013      	str	r3, [r2, #0]
 800e44c:	f002 fcfa 	bl	8010e44 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e450:	e0d2      	b.n	800e5f8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	8b5b      	ldrh	r3, [r3, #26]
 800e456:	f043 0302 	orr.w	r3, r3, #2
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2208      	movs	r2, #8
 800e464:	751a      	strb	r2, [r3, #20]
      break;
 800e466:	e0c7      	b.n	800e5f8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e468:	4b6b      	ldr	r3, [pc, #428]	; (800e618 <tcp_process+0x7d0>)
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	f003 0310 	and.w	r3, r3, #16
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 80c1 	beq.w	800e5f8 <tcp_process+0x7b0>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e47a:	4b68      	ldr	r3, [pc, #416]	; (800e61c <tcp_process+0x7d4>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	429a      	cmp	r2, r3
 800e480:	f040 80ba 	bne.w	800e5f8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f040 80b5 	bne.w	800e5f8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2206      	movs	r2, #6
 800e492:	751a      	strb	r2, [r3, #20]
      break;
 800e494:	e0b0      	b.n	800e5f8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f9ca 	bl	800e830 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e49c:	4b60      	ldr	r3, [pc, #384]	; (800e620 <tcp_process+0x7d8>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	f003 0320 	and.w	r3, r3, #32
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 80a9 	beq.w	800e5fc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	8b5b      	ldrh	r3, [r3, #26]
 800e4ae:	f043 0302 	orr.w	r3, r3, #2
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f7fe fd39 	bl	800cf30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e4be:	4b59      	ldr	r3, [pc, #356]	; (800e624 <tcp_process+0x7dc>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d105      	bne.n	800e4d4 <tcp_process+0x68c>
 800e4c8:	4b56      	ldr	r3, [pc, #344]	; (800e624 <tcp_process+0x7dc>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	4a55      	ldr	r2, [pc, #340]	; (800e624 <tcp_process+0x7dc>)
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	e013      	b.n	800e4fc <tcp_process+0x6b4>
 800e4d4:	4b53      	ldr	r3, [pc, #332]	; (800e624 <tcp_process+0x7dc>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	613b      	str	r3, [r7, #16]
 800e4da:	e00c      	b.n	800e4f6 <tcp_process+0x6ae>
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d104      	bne.n	800e4f0 <tcp_process+0x6a8>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	68da      	ldr	r2, [r3, #12]
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	60da      	str	r2, [r3, #12]
 800e4ee:	e005      	b.n	800e4fc <tcp_process+0x6b4>
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	613b      	str	r3, [r7, #16]
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1ef      	bne.n	800e4dc <tcp_process+0x694>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	60da      	str	r2, [r3, #12]
 800e502:	4b43      	ldr	r3, [pc, #268]	; (800e610 <tcp_process+0x7c8>)
 800e504:	2201      	movs	r2, #1
 800e506:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	220a      	movs	r2, #10
 800e50c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e50e:	4b41      	ldr	r3, [pc, #260]	; (800e614 <tcp_process+0x7cc>)
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	60da      	str	r2, [r3, #12]
 800e516:	4a3f      	ldr	r2, [pc, #252]	; (800e614 <tcp_process+0x7cc>)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6013      	str	r3, [r2, #0]
 800e51c:	f002 fc92 	bl	8010e44 <tcp_timer_needed>
      }
      break;
 800e520:	e06c      	b.n	800e5fc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f984 	bl	800e830 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e528:	4b3b      	ldr	r3, [pc, #236]	; (800e618 <tcp_process+0x7d0>)
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	f003 0310 	and.w	r3, r3, #16
 800e530:	2b00      	cmp	r3, #0
 800e532:	d065      	beq.n	800e600 <tcp_process+0x7b8>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e538:	4b38      	ldr	r3, [pc, #224]	; (800e61c <tcp_process+0x7d4>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d15f      	bne.n	800e600 <tcp_process+0x7b8>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d15b      	bne.n	800e600 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7fe fcf1 	bl	800cf30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e54e:	4b35      	ldr	r3, [pc, #212]	; (800e624 <tcp_process+0x7dc>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	429a      	cmp	r2, r3
 800e556:	d105      	bne.n	800e564 <tcp_process+0x71c>
 800e558:	4b32      	ldr	r3, [pc, #200]	; (800e624 <tcp_process+0x7dc>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	4a31      	ldr	r2, [pc, #196]	; (800e624 <tcp_process+0x7dc>)
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	e013      	b.n	800e58c <tcp_process+0x744>
 800e564:	4b2f      	ldr	r3, [pc, #188]	; (800e624 <tcp_process+0x7dc>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	60fb      	str	r3, [r7, #12]
 800e56a:	e00c      	b.n	800e586 <tcp_process+0x73e>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	429a      	cmp	r2, r3
 800e574:	d104      	bne.n	800e580 <tcp_process+0x738>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	60da      	str	r2, [r3, #12]
 800e57e:	e005      	b.n	800e58c <tcp_process+0x744>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1ef      	bne.n	800e56c <tcp_process+0x724>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	60da      	str	r2, [r3, #12]
 800e592:	4b1f      	ldr	r3, [pc, #124]	; (800e610 <tcp_process+0x7c8>)
 800e594:	2201      	movs	r2, #1
 800e596:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	220a      	movs	r2, #10
 800e59c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e59e:	4b1d      	ldr	r3, [pc, #116]	; (800e614 <tcp_process+0x7cc>)
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	60da      	str	r2, [r3, #12]
 800e5a6:	4a1b      	ldr	r2, [pc, #108]	; (800e614 <tcp_process+0x7cc>)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6013      	str	r3, [r2, #0]
 800e5ac:	f002 fc4a 	bl	8010e44 <tcp_timer_needed>
      }
      break;
 800e5b0:	e026      	b.n	800e600 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 f93c 	bl	800e830 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e5b8:	4b17      	ldr	r3, [pc, #92]	; (800e618 <tcp_process+0x7d0>)
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	f003 0310 	and.w	r3, r3, #16
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d01f      	beq.n	800e604 <tcp_process+0x7bc>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5c8:	4b14      	ldr	r3, [pc, #80]	; (800e61c <tcp_process+0x7d4>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d119      	bne.n	800e604 <tcp_process+0x7bc>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d115      	bne.n	800e604 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e5d8:	4b11      	ldr	r3, [pc, #68]	; (800e620 <tcp_process+0x7d8>)
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f043 0310 	orr.w	r3, r3, #16
 800e5e0:	b2da      	uxtb	r2, r3
 800e5e2:	4b0f      	ldr	r3, [pc, #60]	; (800e620 <tcp_process+0x7d8>)
 800e5e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e5e6:	e00d      	b.n	800e604 <tcp_process+0x7bc>
    default:
      break;
 800e5e8:	bf00      	nop
 800e5ea:	e00c      	b.n	800e606 <tcp_process+0x7be>
      break;
 800e5ec:	bf00      	nop
 800e5ee:	e00a      	b.n	800e606 <tcp_process+0x7be>
      break;
 800e5f0:	bf00      	nop
 800e5f2:	e008      	b.n	800e606 <tcp_process+0x7be>
      break;
 800e5f4:	bf00      	nop
 800e5f6:	e006      	b.n	800e606 <tcp_process+0x7be>
      break;
 800e5f8:	bf00      	nop
 800e5fa:	e004      	b.n	800e606 <tcp_process+0x7be>
      break;
 800e5fc:	bf00      	nop
 800e5fe:	e002      	b.n	800e606 <tcp_process+0x7be>
      break;
 800e600:	bf00      	nop
 800e602:	e000      	b.n	800e606 <tcp_process+0x7be>
      break;
 800e604:	bf00      	nop
  }
  return ERR_OK;
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3724      	adds	r7, #36	; 0x24
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd90      	pop	{r4, r7, pc}
 800e610:	2002e65c 	.word	0x2002e65c
 800e614:	2002e658 	.word	0x2002e658
 800e618:	2002e68c 	.word	0x2002e68c
 800e61c:	2002e684 	.word	0x2002e684
 800e620:	2002e68d 	.word	0x2002e68d
 800e624:	2002e654 	.word	0x2002e654

0800e628 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d106      	bne.n	800e646 <tcp_oos_insert_segment+0x1e>
 800e638:	4b3b      	ldr	r3, [pc, #236]	; (800e728 <tcp_oos_insert_segment+0x100>)
 800e63a:	f240 421f 	movw	r2, #1055	; 0x41f
 800e63e:	493b      	ldr	r1, [pc, #236]	; (800e72c <tcp_oos_insert_segment+0x104>)
 800e640:	483b      	ldr	r0, [pc, #236]	; (800e730 <tcp_oos_insert_segment+0x108>)
 800e642:	f007 f973 	bl	801592c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	899b      	ldrh	r3, [r3, #12]
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fb fb12 	bl	8009c78 <lwip_htons>
 800e654:	4603      	mov	r3, r0
 800e656:	b2db      	uxtb	r3, r3
 800e658:	f003 0301 	and.w	r3, r3, #1
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d028      	beq.n	800e6b2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e660:	6838      	ldr	r0, [r7, #0]
 800e662:	f7fe fa63 	bl	800cb2c <tcp_segs_free>
    next = NULL;
 800e666:	2300      	movs	r3, #0
 800e668:	603b      	str	r3, [r7, #0]
 800e66a:	e056      	b.n	800e71a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	899b      	ldrh	r3, [r3, #12]
 800e672:	b29b      	uxth	r3, r3
 800e674:	4618      	mov	r0, r3
 800e676:	f7fb faff 	bl	8009c78 <lwip_htons>
 800e67a:	4603      	mov	r3, r0
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00d      	beq.n	800e6a2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	899b      	ldrh	r3, [r3, #12]
 800e68c:	b29c      	uxth	r4, r3
 800e68e:	2001      	movs	r0, #1
 800e690:	f7fb faf2 	bl	8009c78 <lwip_htons>
 800e694:	4603      	mov	r3, r0
 800e696:	461a      	mov	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	4322      	orrs	r2, r4
 800e69e:	b292      	uxth	r2, r2
 800e6a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	f7fe fa52 	bl	800cb56 <tcp_seg_free>
    while (next &&
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00e      	beq.n	800e6d6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	891b      	ldrh	r3, [r3, #8]
 800e6bc:	461a      	mov	r2, r3
 800e6be:	4b1d      	ldr	r3, [pc, #116]	; (800e734 <tcp_oos_insert_segment+0x10c>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	441a      	add	r2, r3
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	8909      	ldrh	r1, [r1, #8]
 800e6ce:	440b      	add	r3, r1
 800e6d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	daca      	bge.n	800e66c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d01e      	beq.n	800e71a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	891b      	ldrh	r3, [r3, #8]
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	4b14      	ldr	r3, [pc, #80]	; (800e734 <tcp_oos_insert_segment+0x10c>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	441a      	add	r2, r3
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	dd12      	ble.n	800e71a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	4b0d      	ldr	r3, [pc, #52]	; (800e734 <tcp_oos_insert_segment+0x10c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	b29b      	uxth	r3, r3
 800e702:	1ad3      	subs	r3, r2, r3
 800e704:	b29a      	uxth	r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	685a      	ldr	r2, [r3, #4]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	891b      	ldrh	r3, [r3, #8]
 800e712:	4619      	mov	r1, r3
 800e714:	4610      	mov	r0, r2
 800e716:	f7fc fd1b 	bl	800b150 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	683a      	ldr	r2, [r7, #0]
 800e71e:	601a      	str	r2, [r3, #0]
}
 800e720:	bf00      	nop
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	bd90      	pop	{r4, r7, pc}
 800e728:	080180d0 	.word	0x080180d0
 800e72c:	08018390 	.word	0x08018390
 800e730:	0801811c 	.word	0x0801811c
 800e734:	2002e680 	.word	0x2002e680

0800e738 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e738:	b5b0      	push	{r4, r5, r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
 800e744:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e746:	e03e      	b.n	800e7c6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	4618      	mov	r0, r3
 800e758:	f7fc ff0e 	bl	800b578 <pbuf_clen>
 800e75c:	4603      	mov	r3, r0
 800e75e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e766:	8a7a      	ldrh	r2, [r7, #18]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d906      	bls.n	800e77a <tcp_free_acked_segments+0x42>
 800e76c:	4b2a      	ldr	r3, [pc, #168]	; (800e818 <tcp_free_acked_segments+0xe0>)
 800e76e:	f240 4257 	movw	r2, #1111	; 0x457
 800e772:	492a      	ldr	r1, [pc, #168]	; (800e81c <tcp_free_acked_segments+0xe4>)
 800e774:	482a      	ldr	r0, [pc, #168]	; (800e820 <tcp_free_acked_segments+0xe8>)
 800e776:	f007 f8d9 	bl	801592c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e780:	8a7b      	ldrh	r3, [r7, #18]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	b29a      	uxth	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	891a      	ldrh	r2, [r3, #8]
 800e790:	4b24      	ldr	r3, [pc, #144]	; (800e824 <tcp_free_acked_segments+0xec>)
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	4413      	add	r3, r2
 800e796:	b29a      	uxth	r2, r3
 800e798:	4b22      	ldr	r3, [pc, #136]	; (800e824 <tcp_free_acked_segments+0xec>)
 800e79a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e79c:	6978      	ldr	r0, [r7, #20]
 800e79e:	f7fe f9da 	bl	800cb56 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00c      	beq.n	800e7c6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d109      	bne.n	800e7c6 <tcp_free_acked_segments+0x8e>
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d106      	bne.n	800e7c6 <tcp_free_acked_segments+0x8e>
 800e7b8:	4b17      	ldr	r3, [pc, #92]	; (800e818 <tcp_free_acked_segments+0xe0>)
 800e7ba:	f240 4261 	movw	r2, #1121	; 0x461
 800e7be:	491a      	ldr	r1, [pc, #104]	; (800e828 <tcp_free_acked_segments+0xf0>)
 800e7c0:	4817      	ldr	r0, [pc, #92]	; (800e820 <tcp_free_acked_segments+0xe8>)
 800e7c2:	f007 f8b3 	bl	801592c <iprintf>
  while (seg_list != NULL &&
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d020      	beq.n	800e80e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fb fa65 	bl	8009ca2 <lwip_htonl>
 800e7d8:	4604      	mov	r4, r0
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	891b      	ldrh	r3, [r3, #8]
 800e7de:	461d      	mov	r5, r3
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	899b      	ldrh	r3, [r3, #12]
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fb fa45 	bl	8009c78 <lwip_htons>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	f003 0303 	and.w	r3, r3, #3
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <tcp_free_acked_segments+0xc6>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e000      	b.n	800e800 <tcp_free_acked_segments+0xc8>
 800e7fe:	2300      	movs	r3, #0
 800e800:	442b      	add	r3, r5
 800e802:	18e2      	adds	r2, r4, r3
 800e804:	4b09      	ldr	r3, [pc, #36]	; (800e82c <tcp_free_acked_segments+0xf4>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	dd9c      	ble.n	800e748 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e80e:	68bb      	ldr	r3, [r7, #8]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3718      	adds	r7, #24
 800e814:	46bd      	mov	sp, r7
 800e816:	bdb0      	pop	{r4, r5, r7, pc}
 800e818:	080180d0 	.word	0x080180d0
 800e81c:	080183b8 	.word	0x080183b8
 800e820:	0801811c 	.word	0x0801811c
 800e824:	2002e688 	.word	0x2002e688
 800e828:	080183e0 	.word	0x080183e0
 800e82c:	2002e684 	.word	0x2002e684

0800e830 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e830:	b5b0      	push	{r4, r5, r7, lr}
 800e832:	b094      	sub	sp, #80	; 0x50
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e838:	2300      	movs	r3, #0
 800e83a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d106      	bne.n	800e850 <tcp_receive+0x20>
 800e842:	4b91      	ldr	r3, [pc, #580]	; (800ea88 <tcp_receive+0x258>)
 800e844:	f240 427b 	movw	r2, #1147	; 0x47b
 800e848:	4990      	ldr	r1, [pc, #576]	; (800ea8c <tcp_receive+0x25c>)
 800e84a:	4891      	ldr	r0, [pc, #580]	; (800ea90 <tcp_receive+0x260>)
 800e84c:	f007 f86e 	bl	801592c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	7d1b      	ldrb	r3, [r3, #20]
 800e854:	2b03      	cmp	r3, #3
 800e856:	d806      	bhi.n	800e866 <tcp_receive+0x36>
 800e858:	4b8b      	ldr	r3, [pc, #556]	; (800ea88 <tcp_receive+0x258>)
 800e85a:	f240 427c 	movw	r2, #1148	; 0x47c
 800e85e:	498d      	ldr	r1, [pc, #564]	; (800ea94 <tcp_receive+0x264>)
 800e860:	488b      	ldr	r0, [pc, #556]	; (800ea90 <tcp_receive+0x260>)
 800e862:	f007 f863 	bl	801592c <iprintf>

  if (flags & TCP_ACK) {
 800e866:	4b8c      	ldr	r3, [pc, #560]	; (800ea98 <tcp_receive+0x268>)
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	f003 0310 	and.w	r3, r3, #16
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f000 8264 	beq.w	800ed3c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e87a:	461a      	mov	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e880:	4413      	add	r3, r2
 800e882:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e888:	4b84      	ldr	r3, [pc, #528]	; (800ea9c <tcp_receive+0x26c>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	1ad3      	subs	r3, r2, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	db1b      	blt.n	800e8ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e896:	4b81      	ldr	r3, [pc, #516]	; (800ea9c <tcp_receive+0x26c>)
 800e898:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d106      	bne.n	800e8ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8a2:	4b7f      	ldr	r3, [pc, #508]	; (800eaa0 <tcp_receive+0x270>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	db0e      	blt.n	800e8ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8b0:	4b7b      	ldr	r3, [pc, #492]	; (800eaa0 <tcp_receive+0x270>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d125      	bne.n	800e904 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e8b8:	4b7a      	ldr	r3, [pc, #488]	; (800eaa4 <tcp_receive+0x274>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	89db      	ldrh	r3, [r3, #14]
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d91c      	bls.n	800e904 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e8ca:	4b76      	ldr	r3, [pc, #472]	; (800eaa4 <tcp_receive+0x274>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	89db      	ldrh	r3, [r3, #14]
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d205      	bcs.n	800e8f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e8f4:	4b69      	ldr	r3, [pc, #420]	; (800ea9c <tcp_receive+0x26c>)
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e8fc:	4b68      	ldr	r3, [pc, #416]	; (800eaa0 <tcp_receive+0x270>)
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e904:	4b66      	ldr	r3, [pc, #408]	; (800eaa0 <tcp_receive+0x270>)
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	dc58      	bgt.n	800e9c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e912:	4b65      	ldr	r3, [pc, #404]	; (800eaa8 <tcp_receive+0x278>)
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d14b      	bne.n	800e9b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e924:	4413      	add	r3, r2
 800e926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e928:	429a      	cmp	r2, r3
 800e92a:	d142      	bne.n	800e9b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e932:	2b00      	cmp	r3, #0
 800e934:	db3d      	blt.n	800e9b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e93a:	4b59      	ldr	r3, [pc, #356]	; (800eaa0 <tcp_receive+0x270>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d137      	bne.n	800e9b2 <tcp_receive+0x182>
              found_dupack = 1;
 800e942:	2301      	movs	r3, #1
 800e944:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e94c:	2bff      	cmp	r3, #255	; 0xff
 800e94e:	d007      	beq.n	800e960 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e956:	3301      	adds	r3, #1
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e966:	2b03      	cmp	r3, #3
 800e968:	d91b      	bls.n	800e9a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e974:	4413      	add	r3, r2
 800e976:	b29a      	uxth	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e97e:	429a      	cmp	r2, r3
 800e980:	d30a      	bcc.n	800e998 <tcp_receive+0x168>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e98c:	4413      	add	r3, r2
 800e98e:	b29a      	uxth	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e996:	e004      	b.n	800e9a2 <tcp_receive+0x172>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e99e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d902      	bls.n	800e9b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f001 feeb 	bl	8010788 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f040 8161 	bne.w	800ec7c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e9c2:	e15b      	b.n	800ec7c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9c4:	4b36      	ldr	r3, [pc, #216]	; (800eaa0 <tcp_receive+0x270>)
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f2c0 814e 	blt.w	800ec72 <tcp_receive+0x442>
 800e9d6:	4b32      	ldr	r3, [pc, #200]	; (800eaa0 <tcp_receive+0x270>)
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f300 8146 	bgt.w	800ec72 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	8b5b      	ldrh	r3, [r3, #26]
 800e9ea:	f003 0304 	and.w	r3, r3, #4
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d010      	beq.n	800ea14 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	8b5b      	ldrh	r3, [r3, #26]
 800e9f6:	f023 0304 	bic.w	r3, r3, #4
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea22:	10db      	asrs	r3, r3, #3
 800ea24:	b21b      	sxth	r3, r3
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	4413      	add	r3, r2
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	b21a      	sxth	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ea3c:	4b18      	ldr	r3, [pc, #96]	; (800eaa0 <tcp_receive+0x270>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ea54:	4b12      	ldr	r3, [pc, #72]	; (800eaa0 <tcp_receive+0x270>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	7d1b      	ldrb	r3, [r3, #20]
 800ea60:	2b03      	cmp	r3, #3
 800ea62:	f240 8097 	bls.w	800eb94 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d245      	bcs.n	800eb02 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	8b5b      	ldrh	r3, [r3, #26]
 800ea7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d014      	beq.n	800eaac <tcp_receive+0x27c>
 800ea82:	2301      	movs	r3, #1
 800ea84:	e013      	b.n	800eaae <tcp_receive+0x27e>
 800ea86:	bf00      	nop
 800ea88:	080180d0 	.word	0x080180d0
 800ea8c:	08018400 	.word	0x08018400
 800ea90:	0801811c 	.word	0x0801811c
 800ea94:	0801841c 	.word	0x0801841c
 800ea98:	2002e68c 	.word	0x2002e68c
 800ea9c:	2002e680 	.word	0x2002e680
 800eaa0:	2002e684 	.word	0x2002e684
 800eaa4:	2002e670 	.word	0x2002e670
 800eaa8:	2002e68a 	.word	0x2002e68a
 800eaac:	2302      	movs	r3, #2
 800eaae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800eab2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eabc:	fb12 f303 	smulbb	r3, r2, r3
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eac4:	4293      	cmp	r3, r2
 800eac6:	bf28      	it	cs
 800eac8:	4613      	movcs	r3, r2
 800eaca:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ead2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ead4:	4413      	add	r3, r2
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eade:	429a      	cmp	r2, r3
 800eae0:	d309      	bcc.n	800eaf6 <tcp_receive+0x2c6>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eae8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eaea:	4413      	add	r3, r2
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eaf4:	e04e      	b.n	800eb94 <tcp_receive+0x364>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eafc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eb00:	e048      	b.n	800eb94 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eb08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb0a:	4413      	add	r3, r2
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d309      	bcc.n	800eb2c <tcp_receive+0x2fc>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eb1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb20:	4413      	add	r3, r2
 800eb22:	b29a      	uxth	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eb2a:	e004      	b.n	800eb36 <tcp_receive+0x306>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d326      	bcc.n	800eb94 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb66:	4413      	add	r3, r2
 800eb68:	b29a      	uxth	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d30a      	bcc.n	800eb8a <tcp_receive+0x35a>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb7e:	4413      	add	r3, r2
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eb88:	e004      	b.n	800eb94 <tcp_receive+0x364>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9c:	4a98      	ldr	r2, [pc, #608]	; (800ee00 <tcp_receive+0x5d0>)
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7ff fdca 	bl	800e738 <tcp_free_acked_segments>
 800eba4:	4602      	mov	r2, r0
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb2:	4a94      	ldr	r2, [pc, #592]	; (800ee04 <tcp_receive+0x5d4>)
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7ff fdbf 	bl	800e738 <tcp_free_acked_segments>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d104      	bne.n	800ebd2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebce:	861a      	strh	r2, [r3, #48]	; 0x30
 800ebd0:	e002      	b.n	800ebd8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d103      	bne.n	800ebee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ebf4:	4b84      	ldr	r3, [pc, #528]	; (800ee08 <tcp_receive+0x5d8>)
 800ebf6:	881b      	ldrh	r3, [r3, #0]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	8b5b      	ldrh	r3, [r3, #26]
 800ec06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d035      	beq.n	800ec7a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d118      	bne.n	800ec48 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00c      	beq.n	800ec38 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fb f839 	bl	8009ca2 <lwip_htonl>
 800ec30:	4603      	mov	r3, r0
 800ec32:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	dc20      	bgt.n	800ec7a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	8b5b      	ldrh	r3, [r3, #26]
 800ec3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec46:	e018      	b.n	800ec7a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fb f824 	bl	8009ca2 <lwip_htonl>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	1ae3      	subs	r3, r4, r3
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	dc0b      	bgt.n	800ec7a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	8b5b      	ldrh	r3, [r3, #26]
 800ec66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec70:	e003      	b.n	800ec7a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f001 ff76 	bl	8010b64 <tcp_send_empty_ack>
 800ec78:	e000      	b.n	800ec7c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec7a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d05b      	beq.n	800ed3c <tcp_receive+0x50c>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec88:	4b60      	ldr	r3, [pc, #384]	; (800ee0c <tcp_receive+0x5dc>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da54      	bge.n	800ed3c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ec92:	4b5f      	ldr	r3, [pc, #380]	; (800ee10 <tcp_receive+0x5e0>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800eca6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ecb0:	10db      	asrs	r3, r3, #3
 800ecb2:	b21b      	sxth	r3, r3
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ecca:	4413      	add	r3, r2
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	b21a      	sxth	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ecd4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	da05      	bge.n	800ece8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ecdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ece0:	425b      	negs	r3, r3
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ece8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecf2:	109b      	asrs	r3, r3, #2
 800ecf4:	b21b      	sxth	r3, r3
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ed06:	b29a      	uxth	r2, r3
 800ed08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ed0c:	4413      	add	r3, r2
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	b21a      	sxth	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ed1c:	10db      	asrs	r3, r3, #3
 800ed1e:	b21b      	sxth	r3, r3
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	4413      	add	r3, r2
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	b21a      	sxth	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ed3c:	4b35      	ldr	r3, [pc, #212]	; (800ee14 <tcp_receive+0x5e4>)
 800ed3e:	881b      	ldrh	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f000 84e2 	beq.w	800f70a <tcp_receive+0xeda>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	7d1b      	ldrb	r3, [r3, #20]
 800ed4a:	2b06      	cmp	r3, #6
 800ed4c:	f200 84dd 	bhi.w	800f70a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed54:	4b30      	ldr	r3, [pc, #192]	; (800ee18 <tcp_receive+0x5e8>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f2c0 808f 	blt.w	800ee80 <tcp_receive+0x650>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed66:	4b2b      	ldr	r3, [pc, #172]	; (800ee14 <tcp_receive+0x5e4>)
 800ed68:	881b      	ldrh	r3, [r3, #0]
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	4b2a      	ldr	r3, [pc, #168]	; (800ee18 <tcp_receive+0x5e8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	440b      	add	r3, r1
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	3301      	adds	r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f300 8082 	bgt.w	800ee80 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ed7c:	4b27      	ldr	r3, [pc, #156]	; (800ee1c <tcp_receive+0x5ec>)
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed86:	4b24      	ldr	r3, [pc, #144]	; (800ee18 <tcp_receive+0x5e8>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	1ad3      	subs	r3, r2, r3
 800ed8c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ed8e:	4b23      	ldr	r3, [pc, #140]	; (800ee1c <tcp_receive+0x5ec>)
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d106      	bne.n	800eda4 <tcp_receive+0x574>
 800ed96:	4b22      	ldr	r3, [pc, #136]	; (800ee20 <tcp_receive+0x5f0>)
 800ed98:	f240 5294 	movw	r2, #1428	; 0x594
 800ed9c:	4921      	ldr	r1, [pc, #132]	; (800ee24 <tcp_receive+0x5f4>)
 800ed9e:	4822      	ldr	r0, [pc, #136]	; (800ee28 <tcp_receive+0x5f8>)
 800eda0:	f006 fdc4 	bl	801592c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800eda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800edaa:	4293      	cmp	r3, r2
 800edac:	d906      	bls.n	800edbc <tcp_receive+0x58c>
 800edae:	4b1c      	ldr	r3, [pc, #112]	; (800ee20 <tcp_receive+0x5f0>)
 800edb0:	f240 5295 	movw	r2, #1429	; 0x595
 800edb4:	491d      	ldr	r1, [pc, #116]	; (800ee2c <tcp_receive+0x5fc>)
 800edb6:	481c      	ldr	r0, [pc, #112]	; (800ee28 <tcp_receive+0x5f8>)
 800edb8:	f006 fdb8 	bl	801592c <iprintf>
      off = (u16_t)off32;
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800edc2:	4b16      	ldr	r3, [pc, #88]	; (800ee1c <tcp_receive+0x5ec>)
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	891b      	ldrh	r3, [r3, #8]
 800edc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800edcc:	429a      	cmp	r2, r3
 800edce:	d906      	bls.n	800edde <tcp_receive+0x5ae>
 800edd0:	4b13      	ldr	r3, [pc, #76]	; (800ee20 <tcp_receive+0x5f0>)
 800edd2:	f240 5297 	movw	r2, #1431	; 0x597
 800edd6:	4916      	ldr	r1, [pc, #88]	; (800ee30 <tcp_receive+0x600>)
 800edd8:	4813      	ldr	r0, [pc, #76]	; (800ee28 <tcp_receive+0x5f8>)
 800edda:	f006 fda7 	bl	801592c <iprintf>
      inseg.len -= off;
 800edde:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <tcp_receive+0x5ec>)
 800ede0:	891a      	ldrh	r2, [r3, #8]
 800ede2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	b29a      	uxth	r2, r3
 800edea:	4b0c      	ldr	r3, [pc, #48]	; (800ee1c <tcp_receive+0x5ec>)
 800edec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800edee:	4b0b      	ldr	r3, [pc, #44]	; (800ee1c <tcp_receive+0x5ec>)
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	891a      	ldrh	r2, [r3, #8]
 800edf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800edfc:	e02a      	b.n	800ee54 <tcp_receive+0x624>
 800edfe:	bf00      	nop
 800ee00:	08018438 	.word	0x08018438
 800ee04:	08018440 	.word	0x08018440
 800ee08:	2002e688 	.word	0x2002e688
 800ee0c:	2002e684 	.word	0x2002e684
 800ee10:	2002e648 	.word	0x2002e648
 800ee14:	2002e68a 	.word	0x2002e68a
 800ee18:	2002e680 	.word	0x2002e680
 800ee1c:	2002e660 	.word	0x2002e660
 800ee20:	080180d0 	.word	0x080180d0
 800ee24:	08018448 	.word	0x08018448
 800ee28:	0801811c 	.word	0x0801811c
 800ee2c:	08018458 	.word	0x08018458
 800ee30:	08018468 	.word	0x08018468
        off -= p->len;
 800ee34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee36:	895b      	ldrh	r3, [r3, #10]
 800ee38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ee42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ee46:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ee48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ee4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ee54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee56:	895b      	ldrh	r3, [r3, #10]
 800ee58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d8e9      	bhi.n	800ee34 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ee60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee64:	4619      	mov	r1, r3
 800ee66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee68:	f7fc fa72 	bl	800b350 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee70:	4a91      	ldr	r2, [pc, #580]	; (800f0b8 <tcp_receive+0x888>)
 800ee72:	6013      	str	r3, [r2, #0]
 800ee74:	4b91      	ldr	r3, [pc, #580]	; (800f0bc <tcp_receive+0x88c>)
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	4a8f      	ldr	r2, [pc, #572]	; (800f0b8 <tcp_receive+0x888>)
 800ee7a:	6812      	ldr	r2, [r2, #0]
 800ee7c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ee7e:	e00d      	b.n	800ee9c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ee80:	4b8d      	ldr	r3, [pc, #564]	; (800f0b8 <tcp_receive+0x888>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	da06      	bge.n	800ee9c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	8b5b      	ldrh	r3, [r3, #26]
 800ee92:	f043 0302 	orr.w	r3, r3, #2
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee9c:	4b86      	ldr	r3, [pc, #536]	; (800f0b8 <tcp_receive+0x888>)
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f2c0 842a 	blt.w	800f700 <tcp_receive+0xed0>
 800eeac:	4b82      	ldr	r3, [pc, #520]	; (800f0b8 <tcp_receive+0x888>)
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb4:	6879      	ldr	r1, [r7, #4]
 800eeb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eeb8:	440b      	add	r3, r1
 800eeba:	1ad3      	subs	r3, r2, r3
 800eebc:	3301      	adds	r3, #1
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	f300 841e 	bgt.w	800f700 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eec8:	4b7b      	ldr	r3, [pc, #492]	; (800f0b8 <tcp_receive+0x888>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	429a      	cmp	r2, r3
 800eece:	f040 829a 	bne.w	800f406 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800eed2:	4b7a      	ldr	r3, [pc, #488]	; (800f0bc <tcp_receive+0x88c>)
 800eed4:	891c      	ldrh	r4, [r3, #8]
 800eed6:	4b79      	ldr	r3, [pc, #484]	; (800f0bc <tcp_receive+0x88c>)
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	899b      	ldrh	r3, [r3, #12]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fa feca 	bl	8009c78 <lwip_htons>
 800eee4:	4603      	mov	r3, r0
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	f003 0303 	and.w	r3, r3, #3
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d001      	beq.n	800eef4 <tcp_receive+0x6c4>
 800eef0:	2301      	movs	r3, #1
 800eef2:	e000      	b.n	800eef6 <tcp_receive+0x6c6>
 800eef4:	2300      	movs	r3, #0
 800eef6:	4423      	add	r3, r4
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	4b71      	ldr	r3, [pc, #452]	; (800f0c0 <tcp_receive+0x890>)
 800eefc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef02:	4b6f      	ldr	r3, [pc, #444]	; (800f0c0 <tcp_receive+0x890>)
 800ef04:	881b      	ldrh	r3, [r3, #0]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d275      	bcs.n	800eff6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ef0a:	4b6c      	ldr	r3, [pc, #432]	; (800f0bc <tcp_receive+0x88c>)
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	899b      	ldrh	r3, [r3, #12]
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fa feb0 	bl	8009c78 <lwip_htons>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	f003 0301 	and.w	r3, r3, #1
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d01f      	beq.n	800ef64 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ef24:	4b65      	ldr	r3, [pc, #404]	; (800f0bc <tcp_receive+0x88c>)
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	899b      	ldrh	r3, [r3, #12]
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	b21b      	sxth	r3, r3
 800ef2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ef32:	b21c      	sxth	r4, r3
 800ef34:	4b61      	ldr	r3, [pc, #388]	; (800f0bc <tcp_receive+0x88c>)
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	899b      	ldrh	r3, [r3, #12]
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fa fe9b 	bl	8009c78 <lwip_htons>
 800ef42:	4603      	mov	r3, r0
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fa fe92 	bl	8009c78 <lwip_htons>
 800ef54:	4603      	mov	r3, r0
 800ef56:	b21b      	sxth	r3, r3
 800ef58:	4323      	orrs	r3, r4
 800ef5a:	b21a      	sxth	r2, r3
 800ef5c:	4b57      	ldr	r3, [pc, #348]	; (800f0bc <tcp_receive+0x88c>)
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	b292      	uxth	r2, r2
 800ef62:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef68:	4b54      	ldr	r3, [pc, #336]	; (800f0bc <tcp_receive+0x88c>)
 800ef6a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ef6c:	4b53      	ldr	r3, [pc, #332]	; (800f0bc <tcp_receive+0x88c>)
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	899b      	ldrh	r3, [r3, #12]
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7fa fe7f 	bl	8009c78 <lwip_htons>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	f003 0302 	and.w	r3, r3, #2
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d005      	beq.n	800ef92 <tcp_receive+0x762>
            inseg.len -= 1;
 800ef86:	4b4d      	ldr	r3, [pc, #308]	; (800f0bc <tcp_receive+0x88c>)
 800ef88:	891b      	ldrh	r3, [r3, #8]
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	4b4b      	ldr	r3, [pc, #300]	; (800f0bc <tcp_receive+0x88c>)
 800ef90:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ef92:	4b4a      	ldr	r3, [pc, #296]	; (800f0bc <tcp_receive+0x88c>)
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	4a49      	ldr	r2, [pc, #292]	; (800f0bc <tcp_receive+0x88c>)
 800ef98:	8912      	ldrh	r2, [r2, #8]
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fc f8d7 	bl	800b150 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800efa2:	4b46      	ldr	r3, [pc, #280]	; (800f0bc <tcp_receive+0x88c>)
 800efa4:	891c      	ldrh	r4, [r3, #8]
 800efa6:	4b45      	ldr	r3, [pc, #276]	; (800f0bc <tcp_receive+0x88c>)
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	899b      	ldrh	r3, [r3, #12]
 800efac:	b29b      	uxth	r3, r3
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fa fe62 	bl	8009c78 <lwip_htons>
 800efb4:	4603      	mov	r3, r0
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	f003 0303 	and.w	r3, r3, #3
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <tcp_receive+0x794>
 800efc0:	2301      	movs	r3, #1
 800efc2:	e000      	b.n	800efc6 <tcp_receive+0x796>
 800efc4:	2300      	movs	r3, #0
 800efc6:	4423      	add	r3, r4
 800efc8:	b29a      	uxth	r2, r3
 800efca:	4b3d      	ldr	r3, [pc, #244]	; (800f0c0 <tcp_receive+0x890>)
 800efcc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800efce:	4b3c      	ldr	r3, [pc, #240]	; (800f0c0 <tcp_receive+0x890>)
 800efd0:	881b      	ldrh	r3, [r3, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	4b38      	ldr	r3, [pc, #224]	; (800f0b8 <tcp_receive+0x888>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	441a      	add	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efde:	6879      	ldr	r1, [r7, #4]
 800efe0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efe2:	440b      	add	r3, r1
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d006      	beq.n	800eff6 <tcp_receive+0x7c6>
 800efe8:	4b36      	ldr	r3, [pc, #216]	; (800f0c4 <tcp_receive+0x894>)
 800efea:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800efee:	4936      	ldr	r1, [pc, #216]	; (800f0c8 <tcp_receive+0x898>)
 800eff0:	4836      	ldr	r0, [pc, #216]	; (800f0cc <tcp_receive+0x89c>)
 800eff2:	f006 fc9b 	bl	801592c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800effa:	2b00      	cmp	r3, #0
 800effc:	f000 80e7 	beq.w	800f1ce <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f000:	4b2e      	ldr	r3, [pc, #184]	; (800f0bc <tcp_receive+0x88c>)
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	899b      	ldrh	r3, [r3, #12]
 800f006:	b29b      	uxth	r3, r3
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fa fe35 	bl	8009c78 <lwip_htons>
 800f00e:	4603      	mov	r3, r0
 800f010:	b2db      	uxtb	r3, r3
 800f012:	f003 0301 	and.w	r3, r3, #1
 800f016:	2b00      	cmp	r3, #0
 800f018:	d010      	beq.n	800f03c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f01a:	e00a      	b.n	800f032 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f020:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f7fd fd92 	bl	800cb56 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f036:	2b00      	cmp	r3, #0
 800f038:	d1f0      	bne.n	800f01c <tcp_receive+0x7ec>
 800f03a:	e0c8      	b.n	800f1ce <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f040:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f042:	e052      	b.n	800f0ea <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	899b      	ldrh	r3, [r3, #12]
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fa fe13 	bl	8009c78 <lwip_htons>
 800f052:	4603      	mov	r3, r0
 800f054:	b2db      	uxtb	r3, r3
 800f056:	f003 0301 	and.w	r3, r3, #1
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d03d      	beq.n	800f0da <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f05e:	4b17      	ldr	r3, [pc, #92]	; (800f0bc <tcp_receive+0x88c>)
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	899b      	ldrh	r3, [r3, #12]
 800f064:	b29b      	uxth	r3, r3
 800f066:	4618      	mov	r0, r3
 800f068:	f7fa fe06 	bl	8009c78 <lwip_htons>
 800f06c:	4603      	mov	r3, r0
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f074:	2b00      	cmp	r3, #0
 800f076:	d130      	bne.n	800f0da <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f078:	4b10      	ldr	r3, [pc, #64]	; (800f0bc <tcp_receive+0x88c>)
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	899b      	ldrh	r3, [r3, #12]
 800f07e:	b29c      	uxth	r4, r3
 800f080:	2001      	movs	r0, #1
 800f082:	f7fa fdf9 	bl	8009c78 <lwip_htons>
 800f086:	4603      	mov	r3, r0
 800f088:	461a      	mov	r2, r3
 800f08a:	4b0c      	ldr	r3, [pc, #48]	; (800f0bc <tcp_receive+0x88c>)
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	4322      	orrs	r2, r4
 800f090:	b292      	uxth	r2, r2
 800f092:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f094:	4b09      	ldr	r3, [pc, #36]	; (800f0bc <tcp_receive+0x88c>)
 800f096:	891c      	ldrh	r4, [r3, #8]
 800f098:	4b08      	ldr	r3, [pc, #32]	; (800f0bc <tcp_receive+0x88c>)
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	899b      	ldrh	r3, [r3, #12]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fa fde9 	bl	8009c78 <lwip_htons>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	f003 0303 	and.w	r3, r3, #3
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00e      	beq.n	800f0d0 <tcp_receive+0x8a0>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e00d      	b.n	800f0d2 <tcp_receive+0x8a2>
 800f0b6:	bf00      	nop
 800f0b8:	2002e680 	.word	0x2002e680
 800f0bc:	2002e660 	.word	0x2002e660
 800f0c0:	2002e68a 	.word	0x2002e68a
 800f0c4:	080180d0 	.word	0x080180d0
 800f0c8:	08018478 	.word	0x08018478
 800f0cc:	0801811c 	.word	0x0801811c
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	4423      	add	r3, r4
 800f0d4:	b29a      	uxth	r2, r3
 800f0d6:	4b98      	ldr	r3, [pc, #608]	; (800f338 <tcp_receive+0xb08>)
 800f0d8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0dc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f0e4:	6938      	ldr	r0, [r7, #16]
 800f0e6:	f7fd fd36 	bl	800cb56 <tcp_seg_free>
            while (next &&
 800f0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00e      	beq.n	800f10e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f0f0:	4b91      	ldr	r3, [pc, #580]	; (800f338 <tcp_receive+0xb08>)
 800f0f2:	881b      	ldrh	r3, [r3, #0]
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	4b91      	ldr	r3, [pc, #580]	; (800f33c <tcp_receive+0xb0c>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	441a      	add	r2, r3
 800f0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f104:	8909      	ldrh	r1, [r1, #8]
 800f106:	440b      	add	r3, r1
 800f108:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	da9a      	bge.n	800f044 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f110:	2b00      	cmp	r3, #0
 800f112:	d059      	beq.n	800f1c8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f114:	4b88      	ldr	r3, [pc, #544]	; (800f338 <tcp_receive+0xb08>)
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	461a      	mov	r2, r3
 800f11a:	4b88      	ldr	r3, [pc, #544]	; (800f33c <tcp_receive+0xb0c>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	441a      	add	r2, r3
 800f120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f128:	2b00      	cmp	r3, #0
 800f12a:	dd4d      	ble.n	800f1c8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	b29a      	uxth	r2, r3
 800f134:	4b81      	ldr	r3, [pc, #516]	; (800f33c <tcp_receive+0xb0c>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	b29b      	uxth	r3, r3
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	4b80      	ldr	r3, [pc, #512]	; (800f340 <tcp_receive+0xb10>)
 800f140:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f142:	4b7f      	ldr	r3, [pc, #508]	; (800f340 <tcp_receive+0xb10>)
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	899b      	ldrh	r3, [r3, #12]
 800f148:	b29b      	uxth	r3, r3
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fa fd94 	bl	8009c78 <lwip_htons>
 800f150:	4603      	mov	r3, r0
 800f152:	b2db      	uxtb	r3, r3
 800f154:	f003 0302 	and.w	r3, r3, #2
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d005      	beq.n	800f168 <tcp_receive+0x938>
                inseg.len -= 1;
 800f15c:	4b78      	ldr	r3, [pc, #480]	; (800f340 <tcp_receive+0xb10>)
 800f15e:	891b      	ldrh	r3, [r3, #8]
 800f160:	3b01      	subs	r3, #1
 800f162:	b29a      	uxth	r2, r3
 800f164:	4b76      	ldr	r3, [pc, #472]	; (800f340 <tcp_receive+0xb10>)
 800f166:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f168:	4b75      	ldr	r3, [pc, #468]	; (800f340 <tcp_receive+0xb10>)
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	4a74      	ldr	r2, [pc, #464]	; (800f340 <tcp_receive+0xb10>)
 800f16e:	8912      	ldrh	r2, [r2, #8]
 800f170:	4611      	mov	r1, r2
 800f172:	4618      	mov	r0, r3
 800f174:	f7fb ffec 	bl	800b150 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f178:	4b71      	ldr	r3, [pc, #452]	; (800f340 <tcp_receive+0xb10>)
 800f17a:	891c      	ldrh	r4, [r3, #8]
 800f17c:	4b70      	ldr	r3, [pc, #448]	; (800f340 <tcp_receive+0xb10>)
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	899b      	ldrh	r3, [r3, #12]
 800f182:	b29b      	uxth	r3, r3
 800f184:	4618      	mov	r0, r3
 800f186:	f7fa fd77 	bl	8009c78 <lwip_htons>
 800f18a:	4603      	mov	r3, r0
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	f003 0303 	and.w	r3, r3, #3
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <tcp_receive+0x96a>
 800f196:	2301      	movs	r3, #1
 800f198:	e000      	b.n	800f19c <tcp_receive+0x96c>
 800f19a:	2300      	movs	r3, #0
 800f19c:	4423      	add	r3, r4
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	4b65      	ldr	r3, [pc, #404]	; (800f338 <tcp_receive+0xb08>)
 800f1a2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f1a4:	4b64      	ldr	r3, [pc, #400]	; (800f338 <tcp_receive+0xb08>)
 800f1a6:	881b      	ldrh	r3, [r3, #0]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	4b64      	ldr	r3, [pc, #400]	; (800f33c <tcp_receive+0xb0c>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	441a      	add	r2, r3
 800f1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d006      	beq.n	800f1c8 <tcp_receive+0x998>
 800f1ba:	4b62      	ldr	r3, [pc, #392]	; (800f344 <tcp_receive+0xb14>)
 800f1bc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f1c0:	4961      	ldr	r1, [pc, #388]	; (800f348 <tcp_receive+0xb18>)
 800f1c2:	4862      	ldr	r0, [pc, #392]	; (800f34c <tcp_receive+0xb1c>)
 800f1c4:	f006 fbb2 	bl	801592c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f1cc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f1ce:	4b5a      	ldr	r3, [pc, #360]	; (800f338 <tcp_receive+0xb08>)
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	4b59      	ldr	r3, [pc, #356]	; (800f33c <tcp_receive+0xb0c>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	441a      	add	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1e2:	4b55      	ldr	r3, [pc, #340]	; (800f338 <tcp_receive+0xb08>)
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d206      	bcs.n	800f1f8 <tcp_receive+0x9c8>
 800f1ea:	4b56      	ldr	r3, [pc, #344]	; (800f344 <tcp_receive+0xb14>)
 800f1ec:	f240 6207 	movw	r2, #1543	; 0x607
 800f1f0:	4957      	ldr	r1, [pc, #348]	; (800f350 <tcp_receive+0xb20>)
 800f1f2:	4856      	ldr	r0, [pc, #344]	; (800f34c <tcp_receive+0xb1c>)
 800f1f4:	f006 fb9a 	bl	801592c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1fc:	4b4e      	ldr	r3, [pc, #312]	; (800f338 <tcp_receive+0xb08>)
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	b29a      	uxth	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f7fc ffc5 	bl	800c198 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f20e:	4b4c      	ldr	r3, [pc, #304]	; (800f340 <tcp_receive+0xb10>)
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	891b      	ldrh	r3, [r3, #8]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d006      	beq.n	800f226 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f218:	4b49      	ldr	r3, [pc, #292]	; (800f340 <tcp_receive+0xb10>)
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	4a4d      	ldr	r2, [pc, #308]	; (800f354 <tcp_receive+0xb24>)
 800f21e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f220:	4b47      	ldr	r3, [pc, #284]	; (800f340 <tcp_receive+0xb10>)
 800f222:	2200      	movs	r2, #0
 800f224:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f226:	4b46      	ldr	r3, [pc, #280]	; (800f340 <tcp_receive+0xb10>)
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	899b      	ldrh	r3, [r3, #12]
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fa fd22 	bl	8009c78 <lwip_htons>
 800f234:	4603      	mov	r3, r0
 800f236:	b2db      	uxtb	r3, r3
 800f238:	f003 0301 	and.w	r3, r3, #1
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 80b8 	beq.w	800f3b2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f242:	4b45      	ldr	r3, [pc, #276]	; (800f358 <tcp_receive+0xb28>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	f043 0320 	orr.w	r3, r3, #32
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	4b42      	ldr	r3, [pc, #264]	; (800f358 <tcp_receive+0xb28>)
 800f24e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f250:	e0af      	b.n	800f3b2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f256:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	4a36      	ldr	r2, [pc, #216]	; (800f33c <tcp_receive+0xb0c>)
 800f262:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	891b      	ldrh	r3, [r3, #8]
 800f268:	461c      	mov	r4, r3
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	899b      	ldrh	r3, [r3, #12]
 800f270:	b29b      	uxth	r3, r3
 800f272:	4618      	mov	r0, r3
 800f274:	f7fa fd00 	bl	8009c78 <lwip_htons>
 800f278:	4603      	mov	r3, r0
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	f003 0303 	and.w	r3, r3, #3
 800f280:	2b00      	cmp	r3, #0
 800f282:	d001      	beq.n	800f288 <tcp_receive+0xa58>
 800f284:	2301      	movs	r3, #1
 800f286:	e000      	b.n	800f28a <tcp_receive+0xa5a>
 800f288:	2300      	movs	r3, #0
 800f28a:	191a      	adds	r2, r3, r4
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f290:	441a      	add	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f29a:	461c      	mov	r4, r3
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	891b      	ldrh	r3, [r3, #8]
 800f2a0:	461d      	mov	r5, r3
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	899b      	ldrh	r3, [r3, #12]
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fa fce4 	bl	8009c78 <lwip_htons>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	b2db      	uxtb	r3, r3
 800f2b4:	f003 0303 	and.w	r3, r3, #3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <tcp_receive+0xa90>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e000      	b.n	800f2c2 <tcp_receive+0xa92>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	442b      	add	r3, r5
 800f2c4:	429c      	cmp	r4, r3
 800f2c6:	d206      	bcs.n	800f2d6 <tcp_receive+0xaa6>
 800f2c8:	4b1e      	ldr	r3, [pc, #120]	; (800f344 <tcp_receive+0xb14>)
 800f2ca:	f240 622b 	movw	r2, #1579	; 0x62b
 800f2ce:	4923      	ldr	r1, [pc, #140]	; (800f35c <tcp_receive+0xb2c>)
 800f2d0:	481e      	ldr	r0, [pc, #120]	; (800f34c <tcp_receive+0xb1c>)
 800f2d2:	f006 fb2b 	bl	801592c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	891b      	ldrh	r3, [r3, #8]
 800f2da:	461c      	mov	r4, r3
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	899b      	ldrh	r3, [r3, #12]
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fa fcc7 	bl	8009c78 <lwip_htons>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	f003 0303 	and.w	r3, r3, #3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <tcp_receive+0xaca>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e000      	b.n	800f2fc <tcp_receive+0xacc>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	1919      	adds	r1, r3, r4
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f302:	b28b      	uxth	r3, r1
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	b29a      	uxth	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7fc ff43 	bl	800c198 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	891b      	ldrh	r3, [r3, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d028      	beq.n	800f36e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f31c:	4b0d      	ldr	r3, [pc, #52]	; (800f354 <tcp_receive+0xb24>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d01d      	beq.n	800f360 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f324:	4b0b      	ldr	r3, [pc, #44]	; (800f354 <tcp_receive+0xb24>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	4619      	mov	r1, r3
 800f32e:	4610      	mov	r0, r2
 800f330:	f7fc f962 	bl	800b5f8 <pbuf_cat>
 800f334:	e018      	b.n	800f368 <tcp_receive+0xb38>
 800f336:	bf00      	nop
 800f338:	2002e68a 	.word	0x2002e68a
 800f33c:	2002e680 	.word	0x2002e680
 800f340:	2002e660 	.word	0x2002e660
 800f344:	080180d0 	.word	0x080180d0
 800f348:	080184b0 	.word	0x080184b0
 800f34c:	0801811c 	.word	0x0801811c
 800f350:	080184ec 	.word	0x080184ec
 800f354:	2002e690 	.word	0x2002e690
 800f358:	2002e68d 	.word	0x2002e68d
 800f35c:	0801850c 	.word	0x0801850c
            } else {
              recv_data = cseg->p;
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	4a70      	ldr	r2, [pc, #448]	; (800f528 <tcp_receive+0xcf8>)
 800f366:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	2200      	movs	r2, #0
 800f36c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	899b      	ldrh	r3, [r3, #12]
 800f374:	b29b      	uxth	r3, r3
 800f376:	4618      	mov	r0, r3
 800f378:	f7fa fc7e 	bl	8009c78 <lwip_htons>
 800f37c:	4603      	mov	r3, r0
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00d      	beq.n	800f3a4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f388:	4b68      	ldr	r3, [pc, #416]	; (800f52c <tcp_receive+0xcfc>)
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	f043 0320 	orr.w	r3, r3, #32
 800f390:	b2da      	uxtb	r2, r3
 800f392:	4b66      	ldr	r3, [pc, #408]	; (800f52c <tcp_receive+0xcfc>)
 800f394:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	7d1b      	ldrb	r3, [r3, #20]
 800f39a:	2b04      	cmp	r3, #4
 800f39c:	d102      	bne.n	800f3a4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2207      	movs	r2, #7
 800f3a2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f3ac:	68b8      	ldr	r0, [r7, #8]
 800f3ae:	f7fd fbd2 	bl	800cb56 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d008      	beq.n	800f3cc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	f43f af43 	beq.w	800f252 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	8b5b      	ldrh	r3, [r3, #26]
 800f3d0:	f003 0301 	and.w	r3, r3, #1
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d00e      	beq.n	800f3f6 <tcp_receive+0xbc6>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	8b5b      	ldrh	r3, [r3, #26]
 800f3dc:	f023 0301 	bic.w	r3, r3, #1
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	835a      	strh	r2, [r3, #26]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	8b5b      	ldrh	r3, [r3, #26]
 800f3ea:	f043 0302 	orr.w	r3, r3, #2
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f3f4:	e188      	b.n	800f708 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	8b5b      	ldrh	r3, [r3, #26]
 800f3fa:	f043 0301 	orr.w	r3, r3, #1
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f404:	e180      	b.n	800f708 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d106      	bne.n	800f41c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f40e:	4848      	ldr	r0, [pc, #288]	; (800f530 <tcp_receive+0xd00>)
 800f410:	f7fd fbba 	bl	800cb88 <tcp_seg_copy>
 800f414:	4602      	mov	r2, r0
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	675a      	str	r2, [r3, #116]	; 0x74
 800f41a:	e16d      	b.n	800f6f8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f41c:	2300      	movs	r3, #0
 800f41e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f424:	63bb      	str	r3, [r7, #56]	; 0x38
 800f426:	e157      	b.n	800f6d8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	685a      	ldr	r2, [r3, #4]
 800f42e:	4b41      	ldr	r3, [pc, #260]	; (800f534 <tcp_receive+0xd04>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	429a      	cmp	r2, r3
 800f434:	d11d      	bne.n	800f472 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f436:	4b3e      	ldr	r3, [pc, #248]	; (800f530 <tcp_receive+0xd00>)
 800f438:	891a      	ldrh	r2, [r3, #8]
 800f43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43c:	891b      	ldrh	r3, [r3, #8]
 800f43e:	429a      	cmp	r2, r3
 800f440:	f240 814f 	bls.w	800f6e2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f444:	483a      	ldr	r0, [pc, #232]	; (800f530 <tcp_receive+0xd00>)
 800f446:	f7fd fb9f 	bl	800cb88 <tcp_seg_copy>
 800f44a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f000 8149 	beq.w	800f6e6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f456:	2b00      	cmp	r3, #0
 800f458:	d003      	beq.n	800f462 <tcp_receive+0xc32>
                    prev->next = cseg;
 800f45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f45c:	697a      	ldr	r2, [r7, #20]
 800f45e:	601a      	str	r2, [r3, #0]
 800f460:	e002      	b.n	800f468 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	697a      	ldr	r2, [r7, #20]
 800f466:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f468:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f46a:	6978      	ldr	r0, [r7, #20]
 800f46c:	f7ff f8dc 	bl	800e628 <tcp_oos_insert_segment>
                }
                break;
 800f470:	e139      	b.n	800f6e6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f474:	2b00      	cmp	r3, #0
 800f476:	d117      	bne.n	800f4a8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f478:	4b2e      	ldr	r3, [pc, #184]	; (800f534 <tcp_receive+0xd04>)
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	2b00      	cmp	r3, #0
 800f486:	da57      	bge.n	800f538 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f488:	4829      	ldr	r0, [pc, #164]	; (800f530 <tcp_receive+0xd00>)
 800f48a:	f7fd fb7d 	bl	800cb88 <tcp_seg_copy>
 800f48e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	2b00      	cmp	r3, #0
 800f494:	f000 8129 	beq.w	800f6ea <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	69ba      	ldr	r2, [r7, #24]
 800f49c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f49e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4a0:	69b8      	ldr	r0, [r7, #24]
 800f4a2:	f7ff f8c1 	bl	800e628 <tcp_oos_insert_segment>
                  }
                  break;
 800f4a6:	e120      	b.n	800f6ea <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f4a8:	4b22      	ldr	r3, [pc, #136]	; (800f534 <tcp_receive+0xd04>)
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	db3e      	blt.n	800f538 <tcp_receive+0xd08>
 800f4ba:	4b1e      	ldr	r3, [pc, #120]	; (800f534 <tcp_receive+0xd04>)
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	1ad3      	subs	r3, r2, r3
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	dc35      	bgt.n	800f538 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f4cc:	4818      	ldr	r0, [pc, #96]	; (800f530 <tcp_receive+0xd00>)
 800f4ce:	f7fd fb5b 	bl	800cb88 <tcp_seg_copy>
 800f4d2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f000 8109 	beq.w	800f6ee <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4e4:	8912      	ldrh	r2, [r2, #8]
 800f4e6:	441a      	add	r2, r3
 800f4e8:	4b12      	ldr	r3, [pc, #72]	; (800f534 <tcp_receive+0xd04>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	1ad3      	subs	r3, r2, r3
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	dd12      	ble.n	800f518 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f4f2:	4b10      	ldr	r3, [pc, #64]	; (800f534 <tcp_receive+0xd04>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	1ad3      	subs	r3, r2, r3
 800f502:	b29a      	uxth	r2, r3
 800f504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f506:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f50a:	685a      	ldr	r2, [r3, #4]
 800f50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f50e:	891b      	ldrh	r3, [r3, #8]
 800f510:	4619      	mov	r1, r3
 800f512:	4610      	mov	r0, r2
 800f514:	f7fb fe1c 	bl	800b150 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f51a:	69fa      	ldr	r2, [r7, #28]
 800f51c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f51e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f520:	69f8      	ldr	r0, [r7, #28]
 800f522:	f7ff f881 	bl	800e628 <tcp_oos_insert_segment>
                  }
                  break;
 800f526:	e0e2      	b.n	800f6ee <tcp_receive+0xebe>
 800f528:	2002e690 	.word	0x2002e690
 800f52c:	2002e68d 	.word	0x2002e68d
 800f530:	2002e660 	.word	0x2002e660
 800f534:	2002e680 	.word	0x2002e680
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	f040 80c6 	bne.w	800f6d2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f546:	4b80      	ldr	r3, [pc, #512]	; (800f748 <tcp_receive+0xf18>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f552:	2b00      	cmp	r3, #0
 800f554:	f340 80bd 	ble.w	800f6d2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	899b      	ldrh	r3, [r3, #12]
 800f55e:	b29b      	uxth	r3, r3
 800f560:	4618      	mov	r0, r3
 800f562:	f7fa fb89 	bl	8009c78 <lwip_htons>
 800f566:	4603      	mov	r3, r0
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	f003 0301 	and.w	r3, r3, #1
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f040 80bf 	bne.w	800f6f2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f574:	4875      	ldr	r0, [pc, #468]	; (800f74c <tcp_receive+0xf1c>)
 800f576:	f7fd fb07 	bl	800cb88 <tcp_seg_copy>
 800f57a:	4602      	mov	r2, r0
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	f000 80b6 	beq.w	800f6f6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f592:	8912      	ldrh	r2, [r2, #8]
 800f594:	441a      	add	r2, r3
 800f596:	4b6c      	ldr	r3, [pc, #432]	; (800f748 <tcp_receive+0xf18>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	1ad3      	subs	r3, r2, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	dd12      	ble.n	800f5c6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f5a0:	4b69      	ldr	r3, [pc, #420]	; (800f748 <tcp_receive+0xf18>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	1ad3      	subs	r3, r2, r3
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b8:	685a      	ldr	r2, [r3, #4]
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5bc:	891b      	ldrh	r3, [r3, #8]
 800f5be:	4619      	mov	r1, r3
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	f7fb fdc5 	bl	800b150 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f5c6:	4b62      	ldr	r3, [pc, #392]	; (800f750 <tcp_receive+0xf20>)
 800f5c8:	881b      	ldrh	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	4b5e      	ldr	r3, [pc, #376]	; (800f748 <tcp_receive+0xf18>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	441a      	add	r2, r3
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d6:	6879      	ldr	r1, [r7, #4]
 800f5d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f5da:	440b      	add	r3, r1
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f340 8089 	ble.w	800f6f6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	899b      	ldrh	r3, [r3, #12]
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fa fb42 	bl	8009c78 <lwip_htons>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	f003 0301 	and.w	r3, r3, #1
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d022      	beq.n	800f646 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	899b      	ldrh	r3, [r3, #12]
 800f608:	b29b      	uxth	r3, r3
 800f60a:	b21b      	sxth	r3, r3
 800f60c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f610:	b21c      	sxth	r4, r3
 800f612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	899b      	ldrh	r3, [r3, #12]
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fa fb2b 	bl	8009c78 <lwip_htons>
 800f622:	4603      	mov	r3, r0
 800f624:	b2db      	uxtb	r3, r3
 800f626:	b29b      	uxth	r3, r3
 800f628:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fa fb22 	bl	8009c78 <lwip_htons>
 800f634:	4603      	mov	r3, r0
 800f636:	b21b      	sxth	r3, r3
 800f638:	4323      	orrs	r3, r4
 800f63a:	b21a      	sxth	r2, r3
 800f63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	b292      	uxth	r2, r2
 800f644:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f64a:	b29a      	uxth	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f650:	4413      	add	r3, r2
 800f652:	b299      	uxth	r1, r3
 800f654:	4b3c      	ldr	r3, [pc, #240]	; (800f748 <tcp_receive+0xf18>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	b29a      	uxth	r2, r3
 800f65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	1a8a      	subs	r2, r1, r2
 800f660:	b292      	uxth	r2, r2
 800f662:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	685a      	ldr	r2, [r3, #4]
 800f66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	891b      	ldrh	r3, [r3, #8]
 800f670:	4619      	mov	r1, r3
 800f672:	4610      	mov	r0, r2
 800f674:	f7fb fd6c 	bl	800b150 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	891c      	ldrh	r4, [r3, #8]
 800f67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	899b      	ldrh	r3, [r3, #12]
 800f686:	b29b      	uxth	r3, r3
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fa faf5 	bl	8009c78 <lwip_htons>
 800f68e:	4603      	mov	r3, r0
 800f690:	b2db      	uxtb	r3, r3
 800f692:	f003 0303 	and.w	r3, r3, #3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d001      	beq.n	800f69e <tcp_receive+0xe6e>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e000      	b.n	800f6a0 <tcp_receive+0xe70>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	4423      	add	r3, r4
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	4b2a      	ldr	r3, [pc, #168]	; (800f750 <tcp_receive+0xf20>)
 800f6a6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f6a8:	4b29      	ldr	r3, [pc, #164]	; (800f750 <tcp_receive+0xf20>)
 800f6aa:	881b      	ldrh	r3, [r3, #0]
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	4b26      	ldr	r3, [pc, #152]	; (800f748 <tcp_receive+0xf18>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	441a      	add	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b8:	6879      	ldr	r1, [r7, #4]
 800f6ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6bc:	440b      	add	r3, r1
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d019      	beq.n	800f6f6 <tcp_receive+0xec6>
 800f6c2:	4b24      	ldr	r3, [pc, #144]	; (800f754 <tcp_receive+0xf24>)
 800f6c4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f6c8:	4923      	ldr	r1, [pc, #140]	; (800f758 <tcp_receive+0xf28>)
 800f6ca:	4824      	ldr	r0, [pc, #144]	; (800f75c <tcp_receive+0xf2c>)
 800f6cc:	f006 f92e 	bl	801592c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f6d0:	e011      	b.n	800f6f6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f47f aea4 	bne.w	800f428 <tcp_receive+0xbf8>
 800f6e0:	e00a      	b.n	800f6f8 <tcp_receive+0xec8>
                break;
 800f6e2:	bf00      	nop
 800f6e4:	e008      	b.n	800f6f8 <tcp_receive+0xec8>
                break;
 800f6e6:	bf00      	nop
 800f6e8:	e006      	b.n	800f6f8 <tcp_receive+0xec8>
                  break;
 800f6ea:	bf00      	nop
 800f6ec:	e004      	b.n	800f6f8 <tcp_receive+0xec8>
                  break;
 800f6ee:	bf00      	nop
 800f6f0:	e002      	b.n	800f6f8 <tcp_receive+0xec8>
                  break;
 800f6f2:	bf00      	nop
 800f6f4:	e000      	b.n	800f6f8 <tcp_receive+0xec8>
                break;
 800f6f6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f001 fa33 	bl	8010b64 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f6fe:	e003      	b.n	800f708 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f001 fa2f 	bl	8010b64 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f706:	e01a      	b.n	800f73e <tcp_receive+0xf0e>
 800f708:	e019      	b.n	800f73e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f70a:	4b0f      	ldr	r3, [pc, #60]	; (800f748 <tcp_receive+0xf18>)
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f712:	1ad3      	subs	r3, r2, r3
 800f714:	2b00      	cmp	r3, #0
 800f716:	db0a      	blt.n	800f72e <tcp_receive+0xefe>
 800f718:	4b0b      	ldr	r3, [pc, #44]	; (800f748 <tcp_receive+0xf18>)
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f720:	6879      	ldr	r1, [r7, #4]
 800f722:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f724:	440b      	add	r3, r1
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	3301      	adds	r3, #1
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	dd07      	ble.n	800f73e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	8b5b      	ldrh	r3, [r3, #26]
 800f732:	f043 0302 	orr.w	r3, r3, #2
 800f736:	b29a      	uxth	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f73c:	e7ff      	b.n	800f73e <tcp_receive+0xf0e>
 800f73e:	bf00      	nop
 800f740:	3750      	adds	r7, #80	; 0x50
 800f742:	46bd      	mov	sp, r7
 800f744:	bdb0      	pop	{r4, r5, r7, pc}
 800f746:	bf00      	nop
 800f748:	2002e680 	.word	0x2002e680
 800f74c:	2002e660 	.word	0x2002e660
 800f750:	2002e68a 	.word	0x2002e68a
 800f754:	080180d0 	.word	0x080180d0
 800f758:	08018478 	.word	0x08018478
 800f75c:	0801811c 	.word	0x0801811c

0800f760 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f766:	4b15      	ldr	r3, [pc, #84]	; (800f7bc <tcp_get_next_optbyte+0x5c>)
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	1c5a      	adds	r2, r3, #1
 800f76c:	b291      	uxth	r1, r2
 800f76e:	4a13      	ldr	r2, [pc, #76]	; (800f7bc <tcp_get_next_optbyte+0x5c>)
 800f770:	8011      	strh	r1, [r2, #0]
 800f772:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f774:	4b12      	ldr	r3, [pc, #72]	; (800f7c0 <tcp_get_next_optbyte+0x60>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d004      	beq.n	800f786 <tcp_get_next_optbyte+0x26>
 800f77c:	4b11      	ldr	r3, [pc, #68]	; (800f7c4 <tcp_get_next_optbyte+0x64>)
 800f77e:	881b      	ldrh	r3, [r3, #0]
 800f780:	88fa      	ldrh	r2, [r7, #6]
 800f782:	429a      	cmp	r2, r3
 800f784:	d208      	bcs.n	800f798 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f786:	4b10      	ldr	r3, [pc, #64]	; (800f7c8 <tcp_get_next_optbyte+0x68>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	3314      	adds	r3, #20
 800f78c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f78e:	88fb      	ldrh	r3, [r7, #6]
 800f790:	683a      	ldr	r2, [r7, #0]
 800f792:	4413      	add	r3, r2
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	e00b      	b.n	800f7b0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f798:	88fb      	ldrh	r3, [r7, #6]
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <tcp_get_next_optbyte+0x64>)
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f7a6:	4b06      	ldr	r3, [pc, #24]	; (800f7c0 <tcp_get_next_optbyte+0x60>)
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	797b      	ldrb	r3, [r7, #5]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr
 800f7bc:	2002e67c 	.word	0x2002e67c
 800f7c0:	2002e678 	.word	0x2002e678
 800f7c4:	2002e676 	.word	0x2002e676
 800f7c8:	2002e670 	.word	0x2002e670

0800f7cc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d106      	bne.n	800f7e8 <tcp_parseopt+0x1c>
 800f7da:	4b32      	ldr	r3, [pc, #200]	; (800f8a4 <tcp_parseopt+0xd8>)
 800f7dc:	f240 727d 	movw	r2, #1917	; 0x77d
 800f7e0:	4931      	ldr	r1, [pc, #196]	; (800f8a8 <tcp_parseopt+0xdc>)
 800f7e2:	4832      	ldr	r0, [pc, #200]	; (800f8ac <tcp_parseopt+0xe0>)
 800f7e4:	f006 f8a2 	bl	801592c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f7e8:	4b31      	ldr	r3, [pc, #196]	; (800f8b0 <tcp_parseopt+0xe4>)
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d055      	beq.n	800f89c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f7f0:	4b30      	ldr	r3, [pc, #192]	; (800f8b4 <tcp_parseopt+0xe8>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	801a      	strh	r2, [r3, #0]
 800f7f6:	e045      	b.n	800f884 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f7f8:	f7ff ffb2 	bl	800f760 <tcp_get_next_optbyte>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f800:	7bfb      	ldrb	r3, [r7, #15]
 800f802:	2b02      	cmp	r3, #2
 800f804:	d006      	beq.n	800f814 <tcp_parseopt+0x48>
 800f806:	2b02      	cmp	r3, #2
 800f808:	dc2b      	bgt.n	800f862 <tcp_parseopt+0x96>
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d041      	beq.n	800f892 <tcp_parseopt+0xc6>
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d127      	bne.n	800f862 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f812:	e037      	b.n	800f884 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f814:	f7ff ffa4 	bl	800f760 <tcp_get_next_optbyte>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b04      	cmp	r3, #4
 800f81c:	d13b      	bne.n	800f896 <tcp_parseopt+0xca>
 800f81e:	4b25      	ldr	r3, [pc, #148]	; (800f8b4 <tcp_parseopt+0xe8>)
 800f820:	881b      	ldrh	r3, [r3, #0]
 800f822:	3301      	adds	r3, #1
 800f824:	4a22      	ldr	r2, [pc, #136]	; (800f8b0 <tcp_parseopt+0xe4>)
 800f826:	8812      	ldrh	r2, [r2, #0]
 800f828:	4293      	cmp	r3, r2
 800f82a:	da34      	bge.n	800f896 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f82c:	f7ff ff98 	bl	800f760 <tcp_get_next_optbyte>
 800f830:	4603      	mov	r3, r0
 800f832:	b29b      	uxth	r3, r3
 800f834:	021b      	lsls	r3, r3, #8
 800f836:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f838:	f7ff ff92 	bl	800f760 <tcp_get_next_optbyte>
 800f83c:	4603      	mov	r3, r0
 800f83e:	b29a      	uxth	r2, r3
 800f840:	89bb      	ldrh	r3, [r7, #12]
 800f842:	4313      	orrs	r3, r2
 800f844:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f846:	89bb      	ldrh	r3, [r7, #12]
 800f848:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f84c:	d804      	bhi.n	800f858 <tcp_parseopt+0x8c>
 800f84e:	89bb      	ldrh	r3, [r7, #12]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d001      	beq.n	800f858 <tcp_parseopt+0x8c>
 800f854:	89ba      	ldrh	r2, [r7, #12]
 800f856:	e001      	b.n	800f85c <tcp_parseopt+0x90>
 800f858:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f860:	e010      	b.n	800f884 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f862:	f7ff ff7d 	bl	800f760 <tcp_get_next_optbyte>
 800f866:	4603      	mov	r3, r0
 800f868:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f86a:	7afb      	ldrb	r3, [r7, #11]
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d914      	bls.n	800f89a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f870:	7afb      	ldrb	r3, [r7, #11]
 800f872:	b29a      	uxth	r2, r3
 800f874:	4b0f      	ldr	r3, [pc, #60]	; (800f8b4 <tcp_parseopt+0xe8>)
 800f876:	881b      	ldrh	r3, [r3, #0]
 800f878:	4413      	add	r3, r2
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	3b02      	subs	r3, #2
 800f87e:	b29a      	uxth	r2, r3
 800f880:	4b0c      	ldr	r3, [pc, #48]	; (800f8b4 <tcp_parseopt+0xe8>)
 800f882:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f884:	4b0b      	ldr	r3, [pc, #44]	; (800f8b4 <tcp_parseopt+0xe8>)
 800f886:	881a      	ldrh	r2, [r3, #0]
 800f888:	4b09      	ldr	r3, [pc, #36]	; (800f8b0 <tcp_parseopt+0xe4>)
 800f88a:	881b      	ldrh	r3, [r3, #0]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d3b3      	bcc.n	800f7f8 <tcp_parseopt+0x2c>
 800f890:	e004      	b.n	800f89c <tcp_parseopt+0xd0>
          return;
 800f892:	bf00      	nop
 800f894:	e002      	b.n	800f89c <tcp_parseopt+0xd0>
            return;
 800f896:	bf00      	nop
 800f898:	e000      	b.n	800f89c <tcp_parseopt+0xd0>
            return;
 800f89a:	bf00      	nop
      }
    }
  }
}
 800f89c:	3710      	adds	r7, #16
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	080180d0 	.word	0x080180d0
 800f8a8:	08018534 	.word	0x08018534
 800f8ac:	0801811c 	.word	0x0801811c
 800f8b0:	2002e674 	.word	0x2002e674
 800f8b4:	2002e67c 	.word	0x2002e67c

0800f8b8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f8bc:	4b05      	ldr	r3, [pc, #20]	; (800f8d4 <tcp_trigger_input_pcb_close+0x1c>)
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	f043 0310 	orr.w	r3, r3, #16
 800f8c4:	b2da      	uxtb	r2, r3
 800f8c6:	4b03      	ldr	r3, [pc, #12]	; (800f8d4 <tcp_trigger_input_pcb_close+0x1c>)
 800f8c8:	701a      	strb	r2, [r3, #0]
}
 800f8ca:	bf00      	nop
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr
 800f8d4:	2002e68d 	.word	0x2002e68d

0800f8d8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00a      	beq.n	800f900 <tcp_route+0x28>
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	7a1b      	ldrb	r3, [r3, #8]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d006      	beq.n	800f900 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	7a1b      	ldrb	r3, [r3, #8]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fb fa22 	bl	800ad40 <netif_get_by_index>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	e003      	b.n	800f908 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f003 f9e3 	bl	8012ccc <ip4_route>
 800f906:	4603      	mov	r3, r0
  }
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f910:	b590      	push	{r4, r7, lr}
 800f912:	b087      	sub	sp, #28
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	603b      	str	r3, [r7, #0]
 800f91c:	4613      	mov	r3, r2
 800f91e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d105      	bne.n	800f932 <tcp_create_segment+0x22>
 800f926:	4b44      	ldr	r3, [pc, #272]	; (800fa38 <tcp_create_segment+0x128>)
 800f928:	22a3      	movs	r2, #163	; 0xa3
 800f92a:	4944      	ldr	r1, [pc, #272]	; (800fa3c <tcp_create_segment+0x12c>)
 800f92c:	4844      	ldr	r0, [pc, #272]	; (800fa40 <tcp_create_segment+0x130>)
 800f92e:	f005 fffd 	bl	801592c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d105      	bne.n	800f944 <tcp_create_segment+0x34>
 800f938:	4b3f      	ldr	r3, [pc, #252]	; (800fa38 <tcp_create_segment+0x128>)
 800f93a:	22a4      	movs	r2, #164	; 0xa4
 800f93c:	4941      	ldr	r1, [pc, #260]	; (800fa44 <tcp_create_segment+0x134>)
 800f93e:	4840      	ldr	r0, [pc, #256]	; (800fa40 <tcp_create_segment+0x130>)
 800f940:	f005 fff4 	bl	801592c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f944:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	f003 0304 	and.w	r3, r3, #4
 800f950:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f952:	2003      	movs	r0, #3
 800f954:	f7fa fe68 	bl	800a628 <memp_malloc>
 800f958:	6138      	str	r0, [r7, #16]
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d104      	bne.n	800f96a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f960:	68b8      	ldr	r0, [r7, #8]
 800f962:	f7fb fd7b 	bl	800b45c <pbuf_free>
    return NULL;
 800f966:	2300      	movs	r3, #0
 800f968:	e061      	b.n	800fa2e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f970:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	2200      	movs	r2, #0
 800f976:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	891a      	ldrh	r2, [r3, #8]
 800f982:	7dfb      	ldrb	r3, [r7, #23]
 800f984:	b29b      	uxth	r3, r3
 800f986:	429a      	cmp	r2, r3
 800f988:	d205      	bcs.n	800f996 <tcp_create_segment+0x86>
 800f98a:	4b2b      	ldr	r3, [pc, #172]	; (800fa38 <tcp_create_segment+0x128>)
 800f98c:	22b0      	movs	r2, #176	; 0xb0
 800f98e:	492e      	ldr	r1, [pc, #184]	; (800fa48 <tcp_create_segment+0x138>)
 800f990:	482b      	ldr	r0, [pc, #172]	; (800fa40 <tcp_create_segment+0x130>)
 800f992:	f005 ffcb 	bl	801592c <iprintf>
  seg->len = p->tot_len - optlen;
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	891a      	ldrh	r2, [r3, #8]
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f9a6:	2114      	movs	r1, #20
 800f9a8:	68b8      	ldr	r0, [r7, #8]
 800f9aa:	f7fb fcc1 	bl	800b330 <pbuf_add_header>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d004      	beq.n	800f9be <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f9b4:	6938      	ldr	r0, [r7, #16]
 800f9b6:	f7fd f8ce 	bl	800cb56 <tcp_seg_free>
    return NULL;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	e037      	b.n	800fa2e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	685a      	ldr	r2, [r3, #4]
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	8ada      	ldrh	r2, [r3, #22]
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	68dc      	ldr	r4, [r3, #12]
 800f9d0:	4610      	mov	r0, r2
 800f9d2:	f7fa f951 	bl	8009c78 <lwip_htons>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	8b1a      	ldrh	r2, [r3, #24]
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	68dc      	ldr	r4, [r3, #12]
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	f7fa f948 	bl	8009c78 <lwip_htons>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	68dc      	ldr	r4, [r3, #12]
 800f9f0:	6838      	ldr	r0, [r7, #0]
 800f9f2:	f7fa f956 	bl	8009ca2 <lwip_htonl>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f9fa:	7dfb      	ldrb	r3, [r7, #23]
 800f9fc:	089b      	lsrs	r3, r3, #2
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	3305      	adds	r3, #5
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	031b      	lsls	r3, r3, #12
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	79fb      	ldrb	r3, [r7, #7]
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	b29a      	uxth	r2, r3
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	68dc      	ldr	r4, [r3, #12]
 800fa16:	4610      	mov	r0, r2
 800fa18:	f7fa f92e 	bl	8009c78 <lwip_htons>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	2200      	movs	r2, #0
 800fa26:	749a      	strb	r2, [r3, #18]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	74da      	strb	r2, [r3, #19]
  return seg;
 800fa2c:	693b      	ldr	r3, [r7, #16]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	371c      	adds	r7, #28
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd90      	pop	{r4, r7, pc}
 800fa36:	bf00      	nop
 800fa38:	08018550 	.word	0x08018550
 800fa3c:	08018584 	.word	0x08018584
 800fa40:	080185a4 	.word	0x080185a4
 800fa44:	080185cc 	.word	0x080185cc
 800fa48:	080185f0 	.word	0x080185f0

0800fa4c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fa4c:	b590      	push	{r4, r7, lr}
 800fa4e:	b08b      	sub	sp, #44	; 0x2c
 800fa50:	af02      	add	r7, sp, #8
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	460b      	mov	r3, r1
 800fa56:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	61fb      	str	r3, [r7, #28]
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fa60:	2300      	movs	r3, #0
 800fa62:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d106      	bne.n	800fa78 <tcp_split_unsent_seg+0x2c>
 800fa6a:	4b95      	ldr	r3, [pc, #596]	; (800fcc0 <tcp_split_unsent_seg+0x274>)
 800fa6c:	f240 324b 	movw	r2, #843	; 0x34b
 800fa70:	4994      	ldr	r1, [pc, #592]	; (800fcc4 <tcp_split_unsent_seg+0x278>)
 800fa72:	4895      	ldr	r0, [pc, #596]	; (800fcc8 <tcp_split_unsent_seg+0x27c>)
 800fa74:	f005 ff5a 	bl	801592c <iprintf>

  useg = pcb->unsent;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa7c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d102      	bne.n	800fa8a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fa84:	f04f 33ff 	mov.w	r3, #4294967295
 800fa88:	e116      	b.n	800fcb8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fa8a:	887b      	ldrh	r3, [r7, #2]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d109      	bne.n	800faa4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fa90:	4b8b      	ldr	r3, [pc, #556]	; (800fcc0 <tcp_split_unsent_seg+0x274>)
 800fa92:	f240 3253 	movw	r2, #851	; 0x353
 800fa96:	498d      	ldr	r1, [pc, #564]	; (800fccc <tcp_split_unsent_seg+0x280>)
 800fa98:	488b      	ldr	r0, [pc, #556]	; (800fcc8 <tcp_split_unsent_seg+0x27c>)
 800fa9a:	f005 ff47 	bl	801592c <iprintf>
    return ERR_VAL;
 800fa9e:	f06f 0305 	mvn.w	r3, #5
 800faa2:	e109      	b.n	800fcb8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	891b      	ldrh	r3, [r3, #8]
 800faa8:	887a      	ldrh	r2, [r7, #2]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d301      	bcc.n	800fab2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800faae:	2300      	movs	r3, #0
 800fab0:	e102      	b.n	800fcb8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fab6:	887a      	ldrh	r2, [r7, #2]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d906      	bls.n	800faca <tcp_split_unsent_seg+0x7e>
 800fabc:	4b80      	ldr	r3, [pc, #512]	; (800fcc0 <tcp_split_unsent_seg+0x274>)
 800fabe:	f240 325b 	movw	r2, #859	; 0x35b
 800fac2:	4983      	ldr	r1, [pc, #524]	; (800fcd0 <tcp_split_unsent_seg+0x284>)
 800fac4:	4880      	ldr	r0, [pc, #512]	; (800fcc8 <tcp_split_unsent_seg+0x27c>)
 800fac6:	f005 ff31 	bl	801592c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	891b      	ldrh	r3, [r3, #8]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d106      	bne.n	800fae0 <tcp_split_unsent_seg+0x94>
 800fad2:	4b7b      	ldr	r3, [pc, #492]	; (800fcc0 <tcp_split_unsent_seg+0x274>)
 800fad4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fad8:	497e      	ldr	r1, [pc, #504]	; (800fcd4 <tcp_split_unsent_seg+0x288>)
 800fada:	487b      	ldr	r0, [pc, #492]	; (800fcc8 <tcp_split_unsent_seg+0x27c>)
 800fadc:	f005 ff26 	bl	801592c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	7a9b      	ldrb	r3, [r3, #10]
 800fae4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	b2db      	uxtb	r3, r3
 800faec:	f003 0304 	and.w	r3, r3, #4
 800faf0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	891a      	ldrh	r2, [r3, #8]
 800faf6:	887b      	ldrh	r3, [r7, #2]
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fafc:	7bbb      	ldrb	r3, [r7, #14]
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	89bb      	ldrh	r3, [r7, #12]
 800fb02:	4413      	add	r3, r2
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	2036      	movs	r0, #54	; 0x36
 800fb0e:	f7fb f9c1 	bl	800ae94 <pbuf_alloc>
 800fb12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	f000 80b7 	beq.w	800fc8a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	891a      	ldrh	r2, [r3, #8]
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	891b      	ldrh	r3, [r3, #8]
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	887b      	ldrh	r3, [r7, #2]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	6858      	ldr	r0, [r3, #4]
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	685a      	ldr	r2, [r3, #4]
 800fb38:	7bbb      	ldrb	r3, [r7, #14]
 800fb3a:	18d1      	adds	r1, r2, r3
 800fb3c:	897b      	ldrh	r3, [r7, #10]
 800fb3e:	89ba      	ldrh	r2, [r7, #12]
 800fb40:	f7fb fe92 	bl	800b868 <pbuf_copy_partial>
 800fb44:	4603      	mov	r3, r0
 800fb46:	461a      	mov	r2, r3
 800fb48:	89bb      	ldrh	r3, [r7, #12]
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	f040 809f 	bne.w	800fc8e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	899b      	ldrh	r3, [r3, #12]
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fa f88d 	bl	8009c78 <lwip_htons>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb66:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fb68:	2300      	movs	r3, #0
 800fb6a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fb6c:	7efb      	ldrb	r3, [r7, #27]
 800fb6e:	f003 0308 	and.w	r3, r3, #8
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d007      	beq.n	800fb86 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fb76:	7efb      	ldrb	r3, [r7, #27]
 800fb78:	f023 0308 	bic.w	r3, r3, #8
 800fb7c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fb7e:	7ebb      	ldrb	r3, [r7, #26]
 800fb80:	f043 0308 	orr.w	r3, r3, #8
 800fb84:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fb86:	7efb      	ldrb	r3, [r7, #27]
 800fb88:	f003 0301 	and.w	r3, r3, #1
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d007      	beq.n	800fba0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fb90:	7efb      	ldrb	r3, [r7, #27]
 800fb92:	f023 0301 	bic.w	r3, r3, #1
 800fb96:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fb98:	7ebb      	ldrb	r3, [r7, #26]
 800fb9a:	f043 0301 	orr.w	r3, r3, #1
 800fb9e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fa f87b 	bl	8009ca2 <lwip_htonl>
 800fbac:	4602      	mov	r2, r0
 800fbae:	887b      	ldrh	r3, [r7, #2]
 800fbb0:	18d1      	adds	r1, r2, r3
 800fbb2:	7eba      	ldrb	r2, [r7, #26]
 800fbb4:	7bfb      	ldrb	r3, [r7, #15]
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	6939      	ldr	r1, [r7, #16]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7ff fea7 	bl	800f910 <tcp_create_segment>
 800fbc2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fbc4:	69fb      	ldr	r3, [r7, #28]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d063      	beq.n	800fc92 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fb fcd2 	bl	800b578 <pbuf_clen>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbde:	1a9b      	subs	r3, r3, r2
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	6858      	ldr	r0, [r3, #4]
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	891a      	ldrh	r2, [r3, #8]
 800fbf2:	89bb      	ldrh	r3, [r7, #12]
 800fbf4:	1ad3      	subs	r3, r2, r3
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	f7fb faa9 	bl	800b150 <pbuf_realloc>
  useg->len -= remainder;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	891a      	ldrh	r2, [r3, #8]
 800fc02:	89bb      	ldrh	r3, [r7, #12]
 800fc04:	1ad3      	subs	r3, r2, r3
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	899b      	ldrh	r3, [r3, #12]
 800fc12:	b29c      	uxth	r4, r3
 800fc14:	7efb      	ldrb	r3, [r7, #27]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fa f82d 	bl	8009c78 <lwip_htons>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	461a      	mov	r2, r3
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	4322      	orrs	r2, r4
 800fc28:	b292      	uxth	r2, r2
 800fc2a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fb fca1 	bl	800b578 <pbuf_clen>
 800fc36:	4603      	mov	r3, r0
 800fc38:	461a      	mov	r2, r3
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc40:	4413      	add	r3, r2
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7fb fc92 	bl	800b578 <pbuf_clen>
 800fc54:	4603      	mov	r3, r0
 800fc56:	461a      	mov	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc5e:	4413      	add	r3, r2
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	69fa      	ldr	r2, [r7, #28]
 800fc74:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d103      	bne.n	800fc86 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fc86:	2300      	movs	r3, #0
 800fc88:	e016      	b.n	800fcb8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fc8a:	bf00      	nop
 800fc8c:	e002      	b.n	800fc94 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fc8e:	bf00      	nop
 800fc90:	e000      	b.n	800fc94 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fc92:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d006      	beq.n	800fca8 <tcp_split_unsent_seg+0x25c>
 800fc9a:	4b09      	ldr	r3, [pc, #36]	; (800fcc0 <tcp_split_unsent_seg+0x274>)
 800fc9c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fca0:	490d      	ldr	r1, [pc, #52]	; (800fcd8 <tcp_split_unsent_seg+0x28c>)
 800fca2:	4809      	ldr	r0, [pc, #36]	; (800fcc8 <tcp_split_unsent_seg+0x27c>)
 800fca4:	f005 fe42 	bl	801592c <iprintf>
  if (p != NULL) {
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d002      	beq.n	800fcb4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fcae:	6938      	ldr	r0, [r7, #16]
 800fcb0:	f7fb fbd4 	bl	800b45c <pbuf_free>
  }

  return ERR_MEM;
 800fcb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3724      	adds	r7, #36	; 0x24
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd90      	pop	{r4, r7, pc}
 800fcc0:	08018550 	.word	0x08018550
 800fcc4:	080188e4 	.word	0x080188e4
 800fcc8:	080185a4 	.word	0x080185a4
 800fccc:	08018908 	.word	0x08018908
 800fcd0:	0801892c 	.word	0x0801892c
 800fcd4:	0801893c 	.word	0x0801893c
 800fcd8:	0801894c 	.word	0x0801894c

0800fcdc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fcdc:	b590      	push	{r4, r7, lr}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d106      	bne.n	800fcf8 <tcp_send_fin+0x1c>
 800fcea:	4b21      	ldr	r3, [pc, #132]	; (800fd70 <tcp_send_fin+0x94>)
 800fcec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fcf0:	4920      	ldr	r1, [pc, #128]	; (800fd74 <tcp_send_fin+0x98>)
 800fcf2:	4821      	ldr	r0, [pc, #132]	; (800fd78 <tcp_send_fin+0x9c>)
 800fcf4:	f005 fe1a 	bl	801592c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d02e      	beq.n	800fd5e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd04:	60fb      	str	r3, [r7, #12]
 800fd06:	e002      	b.n	800fd0e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1f8      	bne.n	800fd08 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	899b      	ldrh	r3, [r3, #12]
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7f9 ffaa 	bl	8009c78 <lwip_htons>
 800fd24:	4603      	mov	r3, r0
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	f003 0307 	and.w	r3, r3, #7
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d116      	bne.n	800fd5e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	899b      	ldrh	r3, [r3, #12]
 800fd36:	b29c      	uxth	r4, r3
 800fd38:	2001      	movs	r0, #1
 800fd3a:	f7f9 ff9d 	bl	8009c78 <lwip_htons>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	461a      	mov	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	4322      	orrs	r2, r4
 800fd48:	b292      	uxth	r2, r2
 800fd4a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	8b5b      	ldrh	r3, [r3, #26]
 800fd50:	f043 0320 	orr.w	r3, r3, #32
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	e004      	b.n	800fd68 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fd5e:	2101      	movs	r1, #1
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f80b 	bl	800fd7c <tcp_enqueue_flags>
 800fd66:	4603      	mov	r3, r0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd90      	pop	{r4, r7, pc}
 800fd70:	08018550 	.word	0x08018550
 800fd74:	08018958 	.word	0x08018958
 800fd78:	080185a4 	.word	0x080185a4

0800fd7c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b08a      	sub	sp, #40	; 0x28
 800fd80:	af02      	add	r7, sp, #8
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	460b      	mov	r3, r1
 800fd86:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fd90:	78fb      	ldrb	r3, [r7, #3]
 800fd92:	f003 0303 	and.w	r3, r3, #3
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d106      	bne.n	800fda8 <tcp_enqueue_flags+0x2c>
 800fd9a:	4b67      	ldr	r3, [pc, #412]	; (800ff38 <tcp_enqueue_flags+0x1bc>)
 800fd9c:	f240 4211 	movw	r2, #1041	; 0x411
 800fda0:	4966      	ldr	r1, [pc, #408]	; (800ff3c <tcp_enqueue_flags+0x1c0>)
 800fda2:	4867      	ldr	r0, [pc, #412]	; (800ff40 <tcp_enqueue_flags+0x1c4>)
 800fda4:	f005 fdc2 	bl	801592c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d106      	bne.n	800fdbc <tcp_enqueue_flags+0x40>
 800fdae:	4b62      	ldr	r3, [pc, #392]	; (800ff38 <tcp_enqueue_flags+0x1bc>)
 800fdb0:	f240 4213 	movw	r2, #1043	; 0x413
 800fdb4:	4963      	ldr	r1, [pc, #396]	; (800ff44 <tcp_enqueue_flags+0x1c8>)
 800fdb6:	4862      	ldr	r0, [pc, #392]	; (800ff40 <tcp_enqueue_flags+0x1c4>)
 800fdb8:	f005 fdb8 	bl	801592c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fdbc:	78fb      	ldrb	r3, [r7, #3]
 800fdbe:	f003 0302 	and.w	r3, r3, #2
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fdca:	7ffb      	ldrb	r3, [r7, #31]
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	f003 0304 	and.w	r3, r3, #4
 800fdd4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fdde:	4619      	mov	r1, r3
 800fde0:	2036      	movs	r0, #54	; 0x36
 800fde2:	f7fb f857 	bl	800ae94 <pbuf_alloc>
 800fde6:	6138      	str	r0, [r7, #16]
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d109      	bne.n	800fe02 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	8b5b      	ldrh	r3, [r3, #26]
 800fdf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fdfc:	f04f 33ff 	mov.w	r3, #4294967295
 800fe00:	e095      	b.n	800ff2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	895a      	ldrh	r2, [r3, #10]
 800fe06:	7dfb      	ldrb	r3, [r7, #23]
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d206      	bcs.n	800fe1c <tcp_enqueue_flags+0xa0>
 800fe0e:	4b4a      	ldr	r3, [pc, #296]	; (800ff38 <tcp_enqueue_flags+0x1bc>)
 800fe10:	f240 4239 	movw	r2, #1081	; 0x439
 800fe14:	494c      	ldr	r1, [pc, #304]	; (800ff48 <tcp_enqueue_flags+0x1cc>)
 800fe16:	484a      	ldr	r0, [pc, #296]	; (800ff40 <tcp_enqueue_flags+0x1c4>)
 800fe18:	f005 fd88 	bl	801592c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fe20:	78fa      	ldrb	r2, [r7, #3]
 800fe22:	7ffb      	ldrb	r3, [r7, #31]
 800fe24:	9300      	str	r3, [sp, #0]
 800fe26:	460b      	mov	r3, r1
 800fe28:	6939      	ldr	r1, [r7, #16]
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f7ff fd70 	bl	800f910 <tcp_create_segment>
 800fe30:	60f8      	str	r0, [r7, #12]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d109      	bne.n	800fe4c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	8b5b      	ldrh	r3, [r3, #26]
 800fe3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fe46:	f04f 33ff 	mov.w	r3, #4294967295
 800fe4a:	e070      	b.n	800ff2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	f003 0303 	and.w	r3, r3, #3
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d006      	beq.n	800fe66 <tcp_enqueue_flags+0xea>
 800fe58:	4b37      	ldr	r3, [pc, #220]	; (800ff38 <tcp_enqueue_flags+0x1bc>)
 800fe5a:	f240 4242 	movw	r2, #1090	; 0x442
 800fe5e:	493b      	ldr	r1, [pc, #236]	; (800ff4c <tcp_enqueue_flags+0x1d0>)
 800fe60:	4837      	ldr	r0, [pc, #220]	; (800ff40 <tcp_enqueue_flags+0x1c4>)
 800fe62:	f005 fd63 	bl	801592c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	891b      	ldrh	r3, [r3, #8]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d006      	beq.n	800fe7c <tcp_enqueue_flags+0x100>
 800fe6e:	4b32      	ldr	r3, [pc, #200]	; (800ff38 <tcp_enqueue_flags+0x1bc>)
 800fe70:	f240 4243 	movw	r2, #1091	; 0x443
 800fe74:	4936      	ldr	r1, [pc, #216]	; (800ff50 <tcp_enqueue_flags+0x1d4>)
 800fe76:	4832      	ldr	r0, [pc, #200]	; (800ff40 <tcp_enqueue_flags+0x1c4>)
 800fe78:	f005 fd58 	bl	801592c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d103      	bne.n	800fe8c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	68fa      	ldr	r2, [r7, #12]
 800fe88:	66da      	str	r2, [r3, #108]	; 0x6c
 800fe8a:	e00d      	b.n	800fea8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe90:	61bb      	str	r3, [r7, #24]
 800fe92:	e002      	b.n	800fe9a <tcp_enqueue_flags+0x11e>
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	61bb      	str	r3, [r7, #24]
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d1f8      	bne.n	800fe94 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fea2:	69bb      	ldr	r3, [r7, #24]
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800feb0:	78fb      	ldrb	r3, [r7, #3]
 800feb2:	f003 0302 	and.w	r3, r3, #2
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d104      	bne.n	800fec4 <tcp_enqueue_flags+0x148>
 800feba:	78fb      	ldrb	r3, [r7, #3]
 800febc:	f003 0301 	and.w	r3, r3, #1
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d004      	beq.n	800fece <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fec8:	1c5a      	adds	r2, r3, #1
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fece:	78fb      	ldrb	r3, [r7, #3]
 800fed0:	f003 0301 	and.w	r3, r3, #1
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d006      	beq.n	800fee6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	8b5b      	ldrh	r3, [r3, #26]
 800fedc:	f043 0320 	orr.w	r3, r3, #32
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	4618      	mov	r0, r3
 800feec:	f7fb fb44 	bl	800b578 <pbuf_clen>
 800fef0:	4603      	mov	r3, r0
 800fef2:	461a      	mov	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fefa:	4413      	add	r3, r2
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00e      	beq.n	800ff2c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10a      	bne.n	800ff2c <tcp_enqueue_flags+0x1b0>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <tcp_enqueue_flags+0x1b0>
 800ff1e:	4b06      	ldr	r3, [pc, #24]	; (800ff38 <tcp_enqueue_flags+0x1bc>)
 800ff20:	f240 4265 	movw	r2, #1125	; 0x465
 800ff24:	490b      	ldr	r1, [pc, #44]	; (800ff54 <tcp_enqueue_flags+0x1d8>)
 800ff26:	4806      	ldr	r0, [pc, #24]	; (800ff40 <tcp_enqueue_flags+0x1c4>)
 800ff28:	f005 fd00 	bl	801592c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ff2c:	2300      	movs	r3, #0
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3720      	adds	r7, #32
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	08018550 	.word	0x08018550
 800ff3c:	08018974 	.word	0x08018974
 800ff40:	080185a4 	.word	0x080185a4
 800ff44:	080189cc 	.word	0x080189cc
 800ff48:	080189ec 	.word	0x080189ec
 800ff4c:	08018a28 	.word	0x08018a28
 800ff50:	08018a40 	.word	0x08018a40
 800ff54:	08018a6c 	.word	0x08018a6c

0800ff58 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ff58:	b5b0      	push	{r4, r5, r7, lr}
 800ff5a:	b08a      	sub	sp, #40	; 0x28
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d106      	bne.n	800ff74 <tcp_output+0x1c>
 800ff66:	4b8a      	ldr	r3, [pc, #552]	; (8010190 <tcp_output+0x238>)
 800ff68:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ff6c:	4989      	ldr	r1, [pc, #548]	; (8010194 <tcp_output+0x23c>)
 800ff6e:	488a      	ldr	r0, [pc, #552]	; (8010198 <tcp_output+0x240>)
 800ff70:	f005 fcdc 	bl	801592c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	7d1b      	ldrb	r3, [r3, #20]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d106      	bne.n	800ff8a <tcp_output+0x32>
 800ff7c:	4b84      	ldr	r3, [pc, #528]	; (8010190 <tcp_output+0x238>)
 800ff7e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ff82:	4986      	ldr	r1, [pc, #536]	; (801019c <tcp_output+0x244>)
 800ff84:	4884      	ldr	r0, [pc, #528]	; (8010198 <tcp_output+0x240>)
 800ff86:	f005 fcd1 	bl	801592c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ff8a:	4b85      	ldr	r3, [pc, #532]	; (80101a0 <tcp_output+0x248>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d101      	bne.n	800ff98 <tcp_output+0x40>
    return ERR_OK;
 800ff94:	2300      	movs	r3, #0
 800ff96:	e1ce      	b.n	8010336 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	bf28      	it	cs
 800ffa8:	4613      	movcs	r3, r2
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d10b      	bne.n	800ffd2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	8b5b      	ldrh	r3, [r3, #26]
 800ffbe:	f003 0302 	and.w	r3, r3, #2
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f000 81aa 	beq.w	801031c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 fdcb 	bl	8010b64 <tcp_send_empty_ack>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	e1b1      	b.n	8010336 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ffd2:	6879      	ldr	r1, [r7, #4]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	3304      	adds	r3, #4
 800ffd8:	461a      	mov	r2, r3
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7ff fc7c 	bl	800f8d8 <tcp_route>
 800ffe0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d102      	bne.n	800ffee <tcp_output+0x96>
    return ERR_RTE;
 800ffe8:	f06f 0303 	mvn.w	r3, #3
 800ffec:	e1a3      	b.n	8010336 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d003      	beq.n	800fffc <tcp_output+0xa4>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d111      	bne.n	8010020 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d002      	beq.n	8010008 <tcp_output+0xb0>
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	3304      	adds	r3, #4
 8010006:	e000      	b.n	801000a <tcp_output+0xb2>
 8010008:	2300      	movs	r3, #0
 801000a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d102      	bne.n	8010018 <tcp_output+0xc0>
      return ERR_RTE;
 8010012:	f06f 0303 	mvn.w	r3, #3
 8010016:	e18e      	b.n	8010336 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	4618      	mov	r0, r3
 8010028:	f7f9 fe3b 	bl	8009ca2 <lwip_htonl>
 801002c:	4602      	mov	r2, r0
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010036:	8912      	ldrh	r2, [r2, #8]
 8010038:	4413      	add	r3, r2
 801003a:	69ba      	ldr	r2, [r7, #24]
 801003c:	429a      	cmp	r2, r3
 801003e:	d227      	bcs.n	8010090 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010046:	461a      	mov	r2, r3
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	4293      	cmp	r3, r2
 801004c:	d114      	bne.n	8010078 <tcp_output+0x120>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010052:	2b00      	cmp	r3, #0
 8010054:	d110      	bne.n	8010078 <tcp_output+0x120>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801005c:	2b00      	cmp	r3, #0
 801005e:	d10b      	bne.n	8010078 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	8b5b      	ldrh	r3, [r3, #26]
 801007c:	f003 0302 	and.w	r3, r3, #2
 8010080:	2b00      	cmp	r3, #0
 8010082:	f000 814d 	beq.w	8010320 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 fd6c 	bl	8010b64 <tcp_send_empty_ack>
 801008c:	4603      	mov	r3, r0
 801008e:	e152      	b.n	8010336 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801009c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801009e:	6a3b      	ldr	r3, [r7, #32]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	f000 811c 	beq.w	80102de <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80100a6:	e002      	b.n	80100ae <tcp_output+0x156>
 80100a8:	6a3b      	ldr	r3, [r7, #32]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	623b      	str	r3, [r7, #32]
 80100ae:	6a3b      	ldr	r3, [r7, #32]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d1f8      	bne.n	80100a8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80100b6:	e112      	b.n	80102de <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80100b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	899b      	ldrh	r3, [r3, #12]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7f9 fdd9 	bl	8009c78 <lwip_htons>
 80100c6:	4603      	mov	r3, r0
 80100c8:	b2db      	uxtb	r3, r3
 80100ca:	f003 0304 	and.w	r3, r3, #4
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d006      	beq.n	80100e0 <tcp_output+0x188>
 80100d2:	4b2f      	ldr	r3, [pc, #188]	; (8010190 <tcp_output+0x238>)
 80100d4:	f240 5236 	movw	r2, #1334	; 0x536
 80100d8:	4932      	ldr	r1, [pc, #200]	; (80101a4 <tcp_output+0x24c>)
 80100da:	482f      	ldr	r0, [pc, #188]	; (8010198 <tcp_output+0x240>)
 80100dc:	f005 fc26 	bl	801592c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d01f      	beq.n	8010128 <tcp_output+0x1d0>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	8b5b      	ldrh	r3, [r3, #26]
 80100ec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d119      	bne.n	8010128 <tcp_output+0x1d0>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00b      	beq.n	8010114 <tcp_output+0x1bc>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d110      	bne.n	8010128 <tcp_output+0x1d0>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801010a:	891a      	ldrh	r2, [r3, #8]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010110:	429a      	cmp	r2, r3
 8010112:	d209      	bcs.n	8010128 <tcp_output+0x1d0>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801011a:	2b00      	cmp	r3, #0
 801011c:	d004      	beq.n	8010128 <tcp_output+0x1d0>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010124:	2b08      	cmp	r3, #8
 8010126:	d901      	bls.n	801012c <tcp_output+0x1d4>
 8010128:	2301      	movs	r3, #1
 801012a:	e000      	b.n	801012e <tcp_output+0x1d6>
 801012c:	2300      	movs	r3, #0
 801012e:	2b00      	cmp	r3, #0
 8010130:	d106      	bne.n	8010140 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	8b5b      	ldrh	r3, [r3, #26]
 8010136:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801013a:	2b00      	cmp	r3, #0
 801013c:	f000 80e4 	beq.w	8010308 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	7d1b      	ldrb	r3, [r3, #20]
 8010144:	2b02      	cmp	r3, #2
 8010146:	d00d      	beq.n	8010164 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	899b      	ldrh	r3, [r3, #12]
 801014e:	b29c      	uxth	r4, r3
 8010150:	2010      	movs	r0, #16
 8010152:	f7f9 fd91 	bl	8009c78 <lwip_htons>
 8010156:	4603      	mov	r3, r0
 8010158:	461a      	mov	r2, r3
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	4322      	orrs	r2, r4
 8010160:	b292      	uxth	r2, r2
 8010162:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010164:	697a      	ldr	r2, [r7, #20]
 8010166:	6879      	ldr	r1, [r7, #4]
 8010168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801016a:	f000 f909 	bl	8010380 <tcp_output_segment>
 801016e:	4603      	mov	r3, r0
 8010170:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d016      	beq.n	80101a8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	8b5b      	ldrh	r3, [r3, #26]
 801017e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010182:	b29a      	uxth	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	835a      	strh	r2, [r3, #26]
      return err;
 8010188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801018c:	e0d3      	b.n	8010336 <tcp_output+0x3de>
 801018e:	bf00      	nop
 8010190:	08018550 	.word	0x08018550
 8010194:	08018a94 	.word	0x08018a94
 8010198:	080185a4 	.word	0x080185a4
 801019c:	08018aac 	.word	0x08018aac
 80101a0:	2002e694 	.word	0x2002e694
 80101a4:	08018ad4 	.word	0x08018ad4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	7d1b      	ldrb	r3, [r3, #20]
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d006      	beq.n	80101c6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	8b5b      	ldrh	r3, [r3, #26]
 80101bc:	f023 0303 	bic.w	r3, r3, #3
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80101c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c8:	68db      	ldr	r3, [r3, #12]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7f9 fd68 	bl	8009ca2 <lwip_htonl>
 80101d2:	4604      	mov	r4, r0
 80101d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d6:	891b      	ldrh	r3, [r3, #8]
 80101d8:	461d      	mov	r5, r3
 80101da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	899b      	ldrh	r3, [r3, #12]
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7f9 fd48 	bl	8009c78 <lwip_htons>
 80101e8:	4603      	mov	r3, r0
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	f003 0303 	and.w	r3, r3, #3
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d001      	beq.n	80101f8 <tcp_output+0x2a0>
 80101f4:	2301      	movs	r3, #1
 80101f6:	e000      	b.n	80101fa <tcp_output+0x2a2>
 80101f8:	2300      	movs	r3, #0
 80101fa:	442b      	add	r3, r5
 80101fc:	4423      	add	r3, r4
 80101fe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	1ad3      	subs	r3, r2, r3
 8010208:	2b00      	cmp	r3, #0
 801020a:	da02      	bge.n	8010212 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010214:	891b      	ldrh	r3, [r3, #8]
 8010216:	461c      	mov	r4, r3
 8010218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	899b      	ldrh	r3, [r3, #12]
 801021e:	b29b      	uxth	r3, r3
 8010220:	4618      	mov	r0, r3
 8010222:	f7f9 fd29 	bl	8009c78 <lwip_htons>
 8010226:	4603      	mov	r3, r0
 8010228:	b2db      	uxtb	r3, r3
 801022a:	f003 0303 	and.w	r3, r3, #3
 801022e:	2b00      	cmp	r3, #0
 8010230:	d001      	beq.n	8010236 <tcp_output+0x2de>
 8010232:	2301      	movs	r3, #1
 8010234:	e000      	b.n	8010238 <tcp_output+0x2e0>
 8010236:	2300      	movs	r3, #0
 8010238:	4423      	add	r3, r4
 801023a:	2b00      	cmp	r3, #0
 801023c:	d049      	beq.n	80102d2 <tcp_output+0x37a>
      seg->next = NULL;
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	2200      	movs	r2, #0
 8010242:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010248:	2b00      	cmp	r3, #0
 801024a:	d105      	bne.n	8010258 <tcp_output+0x300>
        pcb->unacked = seg;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010250:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010254:	623b      	str	r3, [r7, #32]
 8010256:	e03f      	b.n	80102d8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	4618      	mov	r0, r3
 8010260:	f7f9 fd1f 	bl	8009ca2 <lwip_htonl>
 8010264:	4604      	mov	r4, r0
 8010266:	6a3b      	ldr	r3, [r7, #32]
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	4618      	mov	r0, r3
 801026e:	f7f9 fd18 	bl	8009ca2 <lwip_htonl>
 8010272:	4603      	mov	r3, r0
 8010274:	1ae3      	subs	r3, r4, r3
 8010276:	2b00      	cmp	r3, #0
 8010278:	da24      	bge.n	80102c4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	3370      	adds	r3, #112	; 0x70
 801027e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010280:	e002      	b.n	8010288 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d011      	beq.n	80102b4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	4618      	mov	r0, r3
 801029a:	f7f9 fd02 	bl	8009ca2 <lwip_htonl>
 801029e:	4604      	mov	r4, r0
 80102a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7f9 fcfb 	bl	8009ca2 <lwip_htonl>
 80102ac:	4603      	mov	r3, r0
 80102ae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	dbe6      	blt.n	8010282 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c0:	601a      	str	r2, [r3, #0]
 80102c2:	e009      	b.n	80102d8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80102c4:	6a3b      	ldr	r3, [r7, #32]
 80102c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	623b      	str	r3, [r7, #32]
 80102d0:	e002      	b.n	80102d8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80102d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102d4:	f7fc fc3f 	bl	800cb56 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80102de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d012      	beq.n	801030a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7f9 fcd9 	bl	8009ca2 <lwip_htonl>
 80102f0:	4602      	mov	r2, r0
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f6:	1ad3      	subs	r3, r2, r3
 80102f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102fa:	8912      	ldrh	r2, [r2, #8]
 80102fc:	4413      	add	r3, r2
  while (seg != NULL &&
 80102fe:	69ba      	ldr	r2, [r7, #24]
 8010300:	429a      	cmp	r2, r3
 8010302:	f4bf aed9 	bcs.w	80100b8 <tcp_output+0x160>
 8010306:	e000      	b.n	801030a <tcp_output+0x3b2>
      break;
 8010308:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801030e:	2b00      	cmp	r3, #0
 8010310:	d108      	bne.n	8010324 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801031a:	e004      	b.n	8010326 <tcp_output+0x3ce>
    goto output_done;
 801031c:	bf00      	nop
 801031e:	e002      	b.n	8010326 <tcp_output+0x3ce>
    goto output_done;
 8010320:	bf00      	nop
 8010322:	e000      	b.n	8010326 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010324:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	8b5b      	ldrh	r3, [r3, #26]
 801032a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801032e:	b29a      	uxth	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010334:	2300      	movs	r3, #0
}
 8010336:	4618      	mov	r0, r3
 8010338:	3728      	adds	r7, #40	; 0x28
 801033a:	46bd      	mov	sp, r7
 801033c:	bdb0      	pop	{r4, r5, r7, pc}
 801033e:	bf00      	nop

08010340 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <tcp_output_segment_busy+0x1c>
 801034e:	4b09      	ldr	r3, [pc, #36]	; (8010374 <tcp_output_segment_busy+0x34>)
 8010350:	f240 529a 	movw	r2, #1434	; 0x59a
 8010354:	4908      	ldr	r1, [pc, #32]	; (8010378 <tcp_output_segment_busy+0x38>)
 8010356:	4809      	ldr	r0, [pc, #36]	; (801037c <tcp_output_segment_busy+0x3c>)
 8010358:	f005 fae8 	bl	801592c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	7b9b      	ldrb	r3, [r3, #14]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d001      	beq.n	801036a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010366:	2301      	movs	r3, #1
 8010368:	e000      	b.n	801036c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	08018550 	.word	0x08018550
 8010378:	08018aec 	.word	0x08018aec
 801037c:	080185a4 	.word	0x080185a4

08010380 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010380:	b5b0      	push	{r4, r5, r7, lr}
 8010382:	b08c      	sub	sp, #48	; 0x30
 8010384:	af04      	add	r7, sp, #16
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d106      	bne.n	80103a0 <tcp_output_segment+0x20>
 8010392:	4b63      	ldr	r3, [pc, #396]	; (8010520 <tcp_output_segment+0x1a0>)
 8010394:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010398:	4962      	ldr	r1, [pc, #392]	; (8010524 <tcp_output_segment+0x1a4>)
 801039a:	4863      	ldr	r0, [pc, #396]	; (8010528 <tcp_output_segment+0x1a8>)
 801039c:	f005 fac6 	bl	801592c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d106      	bne.n	80103b4 <tcp_output_segment+0x34>
 80103a6:	4b5e      	ldr	r3, [pc, #376]	; (8010520 <tcp_output_segment+0x1a0>)
 80103a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80103ac:	495f      	ldr	r1, [pc, #380]	; (801052c <tcp_output_segment+0x1ac>)
 80103ae:	485e      	ldr	r0, [pc, #376]	; (8010528 <tcp_output_segment+0x1a8>)
 80103b0:	f005 fabc 	bl	801592c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d106      	bne.n	80103c8 <tcp_output_segment+0x48>
 80103ba:	4b59      	ldr	r3, [pc, #356]	; (8010520 <tcp_output_segment+0x1a0>)
 80103bc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80103c0:	495b      	ldr	r1, [pc, #364]	; (8010530 <tcp_output_segment+0x1b0>)
 80103c2:	4859      	ldr	r0, [pc, #356]	; (8010528 <tcp_output_segment+0x1a8>)
 80103c4:	f005 fab2 	bl	801592c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f7ff ffb9 	bl	8010340 <tcp_output_segment_busy>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d001      	beq.n	80103d8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80103d4:	2300      	movs	r3, #0
 80103d6:	e09f      	b.n	8010518 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	68dc      	ldr	r4, [r3, #12]
 80103e0:	4610      	mov	r0, r2
 80103e2:	f7f9 fc5e 	bl	8009ca2 <lwip_htonl>
 80103e6:	4603      	mov	r3, r0
 80103e8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	68dc      	ldr	r4, [r3, #12]
 80103f2:	4610      	mov	r0, r2
 80103f4:	f7f9 fc40 	bl	8009c78 <lwip_htons>
 80103f8:	4603      	mov	r3, r0
 80103fa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010400:	68ba      	ldr	r2, [r7, #8]
 8010402:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010404:	441a      	add	r2, r3
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	3314      	adds	r3, #20
 8010410:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	7a9b      	ldrb	r3, [r3, #10]
 8010416:	f003 0301 	and.w	r3, r3, #1
 801041a:	2b00      	cmp	r3, #0
 801041c:	d015      	beq.n	801044a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	3304      	adds	r3, #4
 8010422:	461a      	mov	r2, r3
 8010424:	6879      	ldr	r1, [r7, #4]
 8010426:	f44f 7006 	mov.w	r0, #536	; 0x218
 801042a:	f7fc fe8b 	bl	800d144 <tcp_eff_send_mss_netif>
 801042e:	4603      	mov	r3, r0
 8010430:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010432:	8b7b      	ldrh	r3, [r7, #26]
 8010434:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010438:	4618      	mov	r0, r3
 801043a:	f7f9 fc32 	bl	8009ca2 <lwip_htonl>
 801043e:	4602      	mov	r2, r0
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	3304      	adds	r3, #4
 8010448:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010450:	2b00      	cmp	r3, #0
 8010452:	da02      	bge.n	801045a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	2200      	movs	r2, #0
 8010458:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801045e:	2b00      	cmp	r3, #0
 8010460:	d10c      	bne.n	801047c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010462:	4b34      	ldr	r3, [pc, #208]	; (8010534 <tcp_output_segment+0x1b4>)
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	4618      	mov	r0, r3
 8010472:	f7f9 fc16 	bl	8009ca2 <lwip_htonl>
 8010476:	4602      	mov	r2, r0
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	68da      	ldr	r2, [r3, #12]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	1ad3      	subs	r3, r2, r3
 8010488:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	8959      	ldrh	r1, [r3, #10]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	8b3a      	ldrh	r2, [r7, #24]
 8010496:	1a8a      	subs	r2, r1, r2
 8010498:	b292      	uxth	r2, r2
 801049a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	8919      	ldrh	r1, [r3, #8]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	8b3a      	ldrh	r2, [r7, #24]
 80104a8:	1a8a      	subs	r2, r1, r2
 80104aa:	b292      	uxth	r2, r2
 80104ac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	68d2      	ldr	r2, [r2, #12]
 80104b6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	2200      	movs	r2, #0
 80104be:	741a      	strb	r2, [r3, #16]
 80104c0:	2200      	movs	r2, #0
 80104c2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	f103 0214 	add.w	r2, r3, #20
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	7a9b      	ldrb	r3, [r3, #10]
 80104d0:	009b      	lsls	r3, r3, #2
 80104d2:	f003 0304 	and.w	r3, r3, #4
 80104d6:	4413      	add	r3, r2
 80104d8:	69fa      	ldr	r2, [r7, #28]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d006      	beq.n	80104ec <tcp_output_segment+0x16c>
 80104de:	4b10      	ldr	r3, [pc, #64]	; (8010520 <tcp_output_segment+0x1a0>)
 80104e0:	f240 621c 	movw	r2, #1564	; 0x61c
 80104e4:	4914      	ldr	r1, [pc, #80]	; (8010538 <tcp_output_segment+0x1b8>)
 80104e6:	4810      	ldr	r0, [pc, #64]	; (8010528 <tcp_output_segment+0x1a8>)
 80104e8:	f005 fa20 	bl	801592c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6858      	ldr	r0, [r3, #4]
 80104f0:	68b9      	ldr	r1, [r7, #8]
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	1d1c      	adds	r4, r3, #4
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	7add      	ldrb	r5, [r3, #11]
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	7a9b      	ldrb	r3, [r3, #10]
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	9202      	str	r2, [sp, #8]
 8010502:	2206      	movs	r2, #6
 8010504:	9201      	str	r2, [sp, #4]
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	462b      	mov	r3, r5
 801050a:	4622      	mov	r2, r4
 801050c:	f002 fd9c 	bl	8013048 <ip4_output_if>
 8010510:	4603      	mov	r3, r0
 8010512:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010518:	4618      	mov	r0, r3
 801051a:	3720      	adds	r7, #32
 801051c:	46bd      	mov	sp, r7
 801051e:	bdb0      	pop	{r4, r5, r7, pc}
 8010520:	08018550 	.word	0x08018550
 8010524:	08018b14 	.word	0x08018b14
 8010528:	080185a4 	.word	0x080185a4
 801052c:	08018b34 	.word	0x08018b34
 8010530:	08018b54 	.word	0x08018b54
 8010534:	2002e648 	.word	0x2002e648
 8010538:	08018b78 	.word	0x08018b78

0801053c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801053c:	b5b0      	push	{r4, r5, r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d106      	bne.n	8010558 <tcp_rexmit_rto_prepare+0x1c>
 801054a:	4b31      	ldr	r3, [pc, #196]	; (8010610 <tcp_rexmit_rto_prepare+0xd4>)
 801054c:	f240 6263 	movw	r2, #1635	; 0x663
 8010550:	4930      	ldr	r1, [pc, #192]	; (8010614 <tcp_rexmit_rto_prepare+0xd8>)
 8010552:	4831      	ldr	r0, [pc, #196]	; (8010618 <tcp_rexmit_rto_prepare+0xdc>)
 8010554:	f005 f9ea 	bl	801592c <iprintf>

  if (pcb->unacked == NULL) {
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801055c:	2b00      	cmp	r3, #0
 801055e:	d102      	bne.n	8010566 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010560:	f06f 0305 	mvn.w	r3, #5
 8010564:	e050      	b.n	8010608 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801056a:	60fb      	str	r3, [r7, #12]
 801056c:	e00b      	b.n	8010586 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	f7ff fee6 	bl	8010340 <tcp_output_segment_busy>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d002      	beq.n	8010580 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801057a:	f06f 0305 	mvn.w	r3, #5
 801057e:	e043      	b.n	8010608 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	60fb      	str	r3, [r7, #12]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1ef      	bne.n	801056e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f7ff fed6 	bl	8010340 <tcp_output_segment_busy>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d002      	beq.n	80105a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801059a:	f06f 0305 	mvn.w	r3, #5
 801059e:	e033      	b.n	8010608 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	8b5b      	ldrh	r3, [r3, #26]
 80105ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80105be:	b29a      	uxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7f9 fb69 	bl	8009ca2 <lwip_htonl>
 80105d0:	4604      	mov	r4, r0
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	891b      	ldrh	r3, [r3, #8]
 80105d6:	461d      	mov	r5, r3
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	899b      	ldrh	r3, [r3, #12]
 80105de:	b29b      	uxth	r3, r3
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7f9 fb49 	bl	8009c78 <lwip_htons>
 80105e6:	4603      	mov	r3, r0
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	f003 0303 	and.w	r3, r3, #3
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d001      	beq.n	80105f6 <tcp_rexmit_rto_prepare+0xba>
 80105f2:	2301      	movs	r3, #1
 80105f4:	e000      	b.n	80105f8 <tcp_rexmit_rto_prepare+0xbc>
 80105f6:	2300      	movs	r3, #0
 80105f8:	442b      	add	r3, r5
 80105fa:	18e2      	adds	r2, r4, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010606:	2300      	movs	r3, #0
}
 8010608:	4618      	mov	r0, r3
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bdb0      	pop	{r4, r5, r7, pc}
 8010610:	08018550 	.word	0x08018550
 8010614:	08018b8c 	.word	0x08018b8c
 8010618:	080185a4 	.word	0x080185a4

0801061c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d106      	bne.n	8010638 <tcp_rexmit_rto_commit+0x1c>
 801062a:	4b0d      	ldr	r3, [pc, #52]	; (8010660 <tcp_rexmit_rto_commit+0x44>)
 801062c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010630:	490c      	ldr	r1, [pc, #48]	; (8010664 <tcp_rexmit_rto_commit+0x48>)
 8010632:	480d      	ldr	r0, [pc, #52]	; (8010668 <tcp_rexmit_rto_commit+0x4c>)
 8010634:	f005 f97a 	bl	801592c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801063e:	2bff      	cmp	r3, #255	; 0xff
 8010640:	d007      	beq.n	8010652 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010648:	3301      	adds	r3, #1
 801064a:	b2da      	uxtb	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7ff fc80 	bl	800ff58 <tcp_output>
}
 8010658:	bf00      	nop
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	08018550 	.word	0x08018550
 8010664:	08018bb0 	.word	0x08018bb0
 8010668:	080185a4 	.word	0x080185a4

0801066c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d106      	bne.n	8010688 <tcp_rexmit_rto+0x1c>
 801067a:	4b0a      	ldr	r3, [pc, #40]	; (80106a4 <tcp_rexmit_rto+0x38>)
 801067c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010680:	4909      	ldr	r1, [pc, #36]	; (80106a8 <tcp_rexmit_rto+0x3c>)
 8010682:	480a      	ldr	r0, [pc, #40]	; (80106ac <tcp_rexmit_rto+0x40>)
 8010684:	f005 f952 	bl	801592c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7ff ff57 	bl	801053c <tcp_rexmit_rto_prepare>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d102      	bne.n	801069a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f7ff ffc1 	bl	801061c <tcp_rexmit_rto_commit>
  }
}
 801069a:	bf00      	nop
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	08018550 	.word	0x08018550
 80106a8:	08018bd4 	.word	0x08018bd4
 80106ac:	080185a4 	.word	0x080185a4

080106b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80106b0:	b590      	push	{r4, r7, lr}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d106      	bne.n	80106cc <tcp_rexmit+0x1c>
 80106be:	4b2f      	ldr	r3, [pc, #188]	; (801077c <tcp_rexmit+0xcc>)
 80106c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80106c4:	492e      	ldr	r1, [pc, #184]	; (8010780 <tcp_rexmit+0xd0>)
 80106c6:	482f      	ldr	r0, [pc, #188]	; (8010784 <tcp_rexmit+0xd4>)
 80106c8:	f005 f930 	bl	801592c <iprintf>

  if (pcb->unacked == NULL) {
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d102      	bne.n	80106da <tcp_rexmit+0x2a>
    return ERR_VAL;
 80106d4:	f06f 0305 	mvn.w	r3, #5
 80106d8:	e04c      	b.n	8010774 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80106e0:	68b8      	ldr	r0, [r7, #8]
 80106e2:	f7ff fe2d 	bl	8010340 <tcp_output_segment_busy>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d002      	beq.n	80106f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80106ec:	f06f 0305 	mvn.w	r3, #5
 80106f0:	e040      	b.n	8010774 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	681a      	ldr	r2, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	336c      	adds	r3, #108	; 0x6c
 80106fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010700:	e002      	b.n	8010708 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d011      	beq.n	8010734 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	4618      	mov	r0, r3
 801071a:	f7f9 fac2 	bl	8009ca2 <lwip_htonl>
 801071e:	4604      	mov	r4, r0
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	f7f9 fabb 	bl	8009ca2 <lwip_htonl>
 801072c:	4603      	mov	r3, r0
 801072e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010730:	2b00      	cmp	r3, #0
 8010732:	dbe6      	blt.n	8010702 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d103      	bne.n	8010752 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010758:	2bff      	cmp	r3, #255	; 0xff
 801075a:	d007      	beq.n	801076c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010762:	3301      	adds	r3, #1
 8010764:	b2da      	uxtb	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2200      	movs	r2, #0
 8010770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010772:	2300      	movs	r3, #0
}
 8010774:	4618      	mov	r0, r3
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	bd90      	pop	{r4, r7, pc}
 801077c:	08018550 	.word	0x08018550
 8010780:	08018bf0 	.word	0x08018bf0
 8010784:	080185a4 	.word	0x080185a4

08010788 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d106      	bne.n	80107a4 <tcp_rexmit_fast+0x1c>
 8010796:	4b2a      	ldr	r3, [pc, #168]	; (8010840 <tcp_rexmit_fast+0xb8>)
 8010798:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801079c:	4929      	ldr	r1, [pc, #164]	; (8010844 <tcp_rexmit_fast+0xbc>)
 801079e:	482a      	ldr	r0, [pc, #168]	; (8010848 <tcp_rexmit_fast+0xc0>)
 80107a0:	f005 f8c4 	bl	801592c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d045      	beq.n	8010838 <tcp_rexmit_fast+0xb0>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	8b5b      	ldrh	r3, [r3, #26]
 80107b0:	f003 0304 	and.w	r3, r3, #4
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d13f      	bne.n	8010838 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f7ff ff79 	bl	80106b0 <tcp_rexmit>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d139      	bne.n	8010838 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80107d0:	4293      	cmp	r3, r2
 80107d2:	bf28      	it	cs
 80107d4:	4613      	movcs	r3, r2
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	2b00      	cmp	r3, #0
 80107da:	da00      	bge.n	80107de <tcp_rexmit_fast+0x56>
 80107dc:	3301      	adds	r3, #1
 80107de:	105b      	asrs	r3, r3, #1
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80107ee:	461a      	mov	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107f4:	005b      	lsls	r3, r3, #1
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d206      	bcs.n	8010808 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107fe:	005b      	lsls	r3, r3, #1
 8010800:	b29a      	uxth	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010812:	4619      	mov	r1, r3
 8010814:	0049      	lsls	r1, r1, #1
 8010816:	440b      	add	r3, r1
 8010818:	b29b      	uxth	r3, r3
 801081a:	4413      	add	r3, r2
 801081c:	b29a      	uxth	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	8b5b      	ldrh	r3, [r3, #26]
 8010828:	f043 0304 	orr.w	r3, r3, #4
 801082c:	b29a      	uxth	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2200      	movs	r2, #0
 8010836:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010838:	bf00      	nop
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	08018550 	.word	0x08018550
 8010844:	08018c08 	.word	0x08018c08
 8010848:	080185a4 	.word	0x080185a4

0801084c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	607b      	str	r3, [r7, #4]
 8010856:	460b      	mov	r3, r1
 8010858:	817b      	strh	r3, [r7, #10]
 801085a:	4613      	mov	r3, r2
 801085c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801085e:	897a      	ldrh	r2, [r7, #10]
 8010860:	893b      	ldrh	r3, [r7, #8]
 8010862:	4413      	add	r3, r2
 8010864:	b29b      	uxth	r3, r3
 8010866:	3314      	adds	r3, #20
 8010868:	b29b      	uxth	r3, r3
 801086a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801086e:	4619      	mov	r1, r3
 8010870:	2022      	movs	r0, #34	; 0x22
 8010872:	f7fa fb0f 	bl	800ae94 <pbuf_alloc>
 8010876:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d04d      	beq.n	801091a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801087e:	897b      	ldrh	r3, [r7, #10]
 8010880:	3313      	adds	r3, #19
 8010882:	697a      	ldr	r2, [r7, #20]
 8010884:	8952      	ldrh	r2, [r2, #10]
 8010886:	4293      	cmp	r3, r2
 8010888:	db06      	blt.n	8010898 <tcp_output_alloc_header_common+0x4c>
 801088a:	4b26      	ldr	r3, [pc, #152]	; (8010924 <tcp_output_alloc_header_common+0xd8>)
 801088c:	f240 7223 	movw	r2, #1827	; 0x723
 8010890:	4925      	ldr	r1, [pc, #148]	; (8010928 <tcp_output_alloc_header_common+0xdc>)
 8010892:	4826      	ldr	r0, [pc, #152]	; (801092c <tcp_output_alloc_header_common+0xe0>)
 8010894:	f005 f84a 	bl	801592c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801089e:	8c3b      	ldrh	r3, [r7, #32]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7f9 f9e9 	bl	8009c78 <lwip_htons>
 80108a6:	4603      	mov	r3, r0
 80108a8:	461a      	mov	r2, r3
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80108ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7f9 f9e1 	bl	8009c78 <lwip_htons>
 80108b6:	4603      	mov	r3, r0
 80108b8:	461a      	mov	r2, r3
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80108c4:	68f8      	ldr	r0, [r7, #12]
 80108c6:	f7f9 f9ec 	bl	8009ca2 <lwip_htonl>
 80108ca:	4602      	mov	r2, r0
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80108d0:	897b      	ldrh	r3, [r7, #10]
 80108d2:	089b      	lsrs	r3, r3, #2
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	3305      	adds	r3, #5
 80108d8:	b29b      	uxth	r3, r3
 80108da:	031b      	lsls	r3, r3, #12
 80108dc:	b29a      	uxth	r2, r3
 80108de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	4313      	orrs	r3, r2
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7f9 f9c5 	bl	8009c78 <lwip_htons>
 80108ee:	4603      	mov	r3, r0
 80108f0:	461a      	mov	r2, r3
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80108f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7f9 f9bd 	bl	8009c78 <lwip_htons>
 80108fe:	4603      	mov	r3, r0
 8010900:	461a      	mov	r2, r3
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	2200      	movs	r2, #0
 801090a:	741a      	strb	r2, [r3, #16]
 801090c:	2200      	movs	r2, #0
 801090e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	2200      	movs	r2, #0
 8010914:	749a      	strb	r2, [r3, #18]
 8010916:	2200      	movs	r2, #0
 8010918:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801091a:	697b      	ldr	r3, [r7, #20]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	08018550 	.word	0x08018550
 8010928:	08018c28 	.word	0x08018c28
 801092c:	080185a4 	.word	0x080185a4

08010930 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010930:	b5b0      	push	{r4, r5, r7, lr}
 8010932:	b08a      	sub	sp, #40	; 0x28
 8010934:	af04      	add	r7, sp, #16
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	607b      	str	r3, [r7, #4]
 801093a:	460b      	mov	r3, r1
 801093c:	817b      	strh	r3, [r7, #10]
 801093e:	4613      	mov	r3, r2
 8010940:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d106      	bne.n	8010956 <tcp_output_alloc_header+0x26>
 8010948:	4b15      	ldr	r3, [pc, #84]	; (80109a0 <tcp_output_alloc_header+0x70>)
 801094a:	f240 7242 	movw	r2, #1858	; 0x742
 801094e:	4915      	ldr	r1, [pc, #84]	; (80109a4 <tcp_output_alloc_header+0x74>)
 8010950:	4815      	ldr	r0, [pc, #84]	; (80109a8 <tcp_output_alloc_header+0x78>)
 8010952:	f004 ffeb 	bl	801592c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	8adb      	ldrh	r3, [r3, #22]
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	8b12      	ldrh	r2, [r2, #24]
 8010962:	68f9      	ldr	r1, [r7, #12]
 8010964:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010966:	893d      	ldrh	r5, [r7, #8]
 8010968:	897c      	ldrh	r4, [r7, #10]
 801096a:	9103      	str	r1, [sp, #12]
 801096c:	2110      	movs	r1, #16
 801096e:	9102      	str	r1, [sp, #8]
 8010970:	9201      	str	r2, [sp, #4]
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	462a      	mov	r2, r5
 8010978:	4621      	mov	r1, r4
 801097a:	f7ff ff67 	bl	801084c <tcp_output_alloc_header_common>
 801097e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d006      	beq.n	8010994 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801098e:	441a      	add	r2, r3
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010994:	697b      	ldr	r3, [r7, #20]
}
 8010996:	4618      	mov	r0, r3
 8010998:	3718      	adds	r7, #24
 801099a:	46bd      	mov	sp, r7
 801099c:	bdb0      	pop	{r4, r5, r7, pc}
 801099e:	bf00      	nop
 80109a0:	08018550 	.word	0x08018550
 80109a4:	08018c58 	.word	0x08018c58
 80109a8:	080185a4 	.word	0x080185a4

080109ac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b088      	sub	sp, #32
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	4611      	mov	r1, r2
 80109b8:	461a      	mov	r2, r3
 80109ba:	460b      	mov	r3, r1
 80109bc:	71fb      	strb	r3, [r7, #7]
 80109be:	4613      	mov	r3, r2
 80109c0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d106      	bne.n	80109da <tcp_output_fill_options+0x2e>
 80109cc:	4b13      	ldr	r3, [pc, #76]	; (8010a1c <tcp_output_fill_options+0x70>)
 80109ce:	f240 7256 	movw	r2, #1878	; 0x756
 80109d2:	4913      	ldr	r1, [pc, #76]	; (8010a20 <tcp_output_fill_options+0x74>)
 80109d4:	4813      	ldr	r0, [pc, #76]	; (8010a24 <tcp_output_fill_options+0x78>)
 80109d6:	f004 ffa9 	bl	801592c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	3314      	adds	r3, #20
 80109e4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	f103 0214 	add.w	r2, r3, #20
 80109ec:	8bfb      	ldrh	r3, [r7, #30]
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	4619      	mov	r1, r3
 80109f2:	79fb      	ldrb	r3, [r7, #7]
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	f003 0304 	and.w	r3, r3, #4
 80109fa:	440b      	add	r3, r1
 80109fc:	4413      	add	r3, r2
 80109fe:	697a      	ldr	r2, [r7, #20]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d006      	beq.n	8010a12 <tcp_output_fill_options+0x66>
 8010a04:	4b05      	ldr	r3, [pc, #20]	; (8010a1c <tcp_output_fill_options+0x70>)
 8010a06:	f240 7275 	movw	r2, #1909	; 0x775
 8010a0a:	4907      	ldr	r1, [pc, #28]	; (8010a28 <tcp_output_fill_options+0x7c>)
 8010a0c:	4805      	ldr	r0, [pc, #20]	; (8010a24 <tcp_output_fill_options+0x78>)
 8010a0e:	f004 ff8d 	bl	801592c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010a12:	bf00      	nop
 8010a14:	3720      	adds	r7, #32
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	08018550 	.word	0x08018550
 8010a20:	08018c80 	.word	0x08018c80
 8010a24:	080185a4 	.word	0x080185a4
 8010a28:	08018b78 	.word	0x08018b78

08010a2c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b08a      	sub	sp, #40	; 0x28
 8010a30:	af04      	add	r7, sp, #16
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]
 8010a38:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d106      	bne.n	8010a4e <tcp_output_control_segment+0x22>
 8010a40:	4b1c      	ldr	r3, [pc, #112]	; (8010ab4 <tcp_output_control_segment+0x88>)
 8010a42:	f240 7287 	movw	r2, #1927	; 0x787
 8010a46:	491c      	ldr	r1, [pc, #112]	; (8010ab8 <tcp_output_control_segment+0x8c>)
 8010a48:	481c      	ldr	r0, [pc, #112]	; (8010abc <tcp_output_control_segment+0x90>)
 8010a4a:	f004 ff6f 	bl	801592c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010a4e:	683a      	ldr	r2, [r7, #0]
 8010a50:	6879      	ldr	r1, [r7, #4]
 8010a52:	68f8      	ldr	r0, [r7, #12]
 8010a54:	f7fe ff40 	bl	800f8d8 <tcp_route>
 8010a58:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d102      	bne.n	8010a66 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010a60:	23fc      	movs	r3, #252	; 0xfc
 8010a62:	75fb      	strb	r3, [r7, #23]
 8010a64:	e01c      	b.n	8010aa0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d006      	beq.n	8010a7a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	7adb      	ldrb	r3, [r3, #11]
 8010a70:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	7a9b      	ldrb	r3, [r3, #10]
 8010a76:	757b      	strb	r3, [r7, #21]
 8010a78:	e003      	b.n	8010a82 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010a7a:	23ff      	movs	r3, #255	; 0xff
 8010a7c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010a82:	7dba      	ldrb	r2, [r7, #22]
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	9302      	str	r3, [sp, #8]
 8010a88:	2306      	movs	r3, #6
 8010a8a:	9301      	str	r3, [sp, #4]
 8010a8c:	7d7b      	ldrb	r3, [r7, #21]
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	4613      	mov	r3, r2
 8010a92:	683a      	ldr	r2, [r7, #0]
 8010a94:	6879      	ldr	r1, [r7, #4]
 8010a96:	68b8      	ldr	r0, [r7, #8]
 8010a98:	f002 fad6 	bl	8013048 <ip4_output_if>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010aa0:	68b8      	ldr	r0, [r7, #8]
 8010aa2:	f7fa fcdb 	bl	800b45c <pbuf_free>
  return err;
 8010aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3718      	adds	r7, #24
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	08018550 	.word	0x08018550
 8010ab8:	08018ca8 	.word	0x08018ca8
 8010abc:	080185a4 	.word	0x080185a4

08010ac0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010ac0:	b590      	push	{r4, r7, lr}
 8010ac2:	b08b      	sub	sp, #44	; 0x2c
 8010ac4:	af04      	add	r7, sp, #16
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	60b9      	str	r1, [r7, #8]
 8010aca:	607a      	str	r2, [r7, #4]
 8010acc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d106      	bne.n	8010ae2 <tcp_rst+0x22>
 8010ad4:	4b1f      	ldr	r3, [pc, #124]	; (8010b54 <tcp_rst+0x94>)
 8010ad6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010ada:	491f      	ldr	r1, [pc, #124]	; (8010b58 <tcp_rst+0x98>)
 8010adc:	481f      	ldr	r0, [pc, #124]	; (8010b5c <tcp_rst+0x9c>)
 8010ade:	f004 ff25 	bl	801592c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d106      	bne.n	8010af6 <tcp_rst+0x36>
 8010ae8:	4b1a      	ldr	r3, [pc, #104]	; (8010b54 <tcp_rst+0x94>)
 8010aea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010aee:	491c      	ldr	r1, [pc, #112]	; (8010b60 <tcp_rst+0xa0>)
 8010af0:	481a      	ldr	r0, [pc, #104]	; (8010b5c <tcp_rst+0x9c>)
 8010af2:	f004 ff1b 	bl	801592c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010af6:	2300      	movs	r3, #0
 8010af8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010afa:	f246 0308 	movw	r3, #24584	; 0x6008
 8010afe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010b00:	7dfb      	ldrb	r3, [r7, #23]
 8010b02:	b29c      	uxth	r4, r3
 8010b04:	68b8      	ldr	r0, [r7, #8]
 8010b06:	f7f9 f8cc 	bl	8009ca2 <lwip_htonl>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	8abb      	ldrh	r3, [r7, #20]
 8010b0e:	9303      	str	r3, [sp, #12]
 8010b10:	2314      	movs	r3, #20
 8010b12:	9302      	str	r3, [sp, #8]
 8010b14:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010b16:	9301      	str	r3, [sp, #4]
 8010b18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	2200      	movs	r2, #0
 8010b20:	4621      	mov	r1, r4
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7ff fe92 	bl	801084c <tcp_output_alloc_header_common>
 8010b28:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d00c      	beq.n	8010b4a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010b30:	7dfb      	ldrb	r3, [r7, #23]
 8010b32:	2200      	movs	r2, #0
 8010b34:	6939      	ldr	r1, [r7, #16]
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f7ff ff38 	bl	80109ac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	6939      	ldr	r1, [r7, #16]
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f7ff ff72 	bl	8010a2c <tcp_output_control_segment>
 8010b48:	e000      	b.n	8010b4c <tcp_rst+0x8c>
    return;
 8010b4a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010b4c:	371c      	adds	r7, #28
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd90      	pop	{r4, r7, pc}
 8010b52:	bf00      	nop
 8010b54:	08018550 	.word	0x08018550
 8010b58:	08018cd4 	.word	0x08018cd4
 8010b5c:	080185a4 	.word	0x080185a4
 8010b60:	08018cf0 	.word	0x08018cf0

08010b64 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010b64:	b590      	push	{r4, r7, lr}
 8010b66:	b087      	sub	sp, #28
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d106      	bne.n	8010b88 <tcp_send_empty_ack+0x24>
 8010b7a:	4b28      	ldr	r3, [pc, #160]	; (8010c1c <tcp_send_empty_ack+0xb8>)
 8010b7c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010b80:	4927      	ldr	r1, [pc, #156]	; (8010c20 <tcp_send_empty_ack+0xbc>)
 8010b82:	4828      	ldr	r0, [pc, #160]	; (8010c24 <tcp_send_empty_ack+0xc0>)
 8010b84:	f004 fed2 	bl	801592c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b88:	7dfb      	ldrb	r3, [r7, #23]
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	f003 0304 	and.w	r3, r3, #4
 8010b92:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010b94:	7d7b      	ldrb	r3, [r7, #21]
 8010b96:	b29c      	uxth	r4, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7f9 f880 	bl	8009ca2 <lwip_htonl>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	4621      	mov	r1, r4
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f7ff fec1 	bl	8010930 <tcp_output_alloc_header>
 8010bae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d109      	bne.n	8010bca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	8b5b      	ldrh	r3, [r3, #26]
 8010bba:	f043 0303 	orr.w	r3, r3, #3
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010bc4:	f06f 0301 	mvn.w	r3, #1
 8010bc8:	e023      	b.n	8010c12 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010bca:	7dbb      	ldrb	r3, [r7, #22]
 8010bcc:	7dfa      	ldrb	r2, [r7, #23]
 8010bce:	6939      	ldr	r1, [r7, #16]
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7ff feeb 	bl	80109ac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	3304      	adds	r3, #4
 8010bdc:	6939      	ldr	r1, [r7, #16]
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7ff ff24 	bl	8010a2c <tcp_output_control_segment>
 8010be4:	4603      	mov	r3, r0
 8010be6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d007      	beq.n	8010c00 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	8b5b      	ldrh	r3, [r3, #26]
 8010bf4:	f043 0303 	orr.w	r3, r3, #3
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	835a      	strh	r2, [r3, #26]
 8010bfe:	e006      	b.n	8010c0e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	8b5b      	ldrh	r3, [r3, #26]
 8010c04:	f023 0303 	bic.w	r3, r3, #3
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	371c      	adds	r7, #28
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd90      	pop	{r4, r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	08018550 	.word	0x08018550
 8010c20:	08018d0c 	.word	0x08018d0c
 8010c24:	080185a4 	.word	0x080185a4

08010c28 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010c28:	b590      	push	{r4, r7, lr}
 8010c2a:	b087      	sub	sp, #28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c30:	2300      	movs	r3, #0
 8010c32:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d106      	bne.n	8010c48 <tcp_keepalive+0x20>
 8010c3a:	4b18      	ldr	r3, [pc, #96]	; (8010c9c <tcp_keepalive+0x74>)
 8010c3c:	f640 0224 	movw	r2, #2084	; 0x824
 8010c40:	4917      	ldr	r1, [pc, #92]	; (8010ca0 <tcp_keepalive+0x78>)
 8010c42:	4818      	ldr	r0, [pc, #96]	; (8010ca4 <tcp_keepalive+0x7c>)
 8010c44:	f004 fe72 	bl	801592c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010c48:	7dfb      	ldrb	r3, [r7, #23]
 8010c4a:	b29c      	uxth	r4, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c50:	3b01      	subs	r3, #1
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7f9 f825 	bl	8009ca2 <lwip_htonl>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	4621      	mov	r1, r4
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7ff fe66 	bl	8010930 <tcp_output_alloc_header>
 8010c64:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d102      	bne.n	8010c72 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c70:	e010      	b.n	8010c94 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010c72:	7dfb      	ldrb	r3, [r7, #23]
 8010c74:	2200      	movs	r2, #0
 8010c76:	6939      	ldr	r1, [r7, #16]
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f7ff fe97 	bl	80109ac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	3304      	adds	r3, #4
 8010c84:	6939      	ldr	r1, [r7, #16]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f7ff fed0 	bl	8010a2c <tcp_output_control_segment>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	371c      	adds	r7, #28
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd90      	pop	{r4, r7, pc}
 8010c9c:	08018550 	.word	0x08018550
 8010ca0:	08018d2c 	.word	0x08018d2c
 8010ca4:	080185a4 	.word	0x080185a4

08010ca8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010ca8:	b590      	push	{r4, r7, lr}
 8010caa:	b08b      	sub	sp, #44	; 0x2c
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d106      	bne.n	8010cca <tcp_zero_window_probe+0x22>
 8010cbc:	4b4c      	ldr	r3, [pc, #304]	; (8010df0 <tcp_zero_window_probe+0x148>)
 8010cbe:	f640 024f 	movw	r2, #2127	; 0x84f
 8010cc2:	494c      	ldr	r1, [pc, #304]	; (8010df4 <tcp_zero_window_probe+0x14c>)
 8010cc4:	484c      	ldr	r0, [pc, #304]	; (8010df8 <tcp_zero_window_probe+0x150>)
 8010cc6:	f004 fe31 	bl	801592c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010cd0:	6a3b      	ldr	r3, [r7, #32]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d101      	bne.n	8010cda <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	e086      	b.n	8010de8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010ce0:	2bff      	cmp	r3, #255	; 0xff
 8010ce2:	d007      	beq.n	8010cf4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010cea:	3301      	adds	r3, #1
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	899b      	ldrh	r3, [r3, #12]
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7f8 ffbb 	bl	8009c78 <lwip_htons>
 8010d02:	4603      	mov	r3, r0
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	f003 0301 	and.w	r3, r3, #1
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d005      	beq.n	8010d1a <tcp_zero_window_probe+0x72>
 8010d0e:	6a3b      	ldr	r3, [r7, #32]
 8010d10:	891b      	ldrh	r3, [r3, #8]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <tcp_zero_window_probe+0x72>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e000      	b.n	8010d1c <tcp_zero_window_probe+0x74>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010d1e:	7ffb      	ldrb	r3, [r7, #31]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	bf0c      	ite	eq
 8010d24:	2301      	moveq	r3, #1
 8010d26:	2300      	movne	r3, #0
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d30:	b299      	uxth	r1, r3
 8010d32:	6a3b      	ldr	r3, [r7, #32]
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	8bba      	ldrh	r2, [r7, #28]
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7ff fdf8 	bl	8010930 <tcp_output_alloc_header>
 8010d40:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d102      	bne.n	8010d4e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010d48:	f04f 33ff 	mov.w	r3, #4294967295
 8010d4c:	e04c      	b.n	8010de8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010d4e:	69bb      	ldr	r3, [r7, #24]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010d54:	7ffb      	ldrb	r3, [r7, #31]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d011      	beq.n	8010d7e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	899b      	ldrh	r3, [r3, #12]
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	b21b      	sxth	r3, r3
 8010d62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010d66:	b21c      	sxth	r4, r3
 8010d68:	2011      	movs	r0, #17
 8010d6a:	f7f8 ff85 	bl	8009c78 <lwip_htons>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	b21b      	sxth	r3, r3
 8010d72:	4323      	orrs	r3, r4
 8010d74:	b21b      	sxth	r3, r3
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	819a      	strh	r2, [r3, #12]
 8010d7c:	e010      	b.n	8010da0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	3314      	adds	r3, #20
 8010d84:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010d86:	6a3b      	ldr	r3, [r7, #32]
 8010d88:	6858      	ldr	r0, [r3, #4]
 8010d8a:	6a3b      	ldr	r3, [r7, #32]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	891a      	ldrh	r2, [r3, #8]
 8010d90:	6a3b      	ldr	r3, [r7, #32]
 8010d92:	891b      	ldrh	r3, [r3, #8]
 8010d94:	1ad3      	subs	r3, r2, r3
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	2201      	movs	r2, #1
 8010d9a:	6939      	ldr	r1, [r7, #16]
 8010d9c:	f7fa fd64 	bl	800b868 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010da0:	6a3b      	ldr	r3, [r7, #32]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7f8 ff7b 	bl	8009ca2 <lwip_htonl>
 8010dac:	4603      	mov	r3, r0
 8010dae:	3301      	adds	r3, #1
 8010db0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	da02      	bge.n	8010dc4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	68fa      	ldr	r2, [r7, #12]
 8010dc2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dc8:	2200      	movs	r2, #0
 8010dca:	69b9      	ldr	r1, [r7, #24]
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7ff fded 	bl	80109ac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	3304      	adds	r3, #4
 8010dd8:	69b9      	ldr	r1, [r7, #24]
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f7ff fe26 	bl	8010a2c <tcp_output_control_segment>
 8010de0:	4603      	mov	r3, r0
 8010de2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010de4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	372c      	adds	r7, #44	; 0x2c
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd90      	pop	{r4, r7, pc}
 8010df0:	08018550 	.word	0x08018550
 8010df4:	08018d48 	.word	0x08018d48
 8010df8:	080185a4 	.word	0x080185a4

08010dfc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010e04:	f7fa ff0c 	bl	800bc20 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010e08:	4b0a      	ldr	r3, [pc, #40]	; (8010e34 <tcpip_tcp_timer+0x38>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d103      	bne.n	8010e18 <tcpip_tcp_timer+0x1c>
 8010e10:	4b09      	ldr	r3, [pc, #36]	; (8010e38 <tcpip_tcp_timer+0x3c>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d005      	beq.n	8010e24 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010e18:	2200      	movs	r2, #0
 8010e1a:	4908      	ldr	r1, [pc, #32]	; (8010e3c <tcpip_tcp_timer+0x40>)
 8010e1c:	20fa      	movs	r0, #250	; 0xfa
 8010e1e:	f000 f8f3 	bl	8011008 <sys_timeout>
 8010e22:	e003      	b.n	8010e2c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010e24:	4b06      	ldr	r3, [pc, #24]	; (8010e40 <tcpip_tcp_timer+0x44>)
 8010e26:	2200      	movs	r2, #0
 8010e28:	601a      	str	r2, [r3, #0]
  }
}
 8010e2a:	bf00      	nop
 8010e2c:	bf00      	nop
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	2002e654 	.word	0x2002e654
 8010e38:	2002e658 	.word	0x2002e658
 8010e3c:	08010dfd 	.word	0x08010dfd
 8010e40:	2002e6a0 	.word	0x2002e6a0

08010e44 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010e48:	4b0a      	ldr	r3, [pc, #40]	; (8010e74 <tcp_timer_needed+0x30>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d10f      	bne.n	8010e70 <tcp_timer_needed+0x2c>
 8010e50:	4b09      	ldr	r3, [pc, #36]	; (8010e78 <tcp_timer_needed+0x34>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d103      	bne.n	8010e60 <tcp_timer_needed+0x1c>
 8010e58:	4b08      	ldr	r3, [pc, #32]	; (8010e7c <tcp_timer_needed+0x38>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d007      	beq.n	8010e70 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010e60:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <tcp_timer_needed+0x30>)
 8010e62:	2201      	movs	r2, #1
 8010e64:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010e66:	2200      	movs	r2, #0
 8010e68:	4905      	ldr	r1, [pc, #20]	; (8010e80 <tcp_timer_needed+0x3c>)
 8010e6a:	20fa      	movs	r0, #250	; 0xfa
 8010e6c:	f000 f8cc 	bl	8011008 <sys_timeout>
  }
}
 8010e70:	bf00      	nop
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	2002e6a0 	.word	0x2002e6a0
 8010e78:	2002e654 	.word	0x2002e654
 8010e7c:	2002e658 	.word	0x2002e658
 8010e80:	08010dfd 	.word	0x08010dfd

08010e84 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b086      	sub	sp, #24
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010e90:	200a      	movs	r0, #10
 8010e92:	f7f9 fbc9 	bl	800a628 <memp_malloc>
 8010e96:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d109      	bne.n	8010eb2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d151      	bne.n	8010f48 <sys_timeout_abs+0xc4>
 8010ea4:	4b2a      	ldr	r3, [pc, #168]	; (8010f50 <sys_timeout_abs+0xcc>)
 8010ea6:	22be      	movs	r2, #190	; 0xbe
 8010ea8:	492a      	ldr	r1, [pc, #168]	; (8010f54 <sys_timeout_abs+0xd0>)
 8010eaa:	482b      	ldr	r0, [pc, #172]	; (8010f58 <sys_timeout_abs+0xd4>)
 8010eac:	f004 fd3e 	bl	801592c <iprintf>
    return;
 8010eb0:	e04a      	b.n	8010f48 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	68ba      	ldr	r2, [r7, #8]
 8010ebc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	68fa      	ldr	r2, [r7, #12]
 8010ec8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010eca:	4b24      	ldr	r3, [pc, #144]	; (8010f5c <sys_timeout_abs+0xd8>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d103      	bne.n	8010eda <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010ed2:	4a22      	ldr	r2, [pc, #136]	; (8010f5c <sys_timeout_abs+0xd8>)
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	6013      	str	r3, [r2, #0]
    return;
 8010ed8:	e037      	b.n	8010f4a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	685a      	ldr	r2, [r3, #4]
 8010ede:	4b1f      	ldr	r3, [pc, #124]	; (8010f5c <sys_timeout_abs+0xd8>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	0fdb      	lsrs	r3, r3, #31
 8010ee8:	f003 0301 	and.w	r3, r3, #1
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d007      	beq.n	8010f02 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010ef2:	4b1a      	ldr	r3, [pc, #104]	; (8010f5c <sys_timeout_abs+0xd8>)
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010efa:	4a18      	ldr	r2, [pc, #96]	; (8010f5c <sys_timeout_abs+0xd8>)
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	6013      	str	r3, [r2, #0]
 8010f00:	e023      	b.n	8010f4a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010f02:	4b16      	ldr	r3, [pc, #88]	; (8010f5c <sys_timeout_abs+0xd8>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	617b      	str	r3, [r7, #20]
 8010f08:	e01a      	b.n	8010f40 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00b      	beq.n	8010f2a <sys_timeout_abs+0xa6>
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	685a      	ldr	r2, [r3, #4]
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	1ad3      	subs	r3, r2, r3
 8010f1e:	0fdb      	lsrs	r3, r3, #31
 8010f20:	f003 0301 	and.w	r3, r3, #1
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d007      	beq.n	8010f3a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	693a      	ldr	r2, [r7, #16]
 8010f36:	601a      	str	r2, [r3, #0]
        break;
 8010f38:	e007      	b.n	8010f4a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	617b      	str	r3, [r7, #20]
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d1e1      	bne.n	8010f0a <sys_timeout_abs+0x86>
 8010f46:	e000      	b.n	8010f4a <sys_timeout_abs+0xc6>
    return;
 8010f48:	bf00      	nop
      }
    }
  }
}
 8010f4a:	3718      	adds	r7, #24
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	08018d6c 	.word	0x08018d6c
 8010f54:	08018da0 	.word	0x08018da0
 8010f58:	08018de0 	.word	0x08018de0
 8010f5c:	2002e698 	.word	0x2002e698

08010f60 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	4798      	blx	r3

  now = sys_now();
 8010f72:	f7f4 ffed 	bl	8005f50 <sys_now>
 8010f76:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	4b0f      	ldr	r3, [pc, #60]	; (8010fbc <lwip_cyclic_timer+0x5c>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4413      	add	r3, r2
 8010f82:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	1ad3      	subs	r3, r2, r3
 8010f8a:	0fdb      	lsrs	r3, r3, #31
 8010f8c:	f003 0301 	and.w	r3, r3, #1
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d009      	beq.n	8010faa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	4907      	ldr	r1, [pc, #28]	; (8010fc0 <lwip_cyclic_timer+0x60>)
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7ff ff6e 	bl	8010e84 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010fa8:	e004      	b.n	8010fb4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	4904      	ldr	r1, [pc, #16]	; (8010fc0 <lwip_cyclic_timer+0x60>)
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f7ff ff68 	bl	8010e84 <sys_timeout_abs>
}
 8010fb4:	bf00      	nop
 8010fb6:	3718      	adds	r7, #24
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	2002e69c 	.word	0x2002e69c
 8010fc0:	08010f61 	.word	0x08010f61

08010fc4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010fca:	2301      	movs	r3, #1
 8010fcc:	607b      	str	r3, [r7, #4]
 8010fce:	e00e      	b.n	8010fee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010fd0:	4a0b      	ldr	r2, [pc, #44]	; (8011000 <sys_timeouts_init+0x3c>)
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	00db      	lsls	r3, r3, #3
 8010fdc:	4a08      	ldr	r2, [pc, #32]	; (8011000 <sys_timeouts_init+0x3c>)
 8010fde:	4413      	add	r3, r2
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	4908      	ldr	r1, [pc, #32]	; (8011004 <sys_timeouts_init+0x40>)
 8010fe4:	f000 f810 	bl	8011008 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3301      	adds	r3, #1
 8010fec:	607b      	str	r3, [r7, #4]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d9ed      	bls.n	8010fd0 <sys_timeouts_init+0xc>
  }
}
 8010ff4:	bf00      	nop
 8010ff6:	bf00      	nop
 8010ff8:	3708      	adds	r7, #8
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop
 8011000:	08019ca0 	.word	0x08019ca0
 8011004:	08010f61 	.word	0x08010f61

08011008 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801101a:	d306      	bcc.n	801102a <sys_timeout+0x22>
 801101c:	4b0a      	ldr	r3, [pc, #40]	; (8011048 <sys_timeout+0x40>)
 801101e:	f240 1229 	movw	r2, #297	; 0x129
 8011022:	490a      	ldr	r1, [pc, #40]	; (801104c <sys_timeout+0x44>)
 8011024:	480a      	ldr	r0, [pc, #40]	; (8011050 <sys_timeout+0x48>)
 8011026:	f004 fc81 	bl	801592c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801102a:	f7f4 ff91 	bl	8005f50 <sys_now>
 801102e:	4602      	mov	r2, r0
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	4413      	add	r3, r2
 8011034:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	68b9      	ldr	r1, [r7, #8]
 801103a:	6978      	ldr	r0, [r7, #20]
 801103c:	f7ff ff22 	bl	8010e84 <sys_timeout_abs>
#endif
}
 8011040:	bf00      	nop
 8011042:	3718      	adds	r7, #24
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	08018d6c 	.word	0x08018d6c
 801104c:	08018e08 	.word	0x08018e08
 8011050:	08018de0 	.word	0x08018de0

08011054 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801105e:	4b19      	ldr	r3, [pc, #100]	; (80110c4 <sys_untimeout+0x70>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d029      	beq.n	80110ba <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011066:	4b17      	ldr	r3, [pc, #92]	; (80110c4 <sys_untimeout+0x70>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	60bb      	str	r3, [r7, #8]
 801106c:	2300      	movs	r3, #0
 801106e:	60fb      	str	r3, [r7, #12]
 8011070:	e01f      	b.n	80110b2 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	689b      	ldr	r3, [r3, #8]
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	429a      	cmp	r2, r3
 801107a:	d115      	bne.n	80110a8 <sys_untimeout+0x54>
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	683a      	ldr	r2, [r7, #0]
 8011082:	429a      	cmp	r2, r3
 8011084:	d110      	bne.n	80110a8 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d104      	bne.n	8011096 <sys_untimeout+0x42>
        next_timeout = t->next;
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4a0c      	ldr	r2, [pc, #48]	; (80110c4 <sys_untimeout+0x70>)
 8011092:	6013      	str	r3, [r2, #0]
 8011094:	e003      	b.n	801109e <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801109e:	68b9      	ldr	r1, [r7, #8]
 80110a0:	200a      	movs	r0, #10
 80110a2:	f7f9 fb37 	bl	800a714 <memp_free>
      return;
 80110a6:	e009      	b.n	80110bc <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	60fb      	str	r3, [r7, #12]
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	60bb      	str	r3, [r7, #8]
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d1dc      	bne.n	8011072 <sys_untimeout+0x1e>
    }
  }
  return;
 80110b8:	e000      	b.n	80110bc <sys_untimeout+0x68>
    return;
 80110ba:	bf00      	nop
}
 80110bc:	3710      	adds	r7, #16
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	2002e698 	.word	0x2002e698

080110c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80110ce:	f7f4 ff3f 	bl	8005f50 <sys_now>
 80110d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80110d4:	4b17      	ldr	r3, [pc, #92]	; (8011134 <sys_check_timeouts+0x6c>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d022      	beq.n	8011126 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	1ad3      	subs	r3, r2, r3
 80110e8:	0fdb      	lsrs	r3, r3, #31
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d11a      	bne.n	801112a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	4a0e      	ldr	r2, [pc, #56]	; (8011134 <sys_check_timeouts+0x6c>)
 80110fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	689b      	ldr	r3, [r3, #8]
 8011100:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	4a0a      	ldr	r2, [pc, #40]	; (8011138 <sys_check_timeouts+0x70>)
 801110e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011110:	68b9      	ldr	r1, [r7, #8]
 8011112:	200a      	movs	r0, #10
 8011114:	f7f9 fafe 	bl	800a714 <memp_free>
    if (handler != NULL) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d0da      	beq.n	80110d4 <sys_check_timeouts+0xc>
      handler(arg);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6838      	ldr	r0, [r7, #0]
 8011122:	4798      	blx	r3
  do {
 8011124:	e7d6      	b.n	80110d4 <sys_check_timeouts+0xc>
      return;
 8011126:	bf00      	nop
 8011128:	e000      	b.n	801112c <sys_check_timeouts+0x64>
      return;
 801112a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801112c:	3710      	adds	r7, #16
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	2002e698 	.word	0x2002e698
 8011138:	2002e69c 	.word	0x2002e69c

0801113c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011142:	4b16      	ldr	r3, [pc, #88]	; (801119c <sys_timeouts_sleeptime+0x60>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d102      	bne.n	8011150 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801114a:	f04f 33ff 	mov.w	r3, #4294967295
 801114e:	e020      	b.n	8011192 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011150:	f7f4 fefe 	bl	8005f50 <sys_now>
 8011154:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011156:	4b11      	ldr	r3, [pc, #68]	; (801119c <sys_timeouts_sleeptime+0x60>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	1ad3      	subs	r3, r2, r3
 8011160:	0fdb      	lsrs	r3, r3, #31
 8011162:	f003 0301 	and.w	r3, r3, #1
 8011166:	b2db      	uxtb	r3, r3
 8011168:	2b00      	cmp	r3, #0
 801116a:	d001      	beq.n	8011170 <sys_timeouts_sleeptime+0x34>
    return 0;
 801116c:	2300      	movs	r3, #0
 801116e:	e010      	b.n	8011192 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011170:	4b0a      	ldr	r3, [pc, #40]	; (801119c <sys_timeouts_sleeptime+0x60>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	685a      	ldr	r2, [r3, #4]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	1ad3      	subs	r3, r2, r3
 801117a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	da06      	bge.n	8011190 <sys_timeouts_sleeptime+0x54>
 8011182:	4b07      	ldr	r3, [pc, #28]	; (80111a0 <sys_timeouts_sleeptime+0x64>)
 8011184:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011188:	4906      	ldr	r1, [pc, #24]	; (80111a4 <sys_timeouts_sleeptime+0x68>)
 801118a:	4807      	ldr	r0, [pc, #28]	; (80111a8 <sys_timeouts_sleeptime+0x6c>)
 801118c:	f004 fbce 	bl	801592c <iprintf>
    return ret;
 8011190:	683b      	ldr	r3, [r7, #0]
  }
}
 8011192:	4618      	mov	r0, r3
 8011194:	3708      	adds	r7, #8
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	2002e698 	.word	0x2002e698
 80111a0:	08018d6c 	.word	0x08018d6c
 80111a4:	08018e40 	.word	0x08018e40
 80111a8:	08018de0 	.word	0x08018de0

080111ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80111b0:	f004 fc4a 	bl	8015a48 <rand>
 80111b4:	4603      	mov	r3, r0
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80111bc:	b29b      	uxth	r3, r3
 80111be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80111c2:	b29a      	uxth	r2, r3
 80111c4:	4b01      	ldr	r3, [pc, #4]	; (80111cc <udp_init+0x20>)
 80111c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80111c8:	bf00      	nop
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	2000002c 	.word	0x2000002c

080111d0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80111da:	4b17      	ldr	r3, [pc, #92]	; (8011238 <udp_new_port+0x68>)
 80111dc:	881b      	ldrh	r3, [r3, #0]
 80111de:	1c5a      	adds	r2, r3, #1
 80111e0:	b291      	uxth	r1, r2
 80111e2:	4a15      	ldr	r2, [pc, #84]	; (8011238 <udp_new_port+0x68>)
 80111e4:	8011      	strh	r1, [r2, #0]
 80111e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111ea:	4293      	cmp	r3, r2
 80111ec:	d103      	bne.n	80111f6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80111ee:	4b12      	ldr	r3, [pc, #72]	; (8011238 <udp_new_port+0x68>)
 80111f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80111f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80111f6:	4b11      	ldr	r3, [pc, #68]	; (801123c <udp_new_port+0x6c>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	603b      	str	r3, [r7, #0]
 80111fc:	e011      	b.n	8011222 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	8a5a      	ldrh	r2, [r3, #18]
 8011202:	4b0d      	ldr	r3, [pc, #52]	; (8011238 <udp_new_port+0x68>)
 8011204:	881b      	ldrh	r3, [r3, #0]
 8011206:	429a      	cmp	r2, r3
 8011208:	d108      	bne.n	801121c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801120a:	88fb      	ldrh	r3, [r7, #6]
 801120c:	3301      	adds	r3, #1
 801120e:	80fb      	strh	r3, [r7, #6]
 8011210:	88fb      	ldrh	r3, [r7, #6]
 8011212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011216:	d3e0      	bcc.n	80111da <udp_new_port+0xa>
        return 0;
 8011218:	2300      	movs	r3, #0
 801121a:	e007      	b.n	801122c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	603b      	str	r3, [r7, #0]
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d1ea      	bne.n	80111fe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011228:	4b03      	ldr	r3, [pc, #12]	; (8011238 <udp_new_port+0x68>)
 801122a:	881b      	ldrh	r3, [r3, #0]
}
 801122c:	4618      	mov	r0, r3
 801122e:	370c      	adds	r7, #12
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr
 8011238:	2000002c 	.word	0x2000002c
 801123c:	2002e6a4 	.word	0x2002e6a4

08011240 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	4613      	mov	r3, r2
 801124c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d105      	bne.n	8011260 <udp_input_local_match+0x20>
 8011254:	4b27      	ldr	r3, [pc, #156]	; (80112f4 <udp_input_local_match+0xb4>)
 8011256:	2287      	movs	r2, #135	; 0x87
 8011258:	4927      	ldr	r1, [pc, #156]	; (80112f8 <udp_input_local_match+0xb8>)
 801125a:	4828      	ldr	r0, [pc, #160]	; (80112fc <udp_input_local_match+0xbc>)
 801125c:	f004 fb66 	bl	801592c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d105      	bne.n	8011272 <udp_input_local_match+0x32>
 8011266:	4b23      	ldr	r3, [pc, #140]	; (80112f4 <udp_input_local_match+0xb4>)
 8011268:	2288      	movs	r2, #136	; 0x88
 801126a:	4925      	ldr	r1, [pc, #148]	; (8011300 <udp_input_local_match+0xc0>)
 801126c:	4823      	ldr	r0, [pc, #140]	; (80112fc <udp_input_local_match+0xbc>)
 801126e:	f004 fb5d 	bl	801592c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	7a1b      	ldrb	r3, [r3, #8]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00b      	beq.n	8011292 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	7a1a      	ldrb	r2, [r3, #8]
 801127e:	4b21      	ldr	r3, [pc, #132]	; (8011304 <udp_input_local_match+0xc4>)
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011286:	3301      	adds	r3, #1
 8011288:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801128a:	429a      	cmp	r2, r3
 801128c:	d001      	beq.n	8011292 <udp_input_local_match+0x52>
    return 0;
 801128e:	2300      	movs	r3, #0
 8011290:	e02b      	b.n	80112ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011292:	79fb      	ldrb	r3, [r7, #7]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d018      	beq.n	80112ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d013      	beq.n	80112c6 <udp_input_local_match+0x86>
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d00f      	beq.n	80112c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80112a6:	4b17      	ldr	r3, [pc, #92]	; (8011304 <udp_input_local_match+0xc4>)
 80112a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80112aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ae:	d00a      	beq.n	80112c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	4b13      	ldr	r3, [pc, #76]	; (8011304 <udp_input_local_match+0xc4>)
 80112b6:	695b      	ldr	r3, [r3, #20]
 80112b8:	405a      	eors	r2, r3
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	3308      	adds	r3, #8
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d110      	bne.n	80112e8 <udp_input_local_match+0xa8>
          return 1;
 80112c6:	2301      	movs	r3, #1
 80112c8:	e00f      	b.n	80112ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d009      	beq.n	80112e4 <udp_input_local_match+0xa4>
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d005      	beq.n	80112e4 <udp_input_local_match+0xa4>
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	4b09      	ldr	r3, [pc, #36]	; (8011304 <udp_input_local_match+0xc4>)
 80112de:	695b      	ldr	r3, [r3, #20]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d101      	bne.n	80112e8 <udp_input_local_match+0xa8>
        return 1;
 80112e4:	2301      	movs	r3, #1
 80112e6:	e000      	b.n	80112ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	08018e54 	.word	0x08018e54
 80112f8:	08018e84 	.word	0x08018e84
 80112fc:	08018ea8 	.word	0x08018ea8
 8011300:	08018ed0 	.word	0x08018ed0
 8011304:	2002aef4 	.word	0x2002aef4

08011308 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011308:	b590      	push	{r4, r7, lr}
 801130a:	b08d      	sub	sp, #52	; 0x34
 801130c:	af02      	add	r7, sp, #8
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011312:	2300      	movs	r3, #0
 8011314:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d105      	bne.n	8011328 <udp_input+0x20>
 801131c:	4b7c      	ldr	r3, [pc, #496]	; (8011510 <udp_input+0x208>)
 801131e:	22cf      	movs	r2, #207	; 0xcf
 8011320:	497c      	ldr	r1, [pc, #496]	; (8011514 <udp_input+0x20c>)
 8011322:	487d      	ldr	r0, [pc, #500]	; (8011518 <udp_input+0x210>)
 8011324:	f004 fb02 	bl	801592c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d105      	bne.n	801133a <udp_input+0x32>
 801132e:	4b78      	ldr	r3, [pc, #480]	; (8011510 <udp_input+0x208>)
 8011330:	22d0      	movs	r2, #208	; 0xd0
 8011332:	497a      	ldr	r1, [pc, #488]	; (801151c <udp_input+0x214>)
 8011334:	4878      	ldr	r0, [pc, #480]	; (8011518 <udp_input+0x210>)
 8011336:	f004 faf9 	bl	801592c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	895b      	ldrh	r3, [r3, #10]
 801133e:	2b07      	cmp	r3, #7
 8011340:	d803      	bhi.n	801134a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f7fa f88a 	bl	800b45c <pbuf_free>
    goto end;
 8011348:	e0de      	b.n	8011508 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011350:	4b73      	ldr	r3, [pc, #460]	; (8011520 <udp_input+0x218>)
 8011352:	695b      	ldr	r3, [r3, #20]
 8011354:	4a72      	ldr	r2, [pc, #456]	; (8011520 <udp_input+0x218>)
 8011356:	6812      	ldr	r2, [r2, #0]
 8011358:	4611      	mov	r1, r2
 801135a:	4618      	mov	r0, r3
 801135c:	f001 ff4c 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 8011360:	4603      	mov	r3, r0
 8011362:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	b29b      	uxth	r3, r3
 801136a:	4618      	mov	r0, r3
 801136c:	f7f8 fc84 	bl	8009c78 <lwip_htons>
 8011370:	4603      	mov	r3, r0
 8011372:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	885b      	ldrh	r3, [r3, #2]
 8011378:	b29b      	uxth	r3, r3
 801137a:	4618      	mov	r0, r3
 801137c:	f7f8 fc7c 	bl	8009c78 <lwip_htons>
 8011380:	4603      	mov	r3, r0
 8011382:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011384:	2300      	movs	r3, #0
 8011386:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011388:	2300      	movs	r3, #0
 801138a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801138c:	2300      	movs	r3, #0
 801138e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011390:	4b64      	ldr	r3, [pc, #400]	; (8011524 <udp_input+0x21c>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	627b      	str	r3, [r7, #36]	; 0x24
 8011396:	e054      	b.n	8011442 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139a:	8a5b      	ldrh	r3, [r3, #18]
 801139c:	89fa      	ldrh	r2, [r7, #14]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d14a      	bne.n	8011438 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80113a2:	7cfb      	ldrb	r3, [r7, #19]
 80113a4:	461a      	mov	r2, r3
 80113a6:	6839      	ldr	r1, [r7, #0]
 80113a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113aa:	f7ff ff49 	bl	8011240 <udp_input_local_match>
 80113ae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d041      	beq.n	8011438 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80113b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b6:	7c1b      	ldrb	r3, [r3, #16]
 80113b8:	f003 0304 	and.w	r3, r3, #4
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d11d      	bne.n	80113fc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d102      	bne.n	80113cc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80113c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c8:	61fb      	str	r3, [r7, #28]
 80113ca:	e017      	b.n	80113fc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80113cc:	7cfb      	ldrb	r3, [r7, #19]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d014      	beq.n	80113fc <udp_input+0xf4>
 80113d2:	4b53      	ldr	r3, [pc, #332]	; (8011520 <udp_input+0x218>)
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113da:	d10f      	bne.n	80113fc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	3304      	adds	r3, #4
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d008      	beq.n	80113fc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80113ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	3304      	adds	r3, #4
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d101      	bne.n	80113fc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80113f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80113fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fe:	8a9b      	ldrh	r3, [r3, #20]
 8011400:	8a3a      	ldrh	r2, [r7, #16]
 8011402:	429a      	cmp	r2, r3
 8011404:	d118      	bne.n	8011438 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801140a:	2b00      	cmp	r3, #0
 801140c:	d005      	beq.n	801141a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011410:	685a      	ldr	r2, [r3, #4]
 8011412:	4b43      	ldr	r3, [pc, #268]	; (8011520 <udp_input+0x218>)
 8011414:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011416:	429a      	cmp	r2, r3
 8011418:	d10e      	bne.n	8011438 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801141a:	6a3b      	ldr	r3, [r7, #32]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d014      	beq.n	801144a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011422:	68da      	ldr	r2, [r3, #12]
 8011424:	6a3b      	ldr	r3, [r7, #32]
 8011426:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011428:	4b3e      	ldr	r3, [pc, #248]	; (8011524 <udp_input+0x21c>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011430:	4a3c      	ldr	r2, [pc, #240]	; (8011524 <udp_input+0x21c>)
 8011432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011434:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011436:	e008      	b.n	801144a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	627b      	str	r3, [r7, #36]	; 0x24
 8011442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1a7      	bne.n	8011398 <udp_input+0x90>
 8011448:	e000      	b.n	801144c <udp_input+0x144>
        break;
 801144a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011458:	2b00      	cmp	r3, #0
 801145a:	d002      	beq.n	8011462 <udp_input+0x15a>
    for_us = 1;
 801145c:	2301      	movs	r3, #1
 801145e:	76fb      	strb	r3, [r7, #27]
 8011460:	e00a      	b.n	8011478 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	3304      	adds	r3, #4
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	4b2d      	ldr	r3, [pc, #180]	; (8011520 <udp_input+0x218>)
 801146a:	695b      	ldr	r3, [r3, #20]
 801146c:	429a      	cmp	r2, r3
 801146e:	bf0c      	ite	eq
 8011470:	2301      	moveq	r3, #1
 8011472:	2300      	movne	r3, #0
 8011474:	b2db      	uxtb	r3, r3
 8011476:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011478:	7efb      	ldrb	r3, [r7, #27]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d041      	beq.n	8011502 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801147e:	2108      	movs	r1, #8
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7f9 ff65 	bl	800b350 <pbuf_remove_header>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d00a      	beq.n	80114a2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801148c:	4b20      	ldr	r3, [pc, #128]	; (8011510 <udp_input+0x208>)
 801148e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011492:	4925      	ldr	r1, [pc, #148]	; (8011528 <udp_input+0x220>)
 8011494:	4820      	ldr	r0, [pc, #128]	; (8011518 <udp_input+0x210>)
 8011496:	f004 fa49 	bl	801592c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f7f9 ffde 	bl	800b45c <pbuf_free>
      goto end;
 80114a0:	e032      	b.n	8011508 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d012      	beq.n	80114ce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80114a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114aa:	699b      	ldr	r3, [r3, #24]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d00a      	beq.n	80114c6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	699c      	ldr	r4, [r3, #24]
 80114b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b6:	69d8      	ldr	r0, [r3, #28]
 80114b8:	8a3b      	ldrh	r3, [r7, #16]
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	4b1b      	ldr	r3, [pc, #108]	; (801152c <udp_input+0x224>)
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114c2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80114c4:	e021      	b.n	801150a <udp_input+0x202>
        pbuf_free(p);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7f9 ffc8 	bl	800b45c <pbuf_free>
        goto end;
 80114cc:	e01c      	b.n	8011508 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80114ce:	7cfb      	ldrb	r3, [r7, #19]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d112      	bne.n	80114fa <udp_input+0x1f2>
 80114d4:	4b12      	ldr	r3, [pc, #72]	; (8011520 <udp_input+0x218>)
 80114d6:	695b      	ldr	r3, [r3, #20]
 80114d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114dc:	2be0      	cmp	r3, #224	; 0xe0
 80114de:	d00c      	beq.n	80114fa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80114e0:	4b0f      	ldr	r3, [pc, #60]	; (8011520 <udp_input+0x218>)
 80114e2:	899b      	ldrh	r3, [r3, #12]
 80114e4:	3308      	adds	r3, #8
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	b21b      	sxth	r3, r3
 80114ea:	4619      	mov	r1, r3
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f7f9 ffa2 	bl	800b436 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80114f2:	2103      	movs	r1, #3
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f001 fb5f 	bl	8012bb8 <icmp_dest_unreach>
      pbuf_free(p);
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f7f9 ffae 	bl	800b45c <pbuf_free>
  return;
 8011500:	e003      	b.n	801150a <udp_input+0x202>
    pbuf_free(p);
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f7f9 ffaa 	bl	800b45c <pbuf_free>
  return;
 8011508:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801150a:	372c      	adds	r7, #44	; 0x2c
 801150c:	46bd      	mov	sp, r7
 801150e:	bd90      	pop	{r4, r7, pc}
 8011510:	08018e54 	.word	0x08018e54
 8011514:	08018ef8 	.word	0x08018ef8
 8011518:	08018ea8 	.word	0x08018ea8
 801151c:	08018f10 	.word	0x08018f10
 8011520:	2002aef4 	.word	0x2002aef4
 8011524:	2002e6a4 	.word	0x2002e6a4
 8011528:	08018f2c 	.word	0x08018f2c
 801152c:	2002af04 	.word	0x2002af04

08011530 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b088      	sub	sp, #32
 8011534:	af02      	add	r7, sp, #8
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
 801153c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d109      	bne.n	8011558 <udp_sendto+0x28>
 8011544:	4b23      	ldr	r3, [pc, #140]	; (80115d4 <udp_sendto+0xa4>)
 8011546:	f44f 7206 	mov.w	r2, #536	; 0x218
 801154a:	4923      	ldr	r1, [pc, #140]	; (80115d8 <udp_sendto+0xa8>)
 801154c:	4823      	ldr	r0, [pc, #140]	; (80115dc <udp_sendto+0xac>)
 801154e:	f004 f9ed 	bl	801592c <iprintf>
 8011552:	f06f 030f 	mvn.w	r3, #15
 8011556:	e038      	b.n	80115ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d109      	bne.n	8011572 <udp_sendto+0x42>
 801155e:	4b1d      	ldr	r3, [pc, #116]	; (80115d4 <udp_sendto+0xa4>)
 8011560:	f240 2219 	movw	r2, #537	; 0x219
 8011564:	491e      	ldr	r1, [pc, #120]	; (80115e0 <udp_sendto+0xb0>)
 8011566:	481d      	ldr	r0, [pc, #116]	; (80115dc <udp_sendto+0xac>)
 8011568:	f004 f9e0 	bl	801592c <iprintf>
 801156c:	f06f 030f 	mvn.w	r3, #15
 8011570:	e02b      	b.n	80115ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d109      	bne.n	801158c <udp_sendto+0x5c>
 8011578:	4b16      	ldr	r3, [pc, #88]	; (80115d4 <udp_sendto+0xa4>)
 801157a:	f240 221a 	movw	r2, #538	; 0x21a
 801157e:	4919      	ldr	r1, [pc, #100]	; (80115e4 <udp_sendto+0xb4>)
 8011580:	4816      	ldr	r0, [pc, #88]	; (80115dc <udp_sendto+0xac>)
 8011582:	f004 f9d3 	bl	801592c <iprintf>
 8011586:	f06f 030f 	mvn.w	r3, #15
 801158a:	e01e      	b.n	80115ca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	7a1b      	ldrb	r3, [r3, #8]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d006      	beq.n	80115a2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	7a1b      	ldrb	r3, [r3, #8]
 8011598:	4618      	mov	r0, r3
 801159a:	f7f9 fbd1 	bl	800ad40 <netif_get_by_index>
 801159e:	6178      	str	r0, [r7, #20]
 80115a0:	e003      	b.n	80115aa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f001 fb92 	bl	8012ccc <ip4_route>
 80115a8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d102      	bne.n	80115b6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80115b0:	f06f 0303 	mvn.w	r3, #3
 80115b4:	e009      	b.n	80115ca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80115b6:	887a      	ldrh	r2, [r7, #2]
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	4613      	mov	r3, r2
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	68b9      	ldr	r1, [r7, #8]
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f000 f810 	bl	80115e8 <udp_sendto_if>
 80115c8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3718      	adds	r7, #24
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	08018e54 	.word	0x08018e54
 80115d8:	08018f78 	.word	0x08018f78
 80115dc:	08018ea8 	.word	0x08018ea8
 80115e0:	08018f90 	.word	0x08018f90
 80115e4:	08018fac 	.word	0x08018fac

080115e8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b088      	sub	sp, #32
 80115ec:	af02      	add	r7, sp, #8
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	607a      	str	r2, [r7, #4]
 80115f4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d109      	bne.n	8011610 <udp_sendto_if+0x28>
 80115fc:	4b2e      	ldr	r3, [pc, #184]	; (80116b8 <udp_sendto_if+0xd0>)
 80115fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011602:	492e      	ldr	r1, [pc, #184]	; (80116bc <udp_sendto_if+0xd4>)
 8011604:	482e      	ldr	r0, [pc, #184]	; (80116c0 <udp_sendto_if+0xd8>)
 8011606:	f004 f991 	bl	801592c <iprintf>
 801160a:	f06f 030f 	mvn.w	r3, #15
 801160e:	e04f      	b.n	80116b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d109      	bne.n	801162a <udp_sendto_if+0x42>
 8011616:	4b28      	ldr	r3, [pc, #160]	; (80116b8 <udp_sendto_if+0xd0>)
 8011618:	f240 2281 	movw	r2, #641	; 0x281
 801161c:	4929      	ldr	r1, [pc, #164]	; (80116c4 <udp_sendto_if+0xdc>)
 801161e:	4828      	ldr	r0, [pc, #160]	; (80116c0 <udp_sendto_if+0xd8>)
 8011620:	f004 f984 	bl	801592c <iprintf>
 8011624:	f06f 030f 	mvn.w	r3, #15
 8011628:	e042      	b.n	80116b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d109      	bne.n	8011644 <udp_sendto_if+0x5c>
 8011630:	4b21      	ldr	r3, [pc, #132]	; (80116b8 <udp_sendto_if+0xd0>)
 8011632:	f240 2282 	movw	r2, #642	; 0x282
 8011636:	4924      	ldr	r1, [pc, #144]	; (80116c8 <udp_sendto_if+0xe0>)
 8011638:	4821      	ldr	r0, [pc, #132]	; (80116c0 <udp_sendto_if+0xd8>)
 801163a:	f004 f977 	bl	801592c <iprintf>
 801163e:	f06f 030f 	mvn.w	r3, #15
 8011642:	e035      	b.n	80116b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011644:	6a3b      	ldr	r3, [r7, #32]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d109      	bne.n	801165e <udp_sendto_if+0x76>
 801164a:	4b1b      	ldr	r3, [pc, #108]	; (80116b8 <udp_sendto_if+0xd0>)
 801164c:	f240 2283 	movw	r2, #643	; 0x283
 8011650:	491e      	ldr	r1, [pc, #120]	; (80116cc <udp_sendto_if+0xe4>)
 8011652:	481b      	ldr	r0, [pc, #108]	; (80116c0 <udp_sendto_if+0xd8>)
 8011654:	f004 f96a 	bl	801592c <iprintf>
 8011658:	f06f 030f 	mvn.w	r3, #15
 801165c:	e028      	b.n	80116b0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d009      	beq.n	8011678 <udp_sendto_if+0x90>
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d005      	beq.n	8011678 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011674:	2be0      	cmp	r3, #224	; 0xe0
 8011676:	d103      	bne.n	8011680 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011678:	6a3b      	ldr	r3, [r7, #32]
 801167a:	3304      	adds	r3, #4
 801167c:	617b      	str	r3, [r7, #20]
 801167e:	e00b      	b.n	8011698 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	6a3b      	ldr	r3, [r7, #32]
 8011686:	3304      	adds	r3, #4
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	429a      	cmp	r2, r3
 801168c:	d002      	beq.n	8011694 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801168e:	f06f 0303 	mvn.w	r3, #3
 8011692:	e00d      	b.n	80116b0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011698:	887a      	ldrh	r2, [r7, #2]
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	9301      	str	r3, [sp, #4]
 801169e:	6a3b      	ldr	r3, [r7, #32]
 80116a0:	9300      	str	r3, [sp, #0]
 80116a2:	4613      	mov	r3, r2
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	68b9      	ldr	r1, [r7, #8]
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f000 f811 	bl	80116d0 <udp_sendto_if_src>
 80116ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3718      	adds	r7, #24
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	08018e54 	.word	0x08018e54
 80116bc:	08018fc8 	.word	0x08018fc8
 80116c0:	08018ea8 	.word	0x08018ea8
 80116c4:	08018fe4 	.word	0x08018fe4
 80116c8:	08019000 	.word	0x08019000
 80116cc:	08019020 	.word	0x08019020

080116d0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b08c      	sub	sp, #48	; 0x30
 80116d4:	af04      	add	r7, sp, #16
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
 80116dc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d109      	bne.n	80116f8 <udp_sendto_if_src+0x28>
 80116e4:	4b65      	ldr	r3, [pc, #404]	; (801187c <udp_sendto_if_src+0x1ac>)
 80116e6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80116ea:	4965      	ldr	r1, [pc, #404]	; (8011880 <udp_sendto_if_src+0x1b0>)
 80116ec:	4865      	ldr	r0, [pc, #404]	; (8011884 <udp_sendto_if_src+0x1b4>)
 80116ee:	f004 f91d 	bl	801592c <iprintf>
 80116f2:	f06f 030f 	mvn.w	r3, #15
 80116f6:	e0bc      	b.n	8011872 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d109      	bne.n	8011712 <udp_sendto_if_src+0x42>
 80116fe:	4b5f      	ldr	r3, [pc, #380]	; (801187c <udp_sendto_if_src+0x1ac>)
 8011700:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011704:	4960      	ldr	r1, [pc, #384]	; (8011888 <udp_sendto_if_src+0x1b8>)
 8011706:	485f      	ldr	r0, [pc, #380]	; (8011884 <udp_sendto_if_src+0x1b4>)
 8011708:	f004 f910 	bl	801592c <iprintf>
 801170c:	f06f 030f 	mvn.w	r3, #15
 8011710:	e0af      	b.n	8011872 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d109      	bne.n	801172c <udp_sendto_if_src+0x5c>
 8011718:	4b58      	ldr	r3, [pc, #352]	; (801187c <udp_sendto_if_src+0x1ac>)
 801171a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801171e:	495b      	ldr	r1, [pc, #364]	; (801188c <udp_sendto_if_src+0x1bc>)
 8011720:	4858      	ldr	r0, [pc, #352]	; (8011884 <udp_sendto_if_src+0x1b4>)
 8011722:	f004 f903 	bl	801592c <iprintf>
 8011726:	f06f 030f 	mvn.w	r3, #15
 801172a:	e0a2      	b.n	8011872 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172e:	2b00      	cmp	r3, #0
 8011730:	d109      	bne.n	8011746 <udp_sendto_if_src+0x76>
 8011732:	4b52      	ldr	r3, [pc, #328]	; (801187c <udp_sendto_if_src+0x1ac>)
 8011734:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011738:	4955      	ldr	r1, [pc, #340]	; (8011890 <udp_sendto_if_src+0x1c0>)
 801173a:	4852      	ldr	r0, [pc, #328]	; (8011884 <udp_sendto_if_src+0x1b4>)
 801173c:	f004 f8f6 	bl	801592c <iprintf>
 8011740:	f06f 030f 	mvn.w	r3, #15
 8011744:	e095      	b.n	8011872 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011748:	2b00      	cmp	r3, #0
 801174a:	d109      	bne.n	8011760 <udp_sendto_if_src+0x90>
 801174c:	4b4b      	ldr	r3, [pc, #300]	; (801187c <udp_sendto_if_src+0x1ac>)
 801174e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011752:	4950      	ldr	r1, [pc, #320]	; (8011894 <udp_sendto_if_src+0x1c4>)
 8011754:	484b      	ldr	r0, [pc, #300]	; (8011884 <udp_sendto_if_src+0x1b4>)
 8011756:	f004 f8e9 	bl	801592c <iprintf>
 801175a:	f06f 030f 	mvn.w	r3, #15
 801175e:	e088      	b.n	8011872 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	8a5b      	ldrh	r3, [r3, #18]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d10f      	bne.n	8011788 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011768:	68f9      	ldr	r1, [r7, #12]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	8a5b      	ldrh	r3, [r3, #18]
 801176e:	461a      	mov	r2, r3
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	f000 f893 	bl	801189c <udp_bind>
 8011776:	4603      	mov	r3, r0
 8011778:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801177a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d002      	beq.n	8011788 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011782:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011786:	e074      	b.n	8011872 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	891b      	ldrh	r3, [r3, #8]
 801178c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011790:	4293      	cmp	r3, r2
 8011792:	d902      	bls.n	801179a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011794:	f04f 33ff 	mov.w	r3, #4294967295
 8011798:	e06b      	b.n	8011872 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801179a:	2108      	movs	r1, #8
 801179c:	68b8      	ldr	r0, [r7, #8]
 801179e:	f7f9 fdc7 	bl	800b330 <pbuf_add_header>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d015      	beq.n	80117d4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80117a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117ac:	2108      	movs	r1, #8
 80117ae:	2022      	movs	r0, #34	; 0x22
 80117b0:	f7f9 fb70 	bl	800ae94 <pbuf_alloc>
 80117b4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d102      	bne.n	80117c2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80117bc:	f04f 33ff 	mov.w	r3, #4294967295
 80117c0:	e057      	b.n	8011872 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	891b      	ldrh	r3, [r3, #8]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d006      	beq.n	80117d8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80117ca:	68b9      	ldr	r1, [r7, #8]
 80117cc:	69f8      	ldr	r0, [r7, #28]
 80117ce:	f7f9 ff69 	bl	800b6a4 <pbuf_chain>
 80117d2:	e001      	b.n	80117d8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	895b      	ldrh	r3, [r3, #10]
 80117dc:	2b07      	cmp	r3, #7
 80117de:	d806      	bhi.n	80117ee <udp_sendto_if_src+0x11e>
 80117e0:	4b26      	ldr	r3, [pc, #152]	; (801187c <udp_sendto_if_src+0x1ac>)
 80117e2:	f240 320d 	movw	r2, #781	; 0x30d
 80117e6:	492c      	ldr	r1, [pc, #176]	; (8011898 <udp_sendto_if_src+0x1c8>)
 80117e8:	4826      	ldr	r0, [pc, #152]	; (8011884 <udp_sendto_if_src+0x1b4>)
 80117ea:	f004 f89f 	bl	801592c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	8a5b      	ldrh	r3, [r3, #18]
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7f8 fa3d 	bl	8009c78 <lwip_htons>
 80117fe:	4603      	mov	r3, r0
 8011800:	461a      	mov	r2, r3
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011806:	887b      	ldrh	r3, [r7, #2]
 8011808:	4618      	mov	r0, r3
 801180a:	f7f8 fa35 	bl	8009c78 <lwip_htons>
 801180e:	4603      	mov	r3, r0
 8011810:	461a      	mov	r2, r3
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	2200      	movs	r2, #0
 801181a:	719a      	strb	r2, [r3, #6]
 801181c:	2200      	movs	r2, #0
 801181e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	891b      	ldrh	r3, [r3, #8]
 8011824:	4618      	mov	r0, r3
 8011826:	f7f8 fa27 	bl	8009c78 <lwip_htons>
 801182a:	4603      	mov	r3, r0
 801182c:	461a      	mov	r2, r3
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011832:	2311      	movs	r3, #17
 8011834:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	7adb      	ldrb	r3, [r3, #11]
 801183a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	7a9b      	ldrb	r3, [r3, #10]
 8011840:	7cb9      	ldrb	r1, [r7, #18]
 8011842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011844:	9202      	str	r2, [sp, #8]
 8011846:	7cfa      	ldrb	r2, [r7, #19]
 8011848:	9201      	str	r2, [sp, #4]
 801184a:	9300      	str	r3, [sp, #0]
 801184c:	460b      	mov	r3, r1
 801184e:	687a      	ldr	r2, [r7, #4]
 8011850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011852:	69f8      	ldr	r0, [r7, #28]
 8011854:	f001 fc22 	bl	801309c <ip4_output_if_src>
 8011858:	4603      	mov	r3, r0
 801185a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801185c:	69fa      	ldr	r2, [r7, #28]
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	429a      	cmp	r2, r3
 8011862:	d004      	beq.n	801186e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011864:	69f8      	ldr	r0, [r7, #28]
 8011866:	f7f9 fdf9 	bl	800b45c <pbuf_free>
    q = NULL;
 801186a:	2300      	movs	r3, #0
 801186c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801186e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011872:	4618      	mov	r0, r3
 8011874:	3720      	adds	r7, #32
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	08018e54 	.word	0x08018e54
 8011880:	08019040 	.word	0x08019040
 8011884:	08018ea8 	.word	0x08018ea8
 8011888:	08019060 	.word	0x08019060
 801188c:	08019080 	.word	0x08019080
 8011890:	080190a4 	.word	0x080190a4
 8011894:	080190c8 	.word	0x080190c8
 8011898:	080190ec 	.word	0x080190ec

0801189c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b086      	sub	sp, #24
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	4613      	mov	r3, r2
 80118a8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d101      	bne.n	80118b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80118b0:	4b39      	ldr	r3, [pc, #228]	; (8011998 <udp_bind+0xfc>)
 80118b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d109      	bne.n	80118ce <udp_bind+0x32>
 80118ba:	4b38      	ldr	r3, [pc, #224]	; (801199c <udp_bind+0x100>)
 80118bc:	f240 32b7 	movw	r2, #951	; 0x3b7
 80118c0:	4937      	ldr	r1, [pc, #220]	; (80119a0 <udp_bind+0x104>)
 80118c2:	4838      	ldr	r0, [pc, #224]	; (80119a4 <udp_bind+0x108>)
 80118c4:	f004 f832 	bl	801592c <iprintf>
 80118c8:	f06f 030f 	mvn.w	r3, #15
 80118cc:	e060      	b.n	8011990 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80118d2:	4b35      	ldr	r3, [pc, #212]	; (80119a8 <udp_bind+0x10c>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	617b      	str	r3, [r7, #20]
 80118d8:	e009      	b.n	80118ee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d102      	bne.n	80118e8 <udp_bind+0x4c>
      rebind = 1;
 80118e2:	2301      	movs	r3, #1
 80118e4:	74fb      	strb	r3, [r7, #19]
      break;
 80118e6:	e005      	b.n	80118f4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	617b      	str	r3, [r7, #20]
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1f2      	bne.n	80118da <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80118f4:	88fb      	ldrh	r3, [r7, #6]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d109      	bne.n	801190e <udp_bind+0x72>
    port = udp_new_port();
 80118fa:	f7ff fc69 	bl	80111d0 <udp_new_port>
 80118fe:	4603      	mov	r3, r0
 8011900:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011902:	88fb      	ldrh	r3, [r7, #6]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d12c      	bne.n	8011962 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011908:	f06f 0307 	mvn.w	r3, #7
 801190c:	e040      	b.n	8011990 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801190e:	4b26      	ldr	r3, [pc, #152]	; (80119a8 <udp_bind+0x10c>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	617b      	str	r3, [r7, #20]
 8011914:	e022      	b.n	801195c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011916:	68fa      	ldr	r2, [r7, #12]
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	429a      	cmp	r2, r3
 801191c:	d01b      	beq.n	8011956 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	8a5b      	ldrh	r3, [r3, #18]
 8011922:	88fa      	ldrh	r2, [r7, #6]
 8011924:	429a      	cmp	r2, r3
 8011926:	d116      	bne.n	8011956 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011930:	429a      	cmp	r2, r3
 8011932:	d00d      	beq.n	8011950 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d00a      	beq.n	8011950 <udp_bind+0xb4>
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d006      	beq.n	8011950 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011942:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011944:	2b00      	cmp	r3, #0
 8011946:	d003      	beq.n	8011950 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d102      	bne.n	8011956 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011950:	f06f 0307 	mvn.w	r3, #7
 8011954:	e01c      	b.n	8011990 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	68db      	ldr	r3, [r3, #12]
 801195a:	617b      	str	r3, [r7, #20]
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1d9      	bne.n	8011916 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d002      	beq.n	801196e <udp_bind+0xd2>
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	e000      	b.n	8011970 <udp_bind+0xd4>
 801196e:	2300      	movs	r3, #0
 8011970:	68fa      	ldr	r2, [r7, #12]
 8011972:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	88fa      	ldrh	r2, [r7, #6]
 8011978:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801197a:	7cfb      	ldrb	r3, [r7, #19]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d106      	bne.n	801198e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011980:	4b09      	ldr	r3, [pc, #36]	; (80119a8 <udp_bind+0x10c>)
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011988:	4a07      	ldr	r2, [pc, #28]	; (80119a8 <udp_bind+0x10c>)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801198e:	2300      	movs	r3, #0
}
 8011990:	4618      	mov	r0, r3
 8011992:	3718      	adds	r7, #24
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	08019cb8 	.word	0x08019cb8
 801199c:	08018e54 	.word	0x08018e54
 80119a0:	0801911c 	.word	0x0801911c
 80119a4:	08018ea8 	.word	0x08018ea8
 80119a8:	2002e6a4 	.word	0x2002e6a4

080119ac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d107      	bne.n	80119ce <udp_recv+0x22>
 80119be:	4b08      	ldr	r3, [pc, #32]	; (80119e0 <udp_recv+0x34>)
 80119c0:	f240 428a 	movw	r2, #1162	; 0x48a
 80119c4:	4907      	ldr	r1, [pc, #28]	; (80119e4 <udp_recv+0x38>)
 80119c6:	4808      	ldr	r0, [pc, #32]	; (80119e8 <udp_recv+0x3c>)
 80119c8:	f003 ffb0 	bl	801592c <iprintf>
 80119cc:	e005      	b.n	80119da <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	61da      	str	r2, [r3, #28]
}
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	08018e54 	.word	0x08018e54
 80119e4:	08019188 	.word	0x08019188
 80119e8:	08018ea8 	.word	0x08018ea8

080119ec <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d107      	bne.n	8011a0a <udp_remove+0x1e>
 80119fa:	4b19      	ldr	r3, [pc, #100]	; (8011a60 <udp_remove+0x74>)
 80119fc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011a00:	4918      	ldr	r1, [pc, #96]	; (8011a64 <udp_remove+0x78>)
 8011a02:	4819      	ldr	r0, [pc, #100]	; (8011a68 <udp_remove+0x7c>)
 8011a04:	f003 ff92 	bl	801592c <iprintf>
 8011a08:	e026      	b.n	8011a58 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011a0a:	4b18      	ldr	r3, [pc, #96]	; (8011a6c <udp_remove+0x80>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d105      	bne.n	8011a20 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011a14:	4b15      	ldr	r3, [pc, #84]	; (8011a6c <udp_remove+0x80>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	4a14      	ldr	r2, [pc, #80]	; (8011a6c <udp_remove+0x80>)
 8011a1c:	6013      	str	r3, [r2, #0]
 8011a1e:	e017      	b.n	8011a50 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011a20:	4b12      	ldr	r3, [pc, #72]	; (8011a6c <udp_remove+0x80>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	60fb      	str	r3, [r7, #12]
 8011a26:	e010      	b.n	8011a4a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d009      	beq.n	8011a44 <udp_remove+0x58>
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d104      	bne.n	8011a44 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	68da      	ldr	r2, [r3, #12]
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	60da      	str	r2, [r3, #12]
        break;
 8011a42:	e005      	b.n	8011a50 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	68db      	ldr	r3, [r3, #12]
 8011a48:	60fb      	str	r3, [r7, #12]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1eb      	bne.n	8011a28 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011a50:	6879      	ldr	r1, [r7, #4]
 8011a52:	2000      	movs	r0, #0
 8011a54:	f7f8 fe5e 	bl	800a714 <memp_free>
}
 8011a58:	3710      	adds	r7, #16
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	08018e54 	.word	0x08018e54
 8011a64:	080191a0 	.word	0x080191a0
 8011a68:	08018ea8 	.word	0x08018ea8
 8011a6c:	2002e6a4 	.word	0x2002e6a4

08011a70 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011a76:	2000      	movs	r0, #0
 8011a78:	f7f8 fdd6 	bl	800a628 <memp_malloc>
 8011a7c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d007      	beq.n	8011a94 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011a84:	2220      	movs	r2, #32
 8011a86:	2100      	movs	r1, #0
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f003 fe55 	bl	8015738 <memset>
    pcb->ttl = UDP_TTL;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	22ff      	movs	r2, #255	; 0xff
 8011a92:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011a94:	687b      	ldr	r3, [r7, #4]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8011aa8:	f7ff ffe2 	bl	8011a70 <udp_new>
 8011aac:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011aae:	68fb      	ldr	r3, [r7, #12]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3710      	adds	r7, #16
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b085      	sub	sp, #20
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d01e      	beq.n	8011b06 <udp_netif_ip_addr_changed+0x4e>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d01a      	beq.n	8011b06 <udp_netif_ip_addr_changed+0x4e>
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d017      	beq.n	8011b06 <udp_netif_ip_addr_changed+0x4e>
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d013      	beq.n	8011b06 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ade:	4b0d      	ldr	r3, [pc, #52]	; (8011b14 <udp_netif_ip_addr_changed+0x5c>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	60fb      	str	r3, [r7, #12]
 8011ae4:	e00c      	b.n	8011b00 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681a      	ldr	r2, [r3, #0]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d103      	bne.n	8011afa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	60fb      	str	r3, [r7, #12]
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d1ef      	bne.n	8011ae6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011b06:	bf00      	nop
 8011b08:	3714      	adds	r7, #20
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop
 8011b14:	2002e6a4 	.word	0x2002e6a4

08011b18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011b20:	4915      	ldr	r1, [pc, #84]	; (8011b78 <etharp_free_entry+0x60>)
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	4613      	mov	r3, r2
 8011b26:	005b      	lsls	r3, r3, #1
 8011b28:	4413      	add	r3, r2
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	440b      	add	r3, r1
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d013      	beq.n	8011b5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011b34:	4910      	ldr	r1, [pc, #64]	; (8011b78 <etharp_free_entry+0x60>)
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	4613      	mov	r3, r2
 8011b3a:	005b      	lsls	r3, r3, #1
 8011b3c:	4413      	add	r3, r2
 8011b3e:	00db      	lsls	r3, r3, #3
 8011b40:	440b      	add	r3, r1
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7f9 fc89 	bl	800b45c <pbuf_free>
    arp_table[i].q = NULL;
 8011b4a:	490b      	ldr	r1, [pc, #44]	; (8011b78 <etharp_free_entry+0x60>)
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	4613      	mov	r3, r2
 8011b50:	005b      	lsls	r3, r3, #1
 8011b52:	4413      	add	r3, r2
 8011b54:	00db      	lsls	r3, r3, #3
 8011b56:	440b      	add	r3, r1
 8011b58:	2200      	movs	r2, #0
 8011b5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011b5c:	4906      	ldr	r1, [pc, #24]	; (8011b78 <etharp_free_entry+0x60>)
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	4613      	mov	r3, r2
 8011b62:	005b      	lsls	r3, r3, #1
 8011b64:	4413      	add	r3, r2
 8011b66:	00db      	lsls	r3, r3, #3
 8011b68:	440b      	add	r3, r1
 8011b6a:	3314      	adds	r3, #20
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011b70:	bf00      	nop
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	2002e6a8 	.word	0x2002e6a8

08011b7c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b82:	2300      	movs	r3, #0
 8011b84:	607b      	str	r3, [r7, #4]
 8011b86:	e096      	b.n	8011cb6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011b88:	494f      	ldr	r1, [pc, #316]	; (8011cc8 <etharp_tmr+0x14c>)
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	005b      	lsls	r3, r3, #1
 8011b90:	4413      	add	r3, r2
 8011b92:	00db      	lsls	r3, r3, #3
 8011b94:	440b      	add	r3, r1
 8011b96:	3314      	adds	r3, #20
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011b9c:	78fb      	ldrb	r3, [r7, #3]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f000 8086 	beq.w	8011cb0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011ba4:	4948      	ldr	r1, [pc, #288]	; (8011cc8 <etharp_tmr+0x14c>)
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	4613      	mov	r3, r2
 8011baa:	005b      	lsls	r3, r3, #1
 8011bac:	4413      	add	r3, r2
 8011bae:	00db      	lsls	r3, r3, #3
 8011bb0:	440b      	add	r3, r1
 8011bb2:	3312      	adds	r3, #18
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	b298      	uxth	r0, r3
 8011bba:	4943      	ldr	r1, [pc, #268]	; (8011cc8 <etharp_tmr+0x14c>)
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	005b      	lsls	r3, r3, #1
 8011bc2:	4413      	add	r3, r2
 8011bc4:	00db      	lsls	r3, r3, #3
 8011bc6:	440b      	add	r3, r1
 8011bc8:	3312      	adds	r3, #18
 8011bca:	4602      	mov	r2, r0
 8011bcc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011bce:	493e      	ldr	r1, [pc, #248]	; (8011cc8 <etharp_tmr+0x14c>)
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	4613      	mov	r3, r2
 8011bd4:	005b      	lsls	r3, r3, #1
 8011bd6:	4413      	add	r3, r2
 8011bd8:	00db      	lsls	r3, r3, #3
 8011bda:	440b      	add	r3, r1
 8011bdc:	3312      	adds	r3, #18
 8011bde:	881b      	ldrh	r3, [r3, #0]
 8011be0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011be4:	d215      	bcs.n	8011c12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011be6:	4938      	ldr	r1, [pc, #224]	; (8011cc8 <etharp_tmr+0x14c>)
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	4613      	mov	r3, r2
 8011bec:	005b      	lsls	r3, r3, #1
 8011bee:	4413      	add	r3, r2
 8011bf0:	00db      	lsls	r3, r3, #3
 8011bf2:	440b      	add	r3, r1
 8011bf4:	3314      	adds	r3, #20
 8011bf6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d10e      	bne.n	8011c1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011bfc:	4932      	ldr	r1, [pc, #200]	; (8011cc8 <etharp_tmr+0x14c>)
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	4613      	mov	r3, r2
 8011c02:	005b      	lsls	r3, r3, #1
 8011c04:	4413      	add	r3, r2
 8011c06:	00db      	lsls	r3, r3, #3
 8011c08:	440b      	add	r3, r1
 8011c0a:	3312      	adds	r3, #18
 8011c0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011c0e:	2b04      	cmp	r3, #4
 8011c10:	d903      	bls.n	8011c1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f7ff ff80 	bl	8011b18 <etharp_free_entry>
 8011c18:	e04a      	b.n	8011cb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011c1a:	492b      	ldr	r1, [pc, #172]	; (8011cc8 <etharp_tmr+0x14c>)
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	005b      	lsls	r3, r3, #1
 8011c22:	4413      	add	r3, r2
 8011c24:	00db      	lsls	r3, r3, #3
 8011c26:	440b      	add	r3, r1
 8011c28:	3314      	adds	r3, #20
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	2b03      	cmp	r3, #3
 8011c2e:	d10a      	bne.n	8011c46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011c30:	4925      	ldr	r1, [pc, #148]	; (8011cc8 <etharp_tmr+0x14c>)
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	4613      	mov	r3, r2
 8011c36:	005b      	lsls	r3, r3, #1
 8011c38:	4413      	add	r3, r2
 8011c3a:	00db      	lsls	r3, r3, #3
 8011c3c:	440b      	add	r3, r1
 8011c3e:	3314      	adds	r3, #20
 8011c40:	2204      	movs	r2, #4
 8011c42:	701a      	strb	r2, [r3, #0]
 8011c44:	e034      	b.n	8011cb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011c46:	4920      	ldr	r1, [pc, #128]	; (8011cc8 <etharp_tmr+0x14c>)
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	005b      	lsls	r3, r3, #1
 8011c4e:	4413      	add	r3, r2
 8011c50:	00db      	lsls	r3, r3, #3
 8011c52:	440b      	add	r3, r1
 8011c54:	3314      	adds	r3, #20
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b04      	cmp	r3, #4
 8011c5a:	d10a      	bne.n	8011c72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011c5c:	491a      	ldr	r1, [pc, #104]	; (8011cc8 <etharp_tmr+0x14c>)
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	4613      	mov	r3, r2
 8011c62:	005b      	lsls	r3, r3, #1
 8011c64:	4413      	add	r3, r2
 8011c66:	00db      	lsls	r3, r3, #3
 8011c68:	440b      	add	r3, r1
 8011c6a:	3314      	adds	r3, #20
 8011c6c:	2202      	movs	r2, #2
 8011c6e:	701a      	strb	r2, [r3, #0]
 8011c70:	e01e      	b.n	8011cb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011c72:	4915      	ldr	r1, [pc, #84]	; (8011cc8 <etharp_tmr+0x14c>)
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	4613      	mov	r3, r2
 8011c78:	005b      	lsls	r3, r3, #1
 8011c7a:	4413      	add	r3, r2
 8011c7c:	00db      	lsls	r3, r3, #3
 8011c7e:	440b      	add	r3, r1
 8011c80:	3314      	adds	r3, #20
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d113      	bne.n	8011cb0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011c88:	490f      	ldr	r1, [pc, #60]	; (8011cc8 <etharp_tmr+0x14c>)
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	4613      	mov	r3, r2
 8011c8e:	005b      	lsls	r3, r3, #1
 8011c90:	4413      	add	r3, r2
 8011c92:	00db      	lsls	r3, r3, #3
 8011c94:	440b      	add	r3, r1
 8011c96:	3308      	adds	r3, #8
 8011c98:	6818      	ldr	r0, [r3, #0]
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	4613      	mov	r3, r2
 8011c9e:	005b      	lsls	r3, r3, #1
 8011ca0:	4413      	add	r3, r2
 8011ca2:	00db      	lsls	r3, r3, #3
 8011ca4:	4a08      	ldr	r2, [pc, #32]	; (8011cc8 <etharp_tmr+0x14c>)
 8011ca6:	4413      	add	r3, r2
 8011ca8:	3304      	adds	r3, #4
 8011caa:	4619      	mov	r1, r3
 8011cac:	f000 fe6e 	bl	801298c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	607b      	str	r3, [r7, #4]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2b09      	cmp	r3, #9
 8011cba:	f77f af65 	ble.w	8011b88 <etharp_tmr+0xc>
      }
    }
  }
}
 8011cbe:	bf00      	nop
 8011cc0:	bf00      	nop
 8011cc2:	3708      	adds	r7, #8
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	2002e6a8 	.word	0x2002e6a8

08011ccc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b08a      	sub	sp, #40	; 0x28
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	607a      	str	r2, [r7, #4]
 8011cd8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011cda:	230a      	movs	r3, #10
 8011cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011cde:	230a      	movs	r3, #10
 8011ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011ce2:	230a      	movs	r3, #10
 8011ce4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011cea:	230a      	movs	r3, #10
 8011cec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	83bb      	strh	r3, [r7, #28]
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	837b      	strh	r3, [r7, #26]
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	843b      	strh	r3, [r7, #32]
 8011cfe:	e0ae      	b.n	8011e5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011d00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d04:	49a6      	ldr	r1, [pc, #664]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011d06:	4613      	mov	r3, r2
 8011d08:	005b      	lsls	r3, r3, #1
 8011d0a:	4413      	add	r3, r2
 8011d0c:	00db      	lsls	r3, r3, #3
 8011d0e:	440b      	add	r3, r1
 8011d10:	3314      	adds	r3, #20
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011d16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011d1a:	2b0a      	cmp	r3, #10
 8011d1c:	d105      	bne.n	8011d2a <etharp_find_entry+0x5e>
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d102      	bne.n	8011d2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011d24:	8c3b      	ldrh	r3, [r7, #32]
 8011d26:	847b      	strh	r3, [r7, #34]	; 0x22
 8011d28:	e095      	b.n	8011e56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011d2a:	7dfb      	ldrb	r3, [r7, #23]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f000 8092 	beq.w	8011e56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011d32:	7dfb      	ldrb	r3, [r7, #23]
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	d009      	beq.n	8011d4c <etharp_find_entry+0x80>
 8011d38:	7dfb      	ldrb	r3, [r7, #23]
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d806      	bhi.n	8011d4c <etharp_find_entry+0x80>
 8011d3e:	4b99      	ldr	r3, [pc, #612]	; (8011fa4 <etharp_find_entry+0x2d8>)
 8011d40:	f240 1223 	movw	r2, #291	; 0x123
 8011d44:	4998      	ldr	r1, [pc, #608]	; (8011fa8 <etharp_find_entry+0x2dc>)
 8011d46:	4899      	ldr	r0, [pc, #612]	; (8011fac <etharp_find_entry+0x2e0>)
 8011d48:	f003 fdf0 	bl	801592c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d020      	beq.n	8011d94 <etharp_find_entry+0xc8>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	6819      	ldr	r1, [r3, #0]
 8011d56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d5a:	4891      	ldr	r0, [pc, #580]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	005b      	lsls	r3, r3, #1
 8011d60:	4413      	add	r3, r2
 8011d62:	00db      	lsls	r3, r3, #3
 8011d64:	4403      	add	r3, r0
 8011d66:	3304      	adds	r3, #4
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	4299      	cmp	r1, r3
 8011d6c:	d112      	bne.n	8011d94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00c      	beq.n	8011d8e <etharp_find_entry+0xc2>
 8011d74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d78:	4989      	ldr	r1, [pc, #548]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	005b      	lsls	r3, r3, #1
 8011d7e:	4413      	add	r3, r2
 8011d80:	00db      	lsls	r3, r3, #3
 8011d82:	440b      	add	r3, r1
 8011d84:	3308      	adds	r3, #8
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d102      	bne.n	8011d94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011d8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011d92:	e100      	b.n	8011f96 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011d94:	7dfb      	ldrb	r3, [r7, #23]
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d140      	bne.n	8011e1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011d9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d9e:	4980      	ldr	r1, [pc, #512]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011da0:	4613      	mov	r3, r2
 8011da2:	005b      	lsls	r3, r3, #1
 8011da4:	4413      	add	r3, r2
 8011da6:	00db      	lsls	r3, r3, #3
 8011da8:	440b      	add	r3, r1
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d01a      	beq.n	8011de6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011db0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011db4:	497a      	ldr	r1, [pc, #488]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011db6:	4613      	mov	r3, r2
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	4413      	add	r3, r2
 8011dbc:	00db      	lsls	r3, r3, #3
 8011dbe:	440b      	add	r3, r1
 8011dc0:	3312      	adds	r3, #18
 8011dc2:	881b      	ldrh	r3, [r3, #0]
 8011dc4:	8bba      	ldrh	r2, [r7, #28]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d845      	bhi.n	8011e56 <etharp_find_entry+0x18a>
            old_queue = i;
 8011dca:	8c3b      	ldrh	r3, [r7, #32]
 8011dcc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011dce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011dd2:	4973      	ldr	r1, [pc, #460]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	005b      	lsls	r3, r3, #1
 8011dd8:	4413      	add	r3, r2
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	440b      	add	r3, r1
 8011dde:	3312      	adds	r3, #18
 8011de0:	881b      	ldrh	r3, [r3, #0]
 8011de2:	83bb      	strh	r3, [r7, #28]
 8011de4:	e037      	b.n	8011e56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011de6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011dea:	496d      	ldr	r1, [pc, #436]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011dec:	4613      	mov	r3, r2
 8011dee:	005b      	lsls	r3, r3, #1
 8011df0:	4413      	add	r3, r2
 8011df2:	00db      	lsls	r3, r3, #3
 8011df4:	440b      	add	r3, r1
 8011df6:	3312      	adds	r3, #18
 8011df8:	881b      	ldrh	r3, [r3, #0]
 8011dfa:	8b7a      	ldrh	r2, [r7, #26]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d82a      	bhi.n	8011e56 <etharp_find_entry+0x18a>
            old_pending = i;
 8011e00:	8c3b      	ldrh	r3, [r7, #32]
 8011e02:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011e04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e08:	4965      	ldr	r1, [pc, #404]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	005b      	lsls	r3, r3, #1
 8011e0e:	4413      	add	r3, r2
 8011e10:	00db      	lsls	r3, r3, #3
 8011e12:	440b      	add	r3, r1
 8011e14:	3312      	adds	r3, #18
 8011e16:	881b      	ldrh	r3, [r3, #0]
 8011e18:	837b      	strh	r3, [r7, #26]
 8011e1a:	e01c      	b.n	8011e56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011e1c:	7dfb      	ldrb	r3, [r7, #23]
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d919      	bls.n	8011e56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011e22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e26:	495e      	ldr	r1, [pc, #376]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011e28:	4613      	mov	r3, r2
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	4413      	add	r3, r2
 8011e2e:	00db      	lsls	r3, r3, #3
 8011e30:	440b      	add	r3, r1
 8011e32:	3312      	adds	r3, #18
 8011e34:	881b      	ldrh	r3, [r3, #0]
 8011e36:	8b3a      	ldrh	r2, [r7, #24]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d80c      	bhi.n	8011e56 <etharp_find_entry+0x18a>
            old_stable = i;
 8011e3c:	8c3b      	ldrh	r3, [r7, #32]
 8011e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011e40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e44:	4956      	ldr	r1, [pc, #344]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011e46:	4613      	mov	r3, r2
 8011e48:	005b      	lsls	r3, r3, #1
 8011e4a:	4413      	add	r3, r2
 8011e4c:	00db      	lsls	r3, r3, #3
 8011e4e:	440b      	add	r3, r1
 8011e50:	3312      	adds	r3, #18
 8011e52:	881b      	ldrh	r3, [r3, #0]
 8011e54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e56:	8c3b      	ldrh	r3, [r7, #32]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	843b      	strh	r3, [r7, #32]
 8011e5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011e62:	2b09      	cmp	r3, #9
 8011e64:	f77f af4c 	ble.w	8011d00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011e68:	7afb      	ldrb	r3, [r7, #11]
 8011e6a:	f003 0302 	and.w	r3, r3, #2
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d108      	bne.n	8011e84 <etharp_find_entry+0x1b8>
 8011e72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011e76:	2b0a      	cmp	r3, #10
 8011e78:	d107      	bne.n	8011e8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011e7a:	7afb      	ldrb	r3, [r7, #11]
 8011e7c:	f003 0301 	and.w	r3, r3, #1
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d102      	bne.n	8011e8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011e84:	f04f 33ff 	mov.w	r3, #4294967295
 8011e88:	e085      	b.n	8011f96 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011e8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011e8e:	2b09      	cmp	r3, #9
 8011e90:	dc02      	bgt.n	8011e98 <etharp_find_entry+0x1cc>
    i = empty;
 8011e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e94:	843b      	strh	r3, [r7, #32]
 8011e96:	e039      	b.n	8011f0c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011e98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011e9c:	2b09      	cmp	r3, #9
 8011e9e:	dc14      	bgt.n	8011eca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ea2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011ea4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ea8:	493d      	ldr	r1, [pc, #244]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011eaa:	4613      	mov	r3, r2
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	4413      	add	r3, r2
 8011eb0:	00db      	lsls	r3, r3, #3
 8011eb2:	440b      	add	r3, r1
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d018      	beq.n	8011eec <etharp_find_entry+0x220>
 8011eba:	4b3a      	ldr	r3, [pc, #232]	; (8011fa4 <etharp_find_entry+0x2d8>)
 8011ebc:	f240 126d 	movw	r2, #365	; 0x16d
 8011ec0:	493b      	ldr	r1, [pc, #236]	; (8011fb0 <etharp_find_entry+0x2e4>)
 8011ec2:	483a      	ldr	r0, [pc, #232]	; (8011fac <etharp_find_entry+0x2e0>)
 8011ec4:	f003 fd32 	bl	801592c <iprintf>
 8011ec8:	e010      	b.n	8011eec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011eca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011ece:	2b09      	cmp	r3, #9
 8011ed0:	dc02      	bgt.n	8011ed8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011ed2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ed4:	843b      	strh	r3, [r7, #32]
 8011ed6:	e009      	b.n	8011eec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011ed8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011edc:	2b09      	cmp	r3, #9
 8011ede:	dc02      	bgt.n	8011ee6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011ee0:	8bfb      	ldrh	r3, [r7, #30]
 8011ee2:	843b      	strh	r3, [r7, #32]
 8011ee4:	e002      	b.n	8011eec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8011eea:	e054      	b.n	8011f96 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011eec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ef0:	2b09      	cmp	r3, #9
 8011ef2:	dd06      	ble.n	8011f02 <etharp_find_entry+0x236>
 8011ef4:	4b2b      	ldr	r3, [pc, #172]	; (8011fa4 <etharp_find_entry+0x2d8>)
 8011ef6:	f240 127f 	movw	r2, #383	; 0x17f
 8011efa:	492e      	ldr	r1, [pc, #184]	; (8011fb4 <etharp_find_entry+0x2e8>)
 8011efc:	482b      	ldr	r0, [pc, #172]	; (8011fac <etharp_find_entry+0x2e0>)
 8011efe:	f003 fd15 	bl	801592c <iprintf>
    etharp_free_entry(i);
 8011f02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7ff fe06 	bl	8011b18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011f0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011f10:	2b09      	cmp	r3, #9
 8011f12:	dd06      	ble.n	8011f22 <etharp_find_entry+0x256>
 8011f14:	4b23      	ldr	r3, [pc, #140]	; (8011fa4 <etharp_find_entry+0x2d8>)
 8011f16:	f240 1283 	movw	r2, #387	; 0x183
 8011f1a:	4926      	ldr	r1, [pc, #152]	; (8011fb4 <etharp_find_entry+0x2e8>)
 8011f1c:	4823      	ldr	r0, [pc, #140]	; (8011fac <etharp_find_entry+0x2e0>)
 8011f1e:	f003 fd05 	bl	801592c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011f22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f26:	491e      	ldr	r1, [pc, #120]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011f28:	4613      	mov	r3, r2
 8011f2a:	005b      	lsls	r3, r3, #1
 8011f2c:	4413      	add	r3, r2
 8011f2e:	00db      	lsls	r3, r3, #3
 8011f30:	440b      	add	r3, r1
 8011f32:	3314      	adds	r3, #20
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d006      	beq.n	8011f48 <etharp_find_entry+0x27c>
 8011f3a:	4b1a      	ldr	r3, [pc, #104]	; (8011fa4 <etharp_find_entry+0x2d8>)
 8011f3c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011f40:	491d      	ldr	r1, [pc, #116]	; (8011fb8 <etharp_find_entry+0x2ec>)
 8011f42:	481a      	ldr	r0, [pc, #104]	; (8011fac <etharp_find_entry+0x2e0>)
 8011f44:	f003 fcf2 	bl	801592c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d00b      	beq.n	8011f66 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011f4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	6819      	ldr	r1, [r3, #0]
 8011f56:	4812      	ldr	r0, [pc, #72]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011f58:	4613      	mov	r3, r2
 8011f5a:	005b      	lsls	r3, r3, #1
 8011f5c:	4413      	add	r3, r2
 8011f5e:	00db      	lsls	r3, r3, #3
 8011f60:	4403      	add	r3, r0
 8011f62:	3304      	adds	r3, #4
 8011f64:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011f66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f6a:	490d      	ldr	r1, [pc, #52]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	4413      	add	r3, r2
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	440b      	add	r3, r1
 8011f76:	3312      	adds	r3, #18
 8011f78:	2200      	movs	r2, #0
 8011f7a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011f7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f80:	4907      	ldr	r1, [pc, #28]	; (8011fa0 <etharp_find_entry+0x2d4>)
 8011f82:	4613      	mov	r3, r2
 8011f84:	005b      	lsls	r3, r3, #1
 8011f86:	4413      	add	r3, r2
 8011f88:	00db      	lsls	r3, r3, #3
 8011f8a:	440b      	add	r3, r1
 8011f8c:	3308      	adds	r3, #8
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011f92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3728      	adds	r7, #40	; 0x28
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	2002e6a8 	.word	0x2002e6a8
 8011fa4:	080191b8 	.word	0x080191b8
 8011fa8:	080191f0 	.word	0x080191f0
 8011fac:	08019230 	.word	0x08019230
 8011fb0:	08019258 	.word	0x08019258
 8011fb4:	08019270 	.word	0x08019270
 8011fb8:	08019284 	.word	0x08019284

08011fbc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b088      	sub	sp, #32
 8011fc0:	af02      	add	r7, sp, #8
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
 8011fc8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011fd0:	2b06      	cmp	r3, #6
 8011fd2:	d006      	beq.n	8011fe2 <etharp_update_arp_entry+0x26>
 8011fd4:	4b48      	ldr	r3, [pc, #288]	; (80120f8 <etharp_update_arp_entry+0x13c>)
 8011fd6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011fda:	4948      	ldr	r1, [pc, #288]	; (80120fc <etharp_update_arp_entry+0x140>)
 8011fdc:	4848      	ldr	r0, [pc, #288]	; (8012100 <etharp_update_arp_entry+0x144>)
 8011fde:	f003 fca5 	bl	801592c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d012      	beq.n	801200e <etharp_update_arp_entry+0x52>
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00e      	beq.n	801200e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	68f9      	ldr	r1, [r7, #12]
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f001 f8fe 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 8011ffc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d105      	bne.n	801200e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801200a:	2be0      	cmp	r3, #224	; 0xe0
 801200c:	d102      	bne.n	8012014 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801200e:	f06f 030f 	mvn.w	r3, #15
 8012012:	e06c      	b.n	80120ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012014:	78fb      	ldrb	r3, [r7, #3]
 8012016:	68fa      	ldr	r2, [r7, #12]
 8012018:	4619      	mov	r1, r3
 801201a:	68b8      	ldr	r0, [r7, #8]
 801201c:	f7ff fe56 	bl	8011ccc <etharp_find_entry>
 8012020:	4603      	mov	r3, r0
 8012022:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012024:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012028:	2b00      	cmp	r3, #0
 801202a:	da02      	bge.n	8012032 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801202c:	8afb      	ldrh	r3, [r7, #22]
 801202e:	b25b      	sxtb	r3, r3
 8012030:	e05d      	b.n	80120ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012032:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012036:	4933      	ldr	r1, [pc, #204]	; (8012104 <etharp_update_arp_entry+0x148>)
 8012038:	4613      	mov	r3, r2
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	4413      	add	r3, r2
 801203e:	00db      	lsls	r3, r3, #3
 8012040:	440b      	add	r3, r1
 8012042:	3314      	adds	r3, #20
 8012044:	2202      	movs	r2, #2
 8012046:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012048:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801204c:	492d      	ldr	r1, [pc, #180]	; (8012104 <etharp_update_arp_entry+0x148>)
 801204e:	4613      	mov	r3, r2
 8012050:	005b      	lsls	r3, r3, #1
 8012052:	4413      	add	r3, r2
 8012054:	00db      	lsls	r3, r3, #3
 8012056:	440b      	add	r3, r1
 8012058:	3308      	adds	r3, #8
 801205a:	68fa      	ldr	r2, [r7, #12]
 801205c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801205e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012062:	4613      	mov	r3, r2
 8012064:	005b      	lsls	r3, r3, #1
 8012066:	4413      	add	r3, r2
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	3308      	adds	r3, #8
 801206c:	4a25      	ldr	r2, [pc, #148]	; (8012104 <etharp_update_arp_entry+0x148>)
 801206e:	4413      	add	r3, r2
 8012070:	3304      	adds	r3, #4
 8012072:	2206      	movs	r2, #6
 8012074:	6879      	ldr	r1, [r7, #4]
 8012076:	4618      	mov	r0, r3
 8012078:	f003 fb36 	bl	80156e8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801207c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012080:	4920      	ldr	r1, [pc, #128]	; (8012104 <etharp_update_arp_entry+0x148>)
 8012082:	4613      	mov	r3, r2
 8012084:	005b      	lsls	r3, r3, #1
 8012086:	4413      	add	r3, r2
 8012088:	00db      	lsls	r3, r3, #3
 801208a:	440b      	add	r3, r1
 801208c:	3312      	adds	r3, #18
 801208e:	2200      	movs	r2, #0
 8012090:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012092:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012096:	491b      	ldr	r1, [pc, #108]	; (8012104 <etharp_update_arp_entry+0x148>)
 8012098:	4613      	mov	r3, r2
 801209a:	005b      	lsls	r3, r3, #1
 801209c:	4413      	add	r3, r2
 801209e:	00db      	lsls	r3, r3, #3
 80120a0:	440b      	add	r3, r1
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d021      	beq.n	80120ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80120a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80120ac:	4915      	ldr	r1, [pc, #84]	; (8012104 <etharp_update_arp_entry+0x148>)
 80120ae:	4613      	mov	r3, r2
 80120b0:	005b      	lsls	r3, r3, #1
 80120b2:	4413      	add	r3, r2
 80120b4:	00db      	lsls	r3, r3, #3
 80120b6:	440b      	add	r3, r1
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80120bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80120c0:	4910      	ldr	r1, [pc, #64]	; (8012104 <etharp_update_arp_entry+0x148>)
 80120c2:	4613      	mov	r3, r2
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	4413      	add	r3, r2
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	440b      	add	r3, r1
 80120cc:	2200      	movs	r2, #0
 80120ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80120d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80120da:	9300      	str	r3, [sp, #0]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6939      	ldr	r1, [r7, #16]
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f001 ff97 	bl	8014014 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80120e6:	6938      	ldr	r0, [r7, #16]
 80120e8:	f7f9 f9b8 	bl	800b45c <pbuf_free>
  }
  return ERR_OK;
 80120ec:	2300      	movs	r3, #0
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3718      	adds	r7, #24
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	080191b8 	.word	0x080191b8
 80120fc:	080192b0 	.word	0x080192b0
 8012100:	08019230 	.word	0x08019230
 8012104:	2002e6a8 	.word	0x2002e6a8

08012108 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012110:	2300      	movs	r3, #0
 8012112:	60fb      	str	r3, [r7, #12]
 8012114:	e01e      	b.n	8012154 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012116:	4913      	ldr	r1, [pc, #76]	; (8012164 <etharp_cleanup_netif+0x5c>)
 8012118:	68fa      	ldr	r2, [r7, #12]
 801211a:	4613      	mov	r3, r2
 801211c:	005b      	lsls	r3, r3, #1
 801211e:	4413      	add	r3, r2
 8012120:	00db      	lsls	r3, r3, #3
 8012122:	440b      	add	r3, r1
 8012124:	3314      	adds	r3, #20
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801212a:	7afb      	ldrb	r3, [r7, #11]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00e      	beq.n	801214e <etharp_cleanup_netif+0x46>
 8012130:	490c      	ldr	r1, [pc, #48]	; (8012164 <etharp_cleanup_netif+0x5c>)
 8012132:	68fa      	ldr	r2, [r7, #12]
 8012134:	4613      	mov	r3, r2
 8012136:	005b      	lsls	r3, r3, #1
 8012138:	4413      	add	r3, r2
 801213a:	00db      	lsls	r3, r3, #3
 801213c:	440b      	add	r3, r1
 801213e:	3308      	adds	r3, #8
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	687a      	ldr	r2, [r7, #4]
 8012144:	429a      	cmp	r2, r3
 8012146:	d102      	bne.n	801214e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	f7ff fce5 	bl	8011b18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	3301      	adds	r3, #1
 8012152:	60fb      	str	r3, [r7, #12]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b09      	cmp	r3, #9
 8012158:	dddd      	ble.n	8012116 <etharp_cleanup_netif+0xe>
    }
  }
}
 801215a:	bf00      	nop
 801215c:	bf00      	nop
 801215e:	3710      	adds	r7, #16
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	2002e6a8 	.word	0x2002e6a8

08012168 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012168:	b5b0      	push	{r4, r5, r7, lr}
 801216a:	b08a      	sub	sp, #40	; 0x28
 801216c:	af04      	add	r7, sp, #16
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d107      	bne.n	8012188 <etharp_input+0x20>
 8012178:	4b3d      	ldr	r3, [pc, #244]	; (8012270 <etharp_input+0x108>)
 801217a:	f240 228a 	movw	r2, #650	; 0x28a
 801217e:	493d      	ldr	r1, [pc, #244]	; (8012274 <etharp_input+0x10c>)
 8012180:	483d      	ldr	r0, [pc, #244]	; (8012278 <etharp_input+0x110>)
 8012182:	f003 fbd3 	bl	801592c <iprintf>
 8012186:	e06f      	b.n	8012268 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	881b      	ldrh	r3, [r3, #0]
 8012192:	b29b      	uxth	r3, r3
 8012194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012198:	d10c      	bne.n	80121b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801219e:	2b06      	cmp	r3, #6
 80121a0:	d108      	bne.n	80121b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80121a6:	2b04      	cmp	r3, #4
 80121a8:	d104      	bne.n	80121b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	885b      	ldrh	r3, [r3, #2]
 80121ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80121b0:	2b08      	cmp	r3, #8
 80121b2:	d003      	beq.n	80121bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7f9 f951 	bl	800b45c <pbuf_free>
    return;
 80121ba:	e055      	b.n	8012268 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	330e      	adds	r3, #14
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	3318      	adds	r3, #24
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	3304      	adds	r3, #4
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d102      	bne.n	80121dc <etharp_input+0x74>
    for_us = 0;
 80121d6:	2300      	movs	r3, #0
 80121d8:	75fb      	strb	r3, [r7, #23]
 80121da:	e009      	b.n	80121f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80121dc:	68ba      	ldr	r2, [r7, #8]
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	3304      	adds	r3, #4
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	bf0c      	ite	eq
 80121e8:	2301      	moveq	r3, #1
 80121ea:	2300      	movne	r3, #0
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	f103 0208 	add.w	r2, r3, #8
 80121f6:	7dfb      	ldrb	r3, [r7, #23]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d001      	beq.n	8012200 <etharp_input+0x98>
 80121fc:	2301      	movs	r3, #1
 80121fe:	e000      	b.n	8012202 <etharp_input+0x9a>
 8012200:	2302      	movs	r3, #2
 8012202:	f107 010c 	add.w	r1, r7, #12
 8012206:	6838      	ldr	r0, [r7, #0]
 8012208:	f7ff fed8 	bl	8011fbc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	88db      	ldrh	r3, [r3, #6]
 8012210:	b29b      	uxth	r3, r3
 8012212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012216:	d003      	beq.n	8012220 <etharp_input+0xb8>
 8012218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801221c:	d01e      	beq.n	801225c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801221e:	e020      	b.n	8012262 <etharp_input+0xfa>
      if (for_us) {
 8012220:	7dfb      	ldrb	r3, [r7, #23]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d01c      	beq.n	8012260 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801223c:	693a      	ldr	r2, [r7, #16]
 801223e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012240:	2102      	movs	r1, #2
 8012242:	9103      	str	r1, [sp, #12]
 8012244:	f107 010c 	add.w	r1, r7, #12
 8012248:	9102      	str	r1, [sp, #8]
 801224a:	9201      	str	r2, [sp, #4]
 801224c:	9300      	str	r3, [sp, #0]
 801224e:	462b      	mov	r3, r5
 8012250:	4622      	mov	r2, r4
 8012252:	4601      	mov	r1, r0
 8012254:	6838      	ldr	r0, [r7, #0]
 8012256:	f000 faeb 	bl	8012830 <etharp_raw>
      break;
 801225a:	e001      	b.n	8012260 <etharp_input+0xf8>
      break;
 801225c:	bf00      	nop
 801225e:	e000      	b.n	8012262 <etharp_input+0xfa>
      break;
 8012260:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f7f9 f8fa 	bl	800b45c <pbuf_free>
}
 8012268:	3718      	adds	r7, #24
 801226a:	46bd      	mov	sp, r7
 801226c:	bdb0      	pop	{r4, r5, r7, pc}
 801226e:	bf00      	nop
 8012270:	080191b8 	.word	0x080191b8
 8012274:	08019308 	.word	0x08019308
 8012278:	08019230 	.word	0x08019230

0801227c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b086      	sub	sp, #24
 8012280:	af02      	add	r7, sp, #8
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	4613      	mov	r3, r2
 8012288:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801228a:	79fa      	ldrb	r2, [r7, #7]
 801228c:	4944      	ldr	r1, [pc, #272]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 801228e:	4613      	mov	r3, r2
 8012290:	005b      	lsls	r3, r3, #1
 8012292:	4413      	add	r3, r2
 8012294:	00db      	lsls	r3, r3, #3
 8012296:	440b      	add	r3, r1
 8012298:	3314      	adds	r3, #20
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d806      	bhi.n	80122ae <etharp_output_to_arp_index+0x32>
 80122a0:	4b40      	ldr	r3, [pc, #256]	; (80123a4 <etharp_output_to_arp_index+0x128>)
 80122a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80122a6:	4940      	ldr	r1, [pc, #256]	; (80123a8 <etharp_output_to_arp_index+0x12c>)
 80122a8:	4840      	ldr	r0, [pc, #256]	; (80123ac <etharp_output_to_arp_index+0x130>)
 80122aa:	f003 fb3f 	bl	801592c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80122ae:	79fa      	ldrb	r2, [r7, #7]
 80122b0:	493b      	ldr	r1, [pc, #236]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 80122b2:	4613      	mov	r3, r2
 80122b4:	005b      	lsls	r3, r3, #1
 80122b6:	4413      	add	r3, r2
 80122b8:	00db      	lsls	r3, r3, #3
 80122ba:	440b      	add	r3, r1
 80122bc:	3314      	adds	r3, #20
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d153      	bne.n	801236c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80122c4:	79fa      	ldrb	r2, [r7, #7]
 80122c6:	4936      	ldr	r1, [pc, #216]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 80122c8:	4613      	mov	r3, r2
 80122ca:	005b      	lsls	r3, r3, #1
 80122cc:	4413      	add	r3, r2
 80122ce:	00db      	lsls	r3, r3, #3
 80122d0:	440b      	add	r3, r1
 80122d2:	3312      	adds	r3, #18
 80122d4:	881b      	ldrh	r3, [r3, #0]
 80122d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80122da:	d919      	bls.n	8012310 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80122dc:	79fa      	ldrb	r2, [r7, #7]
 80122de:	4613      	mov	r3, r2
 80122e0:	005b      	lsls	r3, r3, #1
 80122e2:	4413      	add	r3, r2
 80122e4:	00db      	lsls	r3, r3, #3
 80122e6:	4a2e      	ldr	r2, [pc, #184]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 80122e8:	4413      	add	r3, r2
 80122ea:	3304      	adds	r3, #4
 80122ec:	4619      	mov	r1, r3
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f000 fb4c 	bl	801298c <etharp_request>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d138      	bne.n	801236c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80122fa:	79fa      	ldrb	r2, [r7, #7]
 80122fc:	4928      	ldr	r1, [pc, #160]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 80122fe:	4613      	mov	r3, r2
 8012300:	005b      	lsls	r3, r3, #1
 8012302:	4413      	add	r3, r2
 8012304:	00db      	lsls	r3, r3, #3
 8012306:	440b      	add	r3, r1
 8012308:	3314      	adds	r3, #20
 801230a:	2203      	movs	r2, #3
 801230c:	701a      	strb	r2, [r3, #0]
 801230e:	e02d      	b.n	801236c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012310:	79fa      	ldrb	r2, [r7, #7]
 8012312:	4923      	ldr	r1, [pc, #140]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 8012314:	4613      	mov	r3, r2
 8012316:	005b      	lsls	r3, r3, #1
 8012318:	4413      	add	r3, r2
 801231a:	00db      	lsls	r3, r3, #3
 801231c:	440b      	add	r3, r1
 801231e:	3312      	adds	r3, #18
 8012320:	881b      	ldrh	r3, [r3, #0]
 8012322:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012326:	d321      	bcc.n	801236c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012328:	79fa      	ldrb	r2, [r7, #7]
 801232a:	4613      	mov	r3, r2
 801232c:	005b      	lsls	r3, r3, #1
 801232e:	4413      	add	r3, r2
 8012330:	00db      	lsls	r3, r3, #3
 8012332:	4a1b      	ldr	r2, [pc, #108]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 8012334:	4413      	add	r3, r2
 8012336:	1d19      	adds	r1, r3, #4
 8012338:	79fa      	ldrb	r2, [r7, #7]
 801233a:	4613      	mov	r3, r2
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	4413      	add	r3, r2
 8012340:	00db      	lsls	r3, r3, #3
 8012342:	3308      	adds	r3, #8
 8012344:	4a16      	ldr	r2, [pc, #88]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 8012346:	4413      	add	r3, r2
 8012348:	3304      	adds	r3, #4
 801234a:	461a      	mov	r2, r3
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f000 fafb 	bl	8012948 <etharp_request_dst>
 8012352:	4603      	mov	r3, r0
 8012354:	2b00      	cmp	r3, #0
 8012356:	d109      	bne.n	801236c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012358:	79fa      	ldrb	r2, [r7, #7]
 801235a:	4911      	ldr	r1, [pc, #68]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 801235c:	4613      	mov	r3, r2
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	4413      	add	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	440b      	add	r3, r1
 8012366:	3314      	adds	r3, #20
 8012368:	2203      	movs	r2, #3
 801236a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012372:	79fa      	ldrb	r2, [r7, #7]
 8012374:	4613      	mov	r3, r2
 8012376:	005b      	lsls	r3, r3, #1
 8012378:	4413      	add	r3, r2
 801237a:	00db      	lsls	r3, r3, #3
 801237c:	3308      	adds	r3, #8
 801237e:	4a08      	ldr	r2, [pc, #32]	; (80123a0 <etharp_output_to_arp_index+0x124>)
 8012380:	4413      	add	r3, r2
 8012382:	3304      	adds	r3, #4
 8012384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012388:	9200      	str	r2, [sp, #0]
 801238a:	460a      	mov	r2, r1
 801238c:	68b9      	ldr	r1, [r7, #8]
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f001 fe40 	bl	8014014 <ethernet_output>
 8012394:	4603      	mov	r3, r0
}
 8012396:	4618      	mov	r0, r3
 8012398:	3710      	adds	r7, #16
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	2002e6a8 	.word	0x2002e6a8
 80123a4:	080191b8 	.word	0x080191b8
 80123a8:	08019328 	.word	0x08019328
 80123ac:	08019230 	.word	0x08019230

080123b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b08a      	sub	sp, #40	; 0x28
 80123b4:	af02      	add	r7, sp, #8
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d106      	bne.n	80123d4 <etharp_output+0x24>
 80123c6:	4b73      	ldr	r3, [pc, #460]	; (8012594 <etharp_output+0x1e4>)
 80123c8:	f240 321e 	movw	r2, #798	; 0x31e
 80123cc:	4972      	ldr	r1, [pc, #456]	; (8012598 <etharp_output+0x1e8>)
 80123ce:	4873      	ldr	r0, [pc, #460]	; (801259c <etharp_output+0x1ec>)
 80123d0:	f003 faac 	bl	801592c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d106      	bne.n	80123e8 <etharp_output+0x38>
 80123da:	4b6e      	ldr	r3, [pc, #440]	; (8012594 <etharp_output+0x1e4>)
 80123dc:	f240 321f 	movw	r2, #799	; 0x31f
 80123e0:	496f      	ldr	r1, [pc, #444]	; (80125a0 <etharp_output+0x1f0>)
 80123e2:	486e      	ldr	r0, [pc, #440]	; (801259c <etharp_output+0x1ec>)
 80123e4:	f003 faa2 	bl	801592c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d106      	bne.n	80123fc <etharp_output+0x4c>
 80123ee:	4b69      	ldr	r3, [pc, #420]	; (8012594 <etharp_output+0x1e4>)
 80123f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80123f4:	496b      	ldr	r1, [pc, #428]	; (80125a4 <etharp_output+0x1f4>)
 80123f6:	4869      	ldr	r0, [pc, #420]	; (801259c <etharp_output+0x1ec>)
 80123f8:	f003 fa98 	bl	801592c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	68f9      	ldr	r1, [r7, #12]
 8012402:	4618      	mov	r0, r3
 8012404:	f000 fef8 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d002      	beq.n	8012414 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801240e:	4b66      	ldr	r3, [pc, #408]	; (80125a8 <etharp_output+0x1f8>)
 8012410:	61fb      	str	r3, [r7, #28]
 8012412:	e0af      	b.n	8012574 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801241c:	2be0      	cmp	r3, #224	; 0xe0
 801241e:	d118      	bne.n	8012452 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012420:	2301      	movs	r3, #1
 8012422:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012424:	2300      	movs	r3, #0
 8012426:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012428:	235e      	movs	r3, #94	; 0x5e
 801242a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	3301      	adds	r3, #1
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012436:	b2db      	uxtb	r3, r3
 8012438:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	3302      	adds	r3, #2
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	3303      	adds	r3, #3
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801244a:	f107 0310 	add.w	r3, r7, #16
 801244e:	61fb      	str	r3, [r7, #28]
 8012450:	e090      	b.n	8012574 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	3304      	adds	r3, #4
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	405a      	eors	r2, r3
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	3308      	adds	r3, #8
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	4013      	ands	r3, r2
 8012466:	2b00      	cmp	r3, #0
 8012468:	d012      	beq.n	8012490 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012470:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012474:	4293      	cmp	r3, r2
 8012476:	d00b      	beq.n	8012490 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	330c      	adds	r3, #12
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d003      	beq.n	801248a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	330c      	adds	r3, #12
 8012486:	61bb      	str	r3, [r7, #24]
 8012488:	e002      	b.n	8012490 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801248a:	f06f 0303 	mvn.w	r3, #3
 801248e:	e07d      	b.n	801258c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012490:	4b46      	ldr	r3, [pc, #280]	; (80125ac <etharp_output+0x1fc>)
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	4619      	mov	r1, r3
 8012496:	4a46      	ldr	r2, [pc, #280]	; (80125b0 <etharp_output+0x200>)
 8012498:	460b      	mov	r3, r1
 801249a:	005b      	lsls	r3, r3, #1
 801249c:	440b      	add	r3, r1
 801249e:	00db      	lsls	r3, r3, #3
 80124a0:	4413      	add	r3, r2
 80124a2:	3314      	adds	r3, #20
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d925      	bls.n	80124f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80124aa:	4b40      	ldr	r3, [pc, #256]	; (80125ac <etharp_output+0x1fc>)
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	4619      	mov	r1, r3
 80124b0:	4a3f      	ldr	r2, [pc, #252]	; (80125b0 <etharp_output+0x200>)
 80124b2:	460b      	mov	r3, r1
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	440b      	add	r3, r1
 80124b8:	00db      	lsls	r3, r3, #3
 80124ba:	4413      	add	r3, r2
 80124bc:	3308      	adds	r3, #8
 80124be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80124c0:	68fa      	ldr	r2, [r7, #12]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d117      	bne.n	80124f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	4b38      	ldr	r3, [pc, #224]	; (80125ac <etharp_output+0x1fc>)
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	4618      	mov	r0, r3
 80124d0:	4937      	ldr	r1, [pc, #220]	; (80125b0 <etharp_output+0x200>)
 80124d2:	4603      	mov	r3, r0
 80124d4:	005b      	lsls	r3, r3, #1
 80124d6:	4403      	add	r3, r0
 80124d8:	00db      	lsls	r3, r3, #3
 80124da:	440b      	add	r3, r1
 80124dc:	3304      	adds	r3, #4
 80124de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d108      	bne.n	80124f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80124e4:	4b31      	ldr	r3, [pc, #196]	; (80125ac <etharp_output+0x1fc>)
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	461a      	mov	r2, r3
 80124ea:	68b9      	ldr	r1, [r7, #8]
 80124ec:	68f8      	ldr	r0, [r7, #12]
 80124ee:	f7ff fec5 	bl	801227c <etharp_output_to_arp_index>
 80124f2:	4603      	mov	r3, r0
 80124f4:	e04a      	b.n	801258c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80124f6:	2300      	movs	r3, #0
 80124f8:	75fb      	strb	r3, [r7, #23]
 80124fa:	e031      	b.n	8012560 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80124fc:	7dfa      	ldrb	r2, [r7, #23]
 80124fe:	492c      	ldr	r1, [pc, #176]	; (80125b0 <etharp_output+0x200>)
 8012500:	4613      	mov	r3, r2
 8012502:	005b      	lsls	r3, r3, #1
 8012504:	4413      	add	r3, r2
 8012506:	00db      	lsls	r3, r3, #3
 8012508:	440b      	add	r3, r1
 801250a:	3314      	adds	r3, #20
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	2b01      	cmp	r3, #1
 8012510:	d923      	bls.n	801255a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012512:	7dfa      	ldrb	r2, [r7, #23]
 8012514:	4926      	ldr	r1, [pc, #152]	; (80125b0 <etharp_output+0x200>)
 8012516:	4613      	mov	r3, r2
 8012518:	005b      	lsls	r3, r3, #1
 801251a:	4413      	add	r3, r2
 801251c:	00db      	lsls	r3, r3, #3
 801251e:	440b      	add	r3, r1
 8012520:	3308      	adds	r3, #8
 8012522:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012524:	68fa      	ldr	r2, [r7, #12]
 8012526:	429a      	cmp	r2, r3
 8012528:	d117      	bne.n	801255a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801252a:	69bb      	ldr	r3, [r7, #24]
 801252c:	6819      	ldr	r1, [r3, #0]
 801252e:	7dfa      	ldrb	r2, [r7, #23]
 8012530:	481f      	ldr	r0, [pc, #124]	; (80125b0 <etharp_output+0x200>)
 8012532:	4613      	mov	r3, r2
 8012534:	005b      	lsls	r3, r3, #1
 8012536:	4413      	add	r3, r2
 8012538:	00db      	lsls	r3, r3, #3
 801253a:	4403      	add	r3, r0
 801253c:	3304      	adds	r3, #4
 801253e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012540:	4299      	cmp	r1, r3
 8012542:	d10a      	bne.n	801255a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012544:	4a19      	ldr	r2, [pc, #100]	; (80125ac <etharp_output+0x1fc>)
 8012546:	7dfb      	ldrb	r3, [r7, #23]
 8012548:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801254a:	7dfb      	ldrb	r3, [r7, #23]
 801254c:	461a      	mov	r2, r3
 801254e:	68b9      	ldr	r1, [r7, #8]
 8012550:	68f8      	ldr	r0, [r7, #12]
 8012552:	f7ff fe93 	bl	801227c <etharp_output_to_arp_index>
 8012556:	4603      	mov	r3, r0
 8012558:	e018      	b.n	801258c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801255a:	7dfb      	ldrb	r3, [r7, #23]
 801255c:	3301      	adds	r3, #1
 801255e:	75fb      	strb	r3, [r7, #23]
 8012560:	7dfb      	ldrb	r3, [r7, #23]
 8012562:	2b09      	cmp	r3, #9
 8012564:	d9ca      	bls.n	80124fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012566:	68ba      	ldr	r2, [r7, #8]
 8012568:	69b9      	ldr	r1, [r7, #24]
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f000 f822 	bl	80125b4 <etharp_query>
 8012570:	4603      	mov	r3, r0
 8012572:	e00b      	b.n	801258c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801257a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801257e:	9300      	str	r3, [sp, #0]
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	68b9      	ldr	r1, [r7, #8]
 8012584:	68f8      	ldr	r0, [r7, #12]
 8012586:	f001 fd45 	bl	8014014 <ethernet_output>
 801258a:	4603      	mov	r3, r0
}
 801258c:	4618      	mov	r0, r3
 801258e:	3720      	adds	r7, #32
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	080191b8 	.word	0x080191b8
 8012598:	08019308 	.word	0x08019308
 801259c:	08019230 	.word	0x08019230
 80125a0:	08019358 	.word	0x08019358
 80125a4:	080192f8 	.word	0x080192f8
 80125a8:	08019cbc 	.word	0x08019cbc
 80125ac:	2002e798 	.word	0x2002e798
 80125b0:	2002e6a8 	.word	0x2002e6a8

080125b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b08c      	sub	sp, #48	; 0x30
 80125b8:	af02      	add	r7, sp, #8
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	3326      	adds	r3, #38	; 0x26
 80125c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80125c6:	23ff      	movs	r3, #255	; 0xff
 80125c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80125cc:	2300      	movs	r3, #0
 80125ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	68f9      	ldr	r1, [r7, #12]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f000 fe0e 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d10c      	bne.n	80125fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80125ea:	2be0      	cmp	r3, #224	; 0xe0
 80125ec:	d006      	beq.n	80125fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d003      	beq.n	80125fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d102      	bne.n	8012602 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80125fc:	f06f 030f 	mvn.w	r3, #15
 8012600:	e101      	b.n	8012806 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012602:	68fa      	ldr	r2, [r7, #12]
 8012604:	2101      	movs	r1, #1
 8012606:	68b8      	ldr	r0, [r7, #8]
 8012608:	f7ff fb60 	bl	8011ccc <etharp_find_entry>
 801260c:	4603      	mov	r3, r0
 801260e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012614:	2b00      	cmp	r3, #0
 8012616:	da02      	bge.n	801261e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012618:	8a7b      	ldrh	r3, [r7, #18]
 801261a:	b25b      	sxtb	r3, r3
 801261c:	e0f3      	b.n	8012806 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801261e:	8a7b      	ldrh	r3, [r7, #18]
 8012620:	2b7e      	cmp	r3, #126	; 0x7e
 8012622:	d906      	bls.n	8012632 <etharp_query+0x7e>
 8012624:	4b7a      	ldr	r3, [pc, #488]	; (8012810 <etharp_query+0x25c>)
 8012626:	f240 32c1 	movw	r2, #961	; 0x3c1
 801262a:	497a      	ldr	r1, [pc, #488]	; (8012814 <etharp_query+0x260>)
 801262c:	487a      	ldr	r0, [pc, #488]	; (8012818 <etharp_query+0x264>)
 801262e:	f003 f97d 	bl	801592c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012632:	8a7b      	ldrh	r3, [r7, #18]
 8012634:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012636:	7c7a      	ldrb	r2, [r7, #17]
 8012638:	4978      	ldr	r1, [pc, #480]	; (801281c <etharp_query+0x268>)
 801263a:	4613      	mov	r3, r2
 801263c:	005b      	lsls	r3, r3, #1
 801263e:	4413      	add	r3, r2
 8012640:	00db      	lsls	r3, r3, #3
 8012642:	440b      	add	r3, r1
 8012644:	3314      	adds	r3, #20
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d115      	bne.n	8012678 <etharp_query+0xc4>
    is_new_entry = 1;
 801264c:	2301      	movs	r3, #1
 801264e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012650:	7c7a      	ldrb	r2, [r7, #17]
 8012652:	4972      	ldr	r1, [pc, #456]	; (801281c <etharp_query+0x268>)
 8012654:	4613      	mov	r3, r2
 8012656:	005b      	lsls	r3, r3, #1
 8012658:	4413      	add	r3, r2
 801265a:	00db      	lsls	r3, r3, #3
 801265c:	440b      	add	r3, r1
 801265e:	3314      	adds	r3, #20
 8012660:	2201      	movs	r2, #1
 8012662:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012664:	7c7a      	ldrb	r2, [r7, #17]
 8012666:	496d      	ldr	r1, [pc, #436]	; (801281c <etharp_query+0x268>)
 8012668:	4613      	mov	r3, r2
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	4413      	add	r3, r2
 801266e:	00db      	lsls	r3, r3, #3
 8012670:	440b      	add	r3, r1
 8012672:	3308      	adds	r3, #8
 8012674:	68fa      	ldr	r2, [r7, #12]
 8012676:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012678:	7c7a      	ldrb	r2, [r7, #17]
 801267a:	4968      	ldr	r1, [pc, #416]	; (801281c <etharp_query+0x268>)
 801267c:	4613      	mov	r3, r2
 801267e:	005b      	lsls	r3, r3, #1
 8012680:	4413      	add	r3, r2
 8012682:	00db      	lsls	r3, r3, #3
 8012684:	440b      	add	r3, r1
 8012686:	3314      	adds	r3, #20
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	2b01      	cmp	r3, #1
 801268c:	d011      	beq.n	80126b2 <etharp_query+0xfe>
 801268e:	7c7a      	ldrb	r2, [r7, #17]
 8012690:	4962      	ldr	r1, [pc, #392]	; (801281c <etharp_query+0x268>)
 8012692:	4613      	mov	r3, r2
 8012694:	005b      	lsls	r3, r3, #1
 8012696:	4413      	add	r3, r2
 8012698:	00db      	lsls	r3, r3, #3
 801269a:	440b      	add	r3, r1
 801269c:	3314      	adds	r3, #20
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d806      	bhi.n	80126b2 <etharp_query+0xfe>
 80126a4:	4b5a      	ldr	r3, [pc, #360]	; (8012810 <etharp_query+0x25c>)
 80126a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80126aa:	495d      	ldr	r1, [pc, #372]	; (8012820 <etharp_query+0x26c>)
 80126ac:	485a      	ldr	r0, [pc, #360]	; (8012818 <etharp_query+0x264>)
 80126ae:	f003 f93d 	bl	801592c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d102      	bne.n	80126be <etharp_query+0x10a>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d10c      	bne.n	80126d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80126be:	68b9      	ldr	r1, [r7, #8]
 80126c0:	68f8      	ldr	r0, [r7, #12]
 80126c2:	f000 f963 	bl	801298c <etharp_request>
 80126c6:	4603      	mov	r3, r0
 80126c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d102      	bne.n	80126d8 <etharp_query+0x124>
      return result;
 80126d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80126d6:	e096      	b.n	8012806 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d106      	bne.n	80126ec <etharp_query+0x138>
 80126de:	4b4c      	ldr	r3, [pc, #304]	; (8012810 <etharp_query+0x25c>)
 80126e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80126e4:	494f      	ldr	r1, [pc, #316]	; (8012824 <etharp_query+0x270>)
 80126e6:	484c      	ldr	r0, [pc, #304]	; (8012818 <etharp_query+0x264>)
 80126e8:	f003 f920 	bl	801592c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80126ec:	7c7a      	ldrb	r2, [r7, #17]
 80126ee:	494b      	ldr	r1, [pc, #300]	; (801281c <etharp_query+0x268>)
 80126f0:	4613      	mov	r3, r2
 80126f2:	005b      	lsls	r3, r3, #1
 80126f4:	4413      	add	r3, r2
 80126f6:	00db      	lsls	r3, r3, #3
 80126f8:	440b      	add	r3, r1
 80126fa:	3314      	adds	r3, #20
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	2b01      	cmp	r3, #1
 8012700:	d917      	bls.n	8012732 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012702:	4a49      	ldr	r2, [pc, #292]	; (8012828 <etharp_query+0x274>)
 8012704:	7c7b      	ldrb	r3, [r7, #17]
 8012706:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012708:	7c7a      	ldrb	r2, [r7, #17]
 801270a:	4613      	mov	r3, r2
 801270c:	005b      	lsls	r3, r3, #1
 801270e:	4413      	add	r3, r2
 8012710:	00db      	lsls	r3, r3, #3
 8012712:	3308      	adds	r3, #8
 8012714:	4a41      	ldr	r2, [pc, #260]	; (801281c <etharp_query+0x268>)
 8012716:	4413      	add	r3, r2
 8012718:	3304      	adds	r3, #4
 801271a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801271e:	9200      	str	r2, [sp, #0]
 8012720:	697a      	ldr	r2, [r7, #20]
 8012722:	6879      	ldr	r1, [r7, #4]
 8012724:	68f8      	ldr	r0, [r7, #12]
 8012726:	f001 fc75 	bl	8014014 <ethernet_output>
 801272a:	4603      	mov	r3, r0
 801272c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012730:	e067      	b.n	8012802 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012732:	7c7a      	ldrb	r2, [r7, #17]
 8012734:	4939      	ldr	r1, [pc, #228]	; (801281c <etharp_query+0x268>)
 8012736:	4613      	mov	r3, r2
 8012738:	005b      	lsls	r3, r3, #1
 801273a:	4413      	add	r3, r2
 801273c:	00db      	lsls	r3, r3, #3
 801273e:	440b      	add	r3, r1
 8012740:	3314      	adds	r3, #20
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	2b01      	cmp	r3, #1
 8012746:	d15c      	bne.n	8012802 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012748:	2300      	movs	r3, #0
 801274a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012750:	e01c      	b.n	801278c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	895a      	ldrh	r2, [r3, #10]
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	891b      	ldrh	r3, [r3, #8]
 801275a:	429a      	cmp	r2, r3
 801275c:	d10a      	bne.n	8012774 <etharp_query+0x1c0>
 801275e:	69fb      	ldr	r3, [r7, #28]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d006      	beq.n	8012774 <etharp_query+0x1c0>
 8012766:	4b2a      	ldr	r3, [pc, #168]	; (8012810 <etharp_query+0x25c>)
 8012768:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801276c:	492f      	ldr	r1, [pc, #188]	; (801282c <etharp_query+0x278>)
 801276e:	482a      	ldr	r0, [pc, #168]	; (8012818 <etharp_query+0x264>)
 8012770:	f003 f8dc 	bl	801592c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	7b1b      	ldrb	r3, [r3, #12]
 8012778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801277c:	2b00      	cmp	r3, #0
 801277e:	d002      	beq.n	8012786 <etharp_query+0x1d2>
        copy_needed = 1;
 8012780:	2301      	movs	r3, #1
 8012782:	61bb      	str	r3, [r7, #24]
        break;
 8012784:	e005      	b.n	8012792 <etharp_query+0x1de>
      }
      p = p->next;
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801278c:	69fb      	ldr	r3, [r7, #28]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d1df      	bne.n	8012752 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012792:	69bb      	ldr	r3, [r7, #24]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d007      	beq.n	80127a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801279e:	200e      	movs	r0, #14
 80127a0:	f7f9 f8fe 	bl	800b9a0 <pbuf_clone>
 80127a4:	61f8      	str	r0, [r7, #28]
 80127a6:	e004      	b.n	80127b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80127ac:	69f8      	ldr	r0, [r7, #28]
 80127ae:	f7f8 fefb 	bl	800b5a8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d021      	beq.n	80127fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80127b8:	7c7a      	ldrb	r2, [r7, #17]
 80127ba:	4918      	ldr	r1, [pc, #96]	; (801281c <etharp_query+0x268>)
 80127bc:	4613      	mov	r3, r2
 80127be:	005b      	lsls	r3, r3, #1
 80127c0:	4413      	add	r3, r2
 80127c2:	00db      	lsls	r3, r3, #3
 80127c4:	440b      	add	r3, r1
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d00a      	beq.n	80127e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80127cc:	7c7a      	ldrb	r2, [r7, #17]
 80127ce:	4913      	ldr	r1, [pc, #76]	; (801281c <etharp_query+0x268>)
 80127d0:	4613      	mov	r3, r2
 80127d2:	005b      	lsls	r3, r3, #1
 80127d4:	4413      	add	r3, r2
 80127d6:	00db      	lsls	r3, r3, #3
 80127d8:	440b      	add	r3, r1
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7f8 fe3d 	bl	800b45c <pbuf_free>
      }
      arp_table[i].q = p;
 80127e2:	7c7a      	ldrb	r2, [r7, #17]
 80127e4:	490d      	ldr	r1, [pc, #52]	; (801281c <etharp_query+0x268>)
 80127e6:	4613      	mov	r3, r2
 80127e8:	005b      	lsls	r3, r3, #1
 80127ea:	4413      	add	r3, r2
 80127ec:	00db      	lsls	r3, r3, #3
 80127ee:	440b      	add	r3, r1
 80127f0:	69fa      	ldr	r2, [r7, #28]
 80127f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80127f4:	2300      	movs	r3, #0
 80127f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80127fa:	e002      	b.n	8012802 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80127fc:	23ff      	movs	r3, #255	; 0xff
 80127fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012802:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012806:	4618      	mov	r0, r3
 8012808:	3728      	adds	r7, #40	; 0x28
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	080191b8 	.word	0x080191b8
 8012814:	08019364 	.word	0x08019364
 8012818:	08019230 	.word	0x08019230
 801281c:	2002e6a8 	.word	0x2002e6a8
 8012820:	08019374 	.word	0x08019374
 8012824:	08019358 	.word	0x08019358
 8012828:	2002e798 	.word	0x2002e798
 801282c:	0801939c 	.word	0x0801939c

08012830 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b08a      	sub	sp, #40	; 0x28
 8012834:	af02      	add	r7, sp, #8
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
 801283c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801283e:	2300      	movs	r3, #0
 8012840:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d106      	bne.n	8012856 <etharp_raw+0x26>
 8012848:	4b3a      	ldr	r3, [pc, #232]	; (8012934 <etharp_raw+0x104>)
 801284a:	f240 4257 	movw	r2, #1111	; 0x457
 801284e:	493a      	ldr	r1, [pc, #232]	; (8012938 <etharp_raw+0x108>)
 8012850:	483a      	ldr	r0, [pc, #232]	; (801293c <etharp_raw+0x10c>)
 8012852:	f003 f86b 	bl	801592c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012856:	f44f 7220 	mov.w	r2, #640	; 0x280
 801285a:	211c      	movs	r1, #28
 801285c:	200e      	movs	r0, #14
 801285e:	f7f8 fb19 	bl	800ae94 <pbuf_alloc>
 8012862:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012864:	69bb      	ldr	r3, [r7, #24]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d102      	bne.n	8012870 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801286a:	f04f 33ff 	mov.w	r3, #4294967295
 801286e:	e05d      	b.n	801292c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	895b      	ldrh	r3, [r3, #10]
 8012874:	2b1b      	cmp	r3, #27
 8012876:	d806      	bhi.n	8012886 <etharp_raw+0x56>
 8012878:	4b2e      	ldr	r3, [pc, #184]	; (8012934 <etharp_raw+0x104>)
 801287a:	f240 4262 	movw	r2, #1122	; 0x462
 801287e:	4930      	ldr	r1, [pc, #192]	; (8012940 <etharp_raw+0x110>)
 8012880:	482e      	ldr	r0, [pc, #184]	; (801293c <etharp_raw+0x10c>)
 8012882:	f003 f853 	bl	801592c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801288c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801288e:	4618      	mov	r0, r3
 8012890:	f7f7 f9f2 	bl	8009c78 <lwip_htons>
 8012894:	4603      	mov	r3, r0
 8012896:	461a      	mov	r2, r3
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80128a2:	2b06      	cmp	r3, #6
 80128a4:	d006      	beq.n	80128b4 <etharp_raw+0x84>
 80128a6:	4b23      	ldr	r3, [pc, #140]	; (8012934 <etharp_raw+0x104>)
 80128a8:	f240 4269 	movw	r2, #1129	; 0x469
 80128ac:	4925      	ldr	r1, [pc, #148]	; (8012944 <etharp_raw+0x114>)
 80128ae:	4823      	ldr	r0, [pc, #140]	; (801293c <etharp_raw+0x10c>)
 80128b0:	f003 f83c 	bl	801592c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	3308      	adds	r3, #8
 80128b8:	2206      	movs	r2, #6
 80128ba:	6839      	ldr	r1, [r7, #0]
 80128bc:	4618      	mov	r0, r3
 80128be:	f002 ff13 	bl	80156e8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	3312      	adds	r3, #18
 80128c6:	2206      	movs	r2, #6
 80128c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128ca:	4618      	mov	r0, r3
 80128cc:	f002 ff0c 	bl	80156e8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	330e      	adds	r3, #14
 80128d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128d6:	6812      	ldr	r2, [r2, #0]
 80128d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	3318      	adds	r3, #24
 80128de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128e0:	6812      	ldr	r2, [r2, #0]
 80128e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	2200      	movs	r2, #0
 80128e8:	701a      	strb	r2, [r3, #0]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f042 0201 	orr.w	r2, r2, #1
 80128f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	2200      	movs	r2, #0
 80128f6:	f042 0208 	orr.w	r2, r2, #8
 80128fa:	709a      	strb	r2, [r3, #2]
 80128fc:	2200      	movs	r2, #0
 80128fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	2206      	movs	r2, #6
 8012904:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	2204      	movs	r2, #4
 801290a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801290c:	f640 0306 	movw	r3, #2054	; 0x806
 8012910:	9300      	str	r3, [sp, #0]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	68ba      	ldr	r2, [r7, #8]
 8012916:	69b9      	ldr	r1, [r7, #24]
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f001 fb7b 	bl	8014014 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801291e:	69b8      	ldr	r0, [r7, #24]
 8012920:	f7f8 fd9c 	bl	800b45c <pbuf_free>
  p = NULL;
 8012924:	2300      	movs	r3, #0
 8012926:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012928:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801292c:	4618      	mov	r0, r3
 801292e:	3720      	adds	r7, #32
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}
 8012934:	080191b8 	.word	0x080191b8
 8012938:	08019308 	.word	0x08019308
 801293c:	08019230 	.word	0x08019230
 8012940:	080193b8 	.word	0x080193b8
 8012944:	080193ec 	.word	0x080193ec

08012948 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af04      	add	r7, sp, #16
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012964:	2201      	movs	r2, #1
 8012966:	9203      	str	r2, [sp, #12]
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	9202      	str	r2, [sp, #8]
 801296c:	4a06      	ldr	r2, [pc, #24]	; (8012988 <etharp_request_dst+0x40>)
 801296e:	9201      	str	r2, [sp, #4]
 8012970:	9300      	str	r3, [sp, #0]
 8012972:	4603      	mov	r3, r0
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	68f8      	ldr	r0, [r7, #12]
 8012978:	f7ff ff5a 	bl	8012830 <etharp_raw>
 801297c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801297e:	4618      	mov	r0, r3
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop
 8012988:	08019cc4 	.word	0x08019cc4

0801298c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012996:	4a05      	ldr	r2, [pc, #20]	; (80129ac <etharp_request+0x20>)
 8012998:	6839      	ldr	r1, [r7, #0]
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f7ff ffd4 	bl	8012948 <etharp_request_dst>
 80129a0:	4603      	mov	r3, r0
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	08019cbc 	.word	0x08019cbc

080129b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b08e      	sub	sp, #56	; 0x38
 80129b4:	af04      	add	r7, sp, #16
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80129ba:	4b79      	ldr	r3, [pc, #484]	; (8012ba0 <icmp_input+0x1f0>)
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80129c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	f003 030f 	and.w	r3, r3, #15
 80129c8:	b2db      	uxtb	r3, r3
 80129ca:	009b      	lsls	r3, r3, #2
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80129d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129d2:	2b13      	cmp	r3, #19
 80129d4:	f240 80cd 	bls.w	8012b72 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	895b      	ldrh	r3, [r3, #10]
 80129dc:	2b03      	cmp	r3, #3
 80129de:	f240 80ca 	bls.w	8012b76 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80129ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f000 80b7 	beq.w	8012b64 <icmp_input+0x1b4>
 80129f6:	2b08      	cmp	r3, #8
 80129f8:	f040 80b7 	bne.w	8012b6a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80129fc:	4b69      	ldr	r3, [pc, #420]	; (8012ba4 <icmp_input+0x1f4>)
 80129fe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012a00:	4b67      	ldr	r3, [pc, #412]	; (8012ba0 <icmp_input+0x1f0>)
 8012a02:	695b      	ldr	r3, [r3, #20]
 8012a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a08:	2be0      	cmp	r3, #224	; 0xe0
 8012a0a:	f000 80bb 	beq.w	8012b84 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012a0e:	4b64      	ldr	r3, [pc, #400]	; (8012ba0 <icmp_input+0x1f0>)
 8012a10:	695b      	ldr	r3, [r3, #20]
 8012a12:	4a63      	ldr	r2, [pc, #396]	; (8012ba0 <icmp_input+0x1f0>)
 8012a14:	6812      	ldr	r2, [r2, #0]
 8012a16:	4611      	mov	r1, r2
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f000 fbed 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	f040 80b1 	bne.w	8012b88 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	891b      	ldrh	r3, [r3, #8]
 8012a2a:	2b07      	cmp	r3, #7
 8012a2c:	f240 80a5 	bls.w	8012b7a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a32:	330e      	adds	r3, #14
 8012a34:	4619      	mov	r1, r3
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f7f8 fc7a 	bl	800b330 <pbuf_add_header>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d04b      	beq.n	8012ada <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	891a      	ldrh	r2, [r3, #8]
 8012a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a48:	4413      	add	r3, r2
 8012a4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	891b      	ldrh	r3, [r3, #8]
 8012a50:	8b7a      	ldrh	r2, [r7, #26]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	f0c0 809a 	bcc.w	8012b8c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012a58:	8b7b      	ldrh	r3, [r7, #26]
 8012a5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a5e:	4619      	mov	r1, r3
 8012a60:	200e      	movs	r0, #14
 8012a62:	f7f8 fa17 	bl	800ae94 <pbuf_alloc>
 8012a66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 8090 	beq.w	8012b90 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	895b      	ldrh	r3, [r3, #10]
 8012a74:	461a      	mov	r2, r3
 8012a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a78:	3308      	adds	r3, #8
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d203      	bcs.n	8012a86 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012a7e:	6978      	ldr	r0, [r7, #20]
 8012a80:	f7f8 fcec 	bl	800b45c <pbuf_free>
          goto icmperr;
 8012a84:	e085      	b.n	8012b92 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f002 fe2a 	bl	80156e8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a96:	4619      	mov	r1, r3
 8012a98:	6978      	ldr	r0, [r7, #20]
 8012a9a:	f7f8 fc59 	bl	800b350 <pbuf_remove_header>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d009      	beq.n	8012ab8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012aa4:	4b40      	ldr	r3, [pc, #256]	; (8012ba8 <icmp_input+0x1f8>)
 8012aa6:	22b6      	movs	r2, #182	; 0xb6
 8012aa8:	4940      	ldr	r1, [pc, #256]	; (8012bac <icmp_input+0x1fc>)
 8012aaa:	4841      	ldr	r0, [pc, #260]	; (8012bb0 <icmp_input+0x200>)
 8012aac:	f002 ff3e 	bl	801592c <iprintf>
          pbuf_free(r);
 8012ab0:	6978      	ldr	r0, [r7, #20]
 8012ab2:	f7f8 fcd3 	bl	800b45c <pbuf_free>
          goto icmperr;
 8012ab6:	e06c      	b.n	8012b92 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012ab8:	6879      	ldr	r1, [r7, #4]
 8012aba:	6978      	ldr	r0, [r7, #20]
 8012abc:	f7f8 fe02 	bl	800b6c4 <pbuf_copy>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d003      	beq.n	8012ace <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012ac6:	6978      	ldr	r0, [r7, #20]
 8012ac8:	f7f8 fcc8 	bl	800b45c <pbuf_free>
          goto icmperr;
 8012acc:	e061      	b.n	8012b92 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f7f8 fcc4 	bl	800b45c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	607b      	str	r3, [r7, #4]
 8012ad8:	e00f      	b.n	8012afa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012adc:	330e      	adds	r3, #14
 8012ade:	4619      	mov	r1, r3
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f7f8 fc35 	bl	800b350 <pbuf_remove_header>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d006      	beq.n	8012afa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012aec:	4b2e      	ldr	r3, [pc, #184]	; (8012ba8 <icmp_input+0x1f8>)
 8012aee:	22c7      	movs	r2, #199	; 0xc7
 8012af0:	4930      	ldr	r1, [pc, #192]	; (8012bb4 <icmp_input+0x204>)
 8012af2:	482f      	ldr	r0, [pc, #188]	; (8012bb0 <icmp_input+0x200>)
 8012af4:	f002 ff1a 	bl	801592c <iprintf>
          goto icmperr;
 8012af8:	e04b      	b.n	8012b92 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b02:	4619      	mov	r1, r3
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7f8 fc13 	bl	800b330 <pbuf_add_header>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d12b      	bne.n	8012b68 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	685b      	ldr	r3, [r3, #4]
 8012b14:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012b16:	69fb      	ldr	r3, [r7, #28]
 8012b18:	681a      	ldr	r2, [r3, #0]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012b1e:	4b20      	ldr	r3, [pc, #128]	; (8012ba0 <icmp_input+0x1f0>)
 8012b20:	691a      	ldr	r2, [r3, #16]
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	709a      	strb	r2, [r3, #2]
 8012b32:	2200      	movs	r2, #0
 8012b34:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	22ff      	movs	r2, #255	; 0xff
 8012b3a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	729a      	strb	r2, [r3, #10]
 8012b42:	2200      	movs	r2, #0
 8012b44:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	9302      	str	r3, [sp, #8]
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	9301      	str	r3, [sp, #4]
 8012b4e:	2300      	movs	r3, #0
 8012b50:	9300      	str	r3, [sp, #0]
 8012b52:	23ff      	movs	r3, #255	; 0xff
 8012b54:	2200      	movs	r2, #0
 8012b56:	69f9      	ldr	r1, [r7, #28]
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f000 fa75 	bl	8013048 <ip4_output_if>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012b62:	e001      	b.n	8012b68 <icmp_input+0x1b8>
      break;
 8012b64:	bf00      	nop
 8012b66:	e000      	b.n	8012b6a <icmp_input+0x1ba>
      break;
 8012b68:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7f8 fc76 	bl	800b45c <pbuf_free>
  return;
 8012b70:	e013      	b.n	8012b9a <icmp_input+0x1ea>
    goto lenerr;
 8012b72:	bf00      	nop
 8012b74:	e002      	b.n	8012b7c <icmp_input+0x1cc>
    goto lenerr;
 8012b76:	bf00      	nop
 8012b78:	e000      	b.n	8012b7c <icmp_input+0x1cc>
        goto lenerr;
 8012b7a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7f8 fc6d 	bl	800b45c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012b82:	e00a      	b.n	8012b9a <icmp_input+0x1ea>
        goto icmperr;
 8012b84:	bf00      	nop
 8012b86:	e004      	b.n	8012b92 <icmp_input+0x1e2>
        goto icmperr;
 8012b88:	bf00      	nop
 8012b8a:	e002      	b.n	8012b92 <icmp_input+0x1e2>
          goto icmperr;
 8012b8c:	bf00      	nop
 8012b8e:	e000      	b.n	8012b92 <icmp_input+0x1e2>
          goto icmperr;
 8012b90:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f7f8 fc62 	bl	800b45c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012b98:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012b9a:	3728      	adds	r7, #40	; 0x28
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	2002aef4 	.word	0x2002aef4
 8012ba4:	2002af08 	.word	0x2002af08
 8012ba8:	08019430 	.word	0x08019430
 8012bac:	08019468 	.word	0x08019468
 8012bb0:	080194a0 	.word	0x080194a0
 8012bb4:	080194c8 	.word	0x080194c8

08012bb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012bc4:	78fb      	ldrb	r3, [r7, #3]
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	2103      	movs	r1, #3
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f000 f814 	bl	8012bf8 <icmp_send_response>
}
 8012bd0:	bf00      	nop
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	460b      	mov	r3, r1
 8012be2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012be4:	78fb      	ldrb	r3, [r7, #3]
 8012be6:	461a      	mov	r2, r3
 8012be8:	210b      	movs	r1, #11
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f000 f804 	bl	8012bf8 <icmp_send_response>
}
 8012bf0:	bf00      	nop
 8012bf2:	3708      	adds	r7, #8
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}

08012bf8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08c      	sub	sp, #48	; 0x30
 8012bfc:	af04      	add	r7, sp, #16
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	460b      	mov	r3, r1
 8012c02:	70fb      	strb	r3, [r7, #3]
 8012c04:	4613      	mov	r3, r2
 8012c06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012c08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c0c:	2124      	movs	r1, #36	; 0x24
 8012c0e:	2022      	movs	r0, #34	; 0x22
 8012c10:	f7f8 f940 	bl	800ae94 <pbuf_alloc>
 8012c14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012c16:	69fb      	ldr	r3, [r7, #28]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d04c      	beq.n	8012cb6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	895b      	ldrh	r3, [r3, #10]
 8012c20:	2b23      	cmp	r3, #35	; 0x23
 8012c22:	d806      	bhi.n	8012c32 <icmp_send_response+0x3a>
 8012c24:	4b26      	ldr	r3, [pc, #152]	; (8012cc0 <icmp_send_response+0xc8>)
 8012c26:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012c2a:	4926      	ldr	r1, [pc, #152]	; (8012cc4 <icmp_send_response+0xcc>)
 8012c2c:	4826      	ldr	r0, [pc, #152]	; (8012cc8 <icmp_send_response+0xd0>)
 8012c2e:	f002 fe7d 	bl	801592c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	78fa      	ldrb	r2, [r7, #3]
 8012c42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	78ba      	ldrb	r2, [r7, #2]
 8012c48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	711a      	strb	r2, [r3, #4]
 8012c50:	2200      	movs	r2, #0
 8012c52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	2200      	movs	r2, #0
 8012c58:	719a      	strb	r2, [r3, #6]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	f103 0008 	add.w	r0, r3, #8
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	221c      	movs	r2, #28
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	f002 fd3b 	bl	80156e8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012c78:	f107 030c 	add.w	r3, r7, #12
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f000 f825 	bl	8012ccc <ip4_route>
 8012c82:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d011      	beq.n	8012cae <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	709a      	strb	r2, [r3, #2]
 8012c90:	2200      	movs	r2, #0
 8012c92:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012c94:	f107 020c 	add.w	r2, r7, #12
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	9302      	str	r3, [sp, #8]
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	9301      	str	r3, [sp, #4]
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	9300      	str	r3, [sp, #0]
 8012ca4:	23ff      	movs	r3, #255	; 0xff
 8012ca6:	2100      	movs	r1, #0
 8012ca8:	69f8      	ldr	r0, [r7, #28]
 8012caa:	f000 f9cd 	bl	8013048 <ip4_output_if>
  }
  pbuf_free(q);
 8012cae:	69f8      	ldr	r0, [r7, #28]
 8012cb0:	f7f8 fbd4 	bl	800b45c <pbuf_free>
 8012cb4:	e000      	b.n	8012cb8 <icmp_send_response+0xc0>
    return;
 8012cb6:	bf00      	nop
}
 8012cb8:	3720      	adds	r7, #32
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	08019430 	.word	0x08019430
 8012cc4:	080194fc 	.word	0x080194fc
 8012cc8:	080194a0 	.word	0x080194a0

08012ccc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b085      	sub	sp, #20
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012cd4:	4b33      	ldr	r3, [pc, #204]	; (8012da4 <ip4_route+0xd8>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	60fb      	str	r3, [r7, #12]
 8012cda:	e036      	b.n	8012d4a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ce2:	f003 0301 	and.w	r3, r3, #1
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d02b      	beq.n	8012d44 <ip4_route+0x78>
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cf2:	089b      	lsrs	r3, r3, #2
 8012cf4:	f003 0301 	and.w	r3, r3, #1
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d022      	beq.n	8012d44 <ip4_route+0x78>
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	3304      	adds	r3, #4
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d01d      	beq.n	8012d44 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681a      	ldr	r2, [r3, #0]
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	3304      	adds	r3, #4
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	405a      	eors	r2, r3
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	3308      	adds	r3, #8
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4013      	ands	r3, r2
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d101      	bne.n	8012d24 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	e038      	b.n	8012d96 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d2a:	f003 0302 	and.w	r3, r3, #2
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d108      	bne.n	8012d44 <ip4_route+0x78>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	330c      	adds	r3, #12
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d101      	bne.n	8012d44 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	e028      	b.n	8012d96 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	60fb      	str	r3, [r7, #12]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d1c5      	bne.n	8012cdc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012d50:	4b15      	ldr	r3, [pc, #84]	; (8012da8 <ip4_route+0xdc>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d01a      	beq.n	8012d8e <ip4_route+0xc2>
 8012d58:	4b13      	ldr	r3, [pc, #76]	; (8012da8 <ip4_route+0xdc>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d60:	f003 0301 	and.w	r3, r3, #1
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d012      	beq.n	8012d8e <ip4_route+0xc2>
 8012d68:	4b0f      	ldr	r3, [pc, #60]	; (8012da8 <ip4_route+0xdc>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d70:	f003 0304 	and.w	r3, r3, #4
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d00a      	beq.n	8012d8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012d78:	4b0b      	ldr	r3, [pc, #44]	; (8012da8 <ip4_route+0xdc>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d004      	beq.n	8012d8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	b2db      	uxtb	r3, r3
 8012d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8012d8c:	d101      	bne.n	8012d92 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e001      	b.n	8012d96 <ip4_route+0xca>
  }

  return netif_default;
 8012d92:	4b05      	ldr	r3, [pc, #20]	; (8012da8 <ip4_route+0xdc>)
 8012d94:	681b      	ldr	r3, [r3, #0]
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3714      	adds	r7, #20
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da0:	4770      	bx	lr
 8012da2:	bf00      	nop
 8012da4:	2002e63c 	.word	0x2002e63c
 8012da8:	2002e640 	.word	0x2002e640

08012dac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dba:	f003 0301 	and.w	r3, r3, #1
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d016      	beq.n	8012df2 <ip4_input_accept+0x46>
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	3304      	adds	r3, #4
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d011      	beq.n	8012df2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012dce:	4b0b      	ldr	r3, [pc, #44]	; (8012dfc <ip4_input_accept+0x50>)
 8012dd0:	695a      	ldr	r2, [r3, #20]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	3304      	adds	r3, #4
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d008      	beq.n	8012dee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012ddc:	4b07      	ldr	r3, [pc, #28]	; (8012dfc <ip4_input_accept+0x50>)
 8012dde:	695b      	ldr	r3, [r3, #20]
 8012de0:	6879      	ldr	r1, [r7, #4]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f000 fa08 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 8012de8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d001      	beq.n	8012df2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012dee:	2301      	movs	r3, #1
 8012df0:	e000      	b.n	8012df4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012df2:	2300      	movs	r3, #0
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	3708      	adds	r7, #8
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	2002aef4 	.word	0x2002aef4

08012e00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b086      	sub	sp, #24
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	091b      	lsrs	r3, r3, #4
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	2b04      	cmp	r3, #4
 8012e1a:	d004      	beq.n	8012e26 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7f8 fb1d 	bl	800b45c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012e22:	2300      	movs	r3, #0
 8012e24:	e107      	b.n	8013036 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	f003 030f 	and.w	r3, r3, #15
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	885b      	ldrh	r3, [r3, #2]
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7f6 ff1b 	bl	8009c78 <lwip_htons>
 8012e42:	4603      	mov	r3, r0
 8012e44:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	891b      	ldrh	r3, [r3, #8]
 8012e4a:	89ba      	ldrh	r2, [r7, #12]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d204      	bcs.n	8012e5a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012e50:	89bb      	ldrh	r3, [r7, #12]
 8012e52:	4619      	mov	r1, r3
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f7f8 f97b 	bl	800b150 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	895b      	ldrh	r3, [r3, #10]
 8012e5e:	89fa      	ldrh	r2, [r7, #14]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d807      	bhi.n	8012e74 <ip4_input+0x74>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	891b      	ldrh	r3, [r3, #8]
 8012e68:	89ba      	ldrh	r2, [r7, #12]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d802      	bhi.n	8012e74 <ip4_input+0x74>
 8012e6e:	89fb      	ldrh	r3, [r7, #14]
 8012e70:	2b13      	cmp	r3, #19
 8012e72:	d804      	bhi.n	8012e7e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f7f8 faf1 	bl	800b45c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	e0db      	b.n	8013036 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	691b      	ldr	r3, [r3, #16]
 8012e82:	4a6f      	ldr	r2, [pc, #444]	; (8013040 <ip4_input+0x240>)
 8012e84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	68db      	ldr	r3, [r3, #12]
 8012e8a:	4a6d      	ldr	r2, [pc, #436]	; (8013040 <ip4_input+0x240>)
 8012e8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012e8e:	4b6c      	ldr	r3, [pc, #432]	; (8013040 <ip4_input+0x240>)
 8012e90:	695b      	ldr	r3, [r3, #20]
 8012e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e96:	2be0      	cmp	r3, #224	; 0xe0
 8012e98:	d112      	bne.n	8012ec0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ea0:	f003 0301 	and.w	r3, r3, #1
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d007      	beq.n	8012eba <ip4_input+0xba>
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	3304      	adds	r3, #4
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <ip4_input+0xba>
      netif = inp;
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	613b      	str	r3, [r7, #16]
 8012eb8:	e02a      	b.n	8012f10 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	613b      	str	r3, [r7, #16]
 8012ebe:	e027      	b.n	8012f10 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012ec0:	6838      	ldr	r0, [r7, #0]
 8012ec2:	f7ff ff73 	bl	8012dac <ip4_input_accept>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d002      	beq.n	8012ed2 <ip4_input+0xd2>
      netif = inp;
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	613b      	str	r3, [r7, #16]
 8012ed0:	e01e      	b.n	8012f10 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012ed6:	4b5a      	ldr	r3, [pc, #360]	; (8013040 <ip4_input+0x240>)
 8012ed8:	695b      	ldr	r3, [r3, #20]
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	2b7f      	cmp	r3, #127	; 0x7f
 8012ede:	d017      	beq.n	8012f10 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012ee0:	4b58      	ldr	r3, [pc, #352]	; (8013044 <ip4_input+0x244>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	613b      	str	r3, [r7, #16]
 8012ee6:	e00e      	b.n	8012f06 <ip4_input+0x106>
          if (netif == inp) {
 8012ee8:	693a      	ldr	r2, [r7, #16]
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d006      	beq.n	8012efe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012ef0:	6938      	ldr	r0, [r7, #16]
 8012ef2:	f7ff ff5b 	bl	8012dac <ip4_input_accept>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d108      	bne.n	8012f0e <ip4_input+0x10e>
 8012efc:	e000      	b.n	8012f00 <ip4_input+0x100>
            continue;
 8012efe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	613b      	str	r3, [r7, #16]
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d1ed      	bne.n	8012ee8 <ip4_input+0xe8>
 8012f0c:	e000      	b.n	8012f10 <ip4_input+0x110>
            break;
 8012f0e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012f10:	4b4b      	ldr	r3, [pc, #300]	; (8013040 <ip4_input+0x240>)
 8012f12:	691b      	ldr	r3, [r3, #16]
 8012f14:	6839      	ldr	r1, [r7, #0]
 8012f16:	4618      	mov	r0, r3
 8012f18:	f000 f96e 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d105      	bne.n	8012f2e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012f22:	4b47      	ldr	r3, [pc, #284]	; (8013040 <ip4_input+0x240>)
 8012f24:	691b      	ldr	r3, [r3, #16]
 8012f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012f2a:	2be0      	cmp	r3, #224	; 0xe0
 8012f2c:	d104      	bne.n	8012f38 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7f8 fa94 	bl	800b45c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012f34:	2300      	movs	r3, #0
 8012f36:	e07e      	b.n	8013036 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d104      	bne.n	8012f48 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7f8 fa8c 	bl	800b45c <pbuf_free>
    return ERR_OK;
 8012f44:	2300      	movs	r3, #0
 8012f46:	e076      	b.n	8013036 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	88db      	ldrh	r3, [r3, #6]
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	461a      	mov	r2, r3
 8012f50:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012f54:	4013      	ands	r3, r2
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d00b      	beq.n	8012f72 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f000 fc92 	bl	8013884 <ip4_reass>
 8012f60:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d101      	bne.n	8012f6c <ip4_input+0x16c>
      return ERR_OK;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	e064      	b.n	8013036 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012f72:	4a33      	ldr	r2, [pc, #204]	; (8013040 <ip4_input+0x240>)
 8012f74:	693b      	ldr	r3, [r7, #16]
 8012f76:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012f78:	4a31      	ldr	r2, [pc, #196]	; (8013040 <ip4_input+0x240>)
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012f7e:	4a30      	ldr	r2, [pc, #192]	; (8013040 <ip4_input+0x240>)
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	f003 030f 	and.w	r3, r3, #15
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	009b      	lsls	r3, r3, #2
 8012f90:	b2db      	uxtb	r3, r3
 8012f92:	b29a      	uxth	r2, r3
 8012f94:	4b2a      	ldr	r3, [pc, #168]	; (8013040 <ip4_input+0x240>)
 8012f96:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012f98:	89fb      	ldrh	r3, [r7, #14]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7f8 f9d7 	bl	800b350 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	7a5b      	ldrb	r3, [r3, #9]
 8012fa6:	2b11      	cmp	r3, #17
 8012fa8:	d006      	beq.n	8012fb8 <ip4_input+0x1b8>
 8012faa:	2b11      	cmp	r3, #17
 8012fac:	dc13      	bgt.n	8012fd6 <ip4_input+0x1d6>
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	d00c      	beq.n	8012fcc <ip4_input+0x1cc>
 8012fb2:	2b06      	cmp	r3, #6
 8012fb4:	d005      	beq.n	8012fc2 <ip4_input+0x1c2>
 8012fb6:	e00e      	b.n	8012fd6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012fb8:	6839      	ldr	r1, [r7, #0]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f7fe f9a4 	bl	8011308 <udp_input>
        break;
 8012fc0:	e026      	b.n	8013010 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012fc2:	6839      	ldr	r1, [r7, #0]
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7fa f97b 	bl	800d2c0 <tcp_input>
        break;
 8012fca:	e021      	b.n	8013010 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012fcc:	6839      	ldr	r1, [r7, #0]
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f7ff fcee 	bl	80129b0 <icmp_input>
        break;
 8012fd4:	e01c      	b.n	8013010 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012fd6:	4b1a      	ldr	r3, [pc, #104]	; (8013040 <ip4_input+0x240>)
 8012fd8:	695b      	ldr	r3, [r3, #20]
 8012fda:	6939      	ldr	r1, [r7, #16]
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f000 f90b 	bl	80131f8 <ip4_addr_isbroadcast_u32>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10f      	bne.n	8013008 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012fe8:	4b15      	ldr	r3, [pc, #84]	; (8013040 <ip4_input+0x240>)
 8012fea:	695b      	ldr	r3, [r3, #20]
 8012fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012ff0:	2be0      	cmp	r3, #224	; 0xe0
 8012ff2:	d009      	beq.n	8013008 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f7f8 fa1b 	bl	800b436 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013000:	2102      	movs	r1, #2
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f7ff fdd8 	bl	8012bb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f7f8 fa27 	bl	800b45c <pbuf_free>
        break;
 801300e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013010:	4b0b      	ldr	r3, [pc, #44]	; (8013040 <ip4_input+0x240>)
 8013012:	2200      	movs	r2, #0
 8013014:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013016:	4b0a      	ldr	r3, [pc, #40]	; (8013040 <ip4_input+0x240>)
 8013018:	2200      	movs	r2, #0
 801301a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801301c:	4b08      	ldr	r3, [pc, #32]	; (8013040 <ip4_input+0x240>)
 801301e:	2200      	movs	r2, #0
 8013020:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013022:	4b07      	ldr	r3, [pc, #28]	; (8013040 <ip4_input+0x240>)
 8013024:	2200      	movs	r2, #0
 8013026:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013028:	4b05      	ldr	r3, [pc, #20]	; (8013040 <ip4_input+0x240>)
 801302a:	2200      	movs	r2, #0
 801302c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801302e:	4b04      	ldr	r3, [pc, #16]	; (8013040 <ip4_input+0x240>)
 8013030:	2200      	movs	r2, #0
 8013032:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013034:	2300      	movs	r3, #0
}
 8013036:	4618      	mov	r0, r3
 8013038:	3718      	adds	r7, #24
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	2002aef4 	.word	0x2002aef4
 8013044:	2002e63c 	.word	0x2002e63c

08013048 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b08a      	sub	sp, #40	; 0x28
 801304c:	af04      	add	r7, sp, #16
 801304e:	60f8      	str	r0, [r7, #12]
 8013050:	60b9      	str	r1, [r7, #8]
 8013052:	607a      	str	r2, [r7, #4]
 8013054:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d009      	beq.n	8013074 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d003      	beq.n	801306e <ip4_output_if+0x26>
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d102      	bne.n	8013074 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013070:	3304      	adds	r3, #4
 8013072:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013074:	78fa      	ldrb	r2, [r7, #3]
 8013076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013078:	9302      	str	r3, [sp, #8]
 801307a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801307e:	9301      	str	r3, [sp, #4]
 8013080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013084:	9300      	str	r3, [sp, #0]
 8013086:	4613      	mov	r3, r2
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	6979      	ldr	r1, [r7, #20]
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f000 f805 	bl	801309c <ip4_output_if_src>
 8013092:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013094:	4618      	mov	r0, r3
 8013096:	3718      	adds	r7, #24
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b088      	sub	sp, #32
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	607a      	str	r2, [r7, #4]
 80130a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	7b9b      	ldrb	r3, [r3, #14]
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d006      	beq.n	80130c0 <ip4_output_if_src+0x24>
 80130b2:	4b4b      	ldr	r3, [pc, #300]	; (80131e0 <ip4_output_if_src+0x144>)
 80130b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80130b8:	494a      	ldr	r1, [pc, #296]	; (80131e4 <ip4_output_if_src+0x148>)
 80130ba:	484b      	ldr	r0, [pc, #300]	; (80131e8 <ip4_output_if_src+0x14c>)
 80130bc:	f002 fc36 	bl	801592c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d060      	beq.n	8013188 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80130c6:	2314      	movs	r3, #20
 80130c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80130ca:	2114      	movs	r1, #20
 80130cc:	68f8      	ldr	r0, [r7, #12]
 80130ce:	f7f8 f92f 	bl	800b330 <pbuf_add_header>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d002      	beq.n	80130de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80130d8:	f06f 0301 	mvn.w	r3, #1
 80130dc:	e07c      	b.n	80131d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	895b      	ldrh	r3, [r3, #10]
 80130e8:	2b13      	cmp	r3, #19
 80130ea:	d806      	bhi.n	80130fa <ip4_output_if_src+0x5e>
 80130ec:	4b3c      	ldr	r3, [pc, #240]	; (80131e0 <ip4_output_if_src+0x144>)
 80130ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 80130f2:	493e      	ldr	r1, [pc, #248]	; (80131ec <ip4_output_if_src+0x150>)
 80130f4:	483c      	ldr	r0, [pc, #240]	; (80131e8 <ip4_output_if_src+0x14c>)
 80130f6:	f002 fc19 	bl	801592c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	78fa      	ldrb	r2, [r7, #3]
 80130fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013100:	69fb      	ldr	r3, [r7, #28]
 8013102:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013106:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013110:	8b7b      	ldrh	r3, [r7, #26]
 8013112:	089b      	lsrs	r3, r3, #2
 8013114:	b29b      	uxth	r3, r3
 8013116:	b2db      	uxtb	r3, r3
 8013118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801311c:	b2da      	uxtb	r2, r3
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013128:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	891b      	ldrh	r3, [r3, #8]
 801312e:	4618      	mov	r0, r3
 8013130:	f7f6 fda2 	bl	8009c78 <lwip_htons>
 8013134:	4603      	mov	r3, r0
 8013136:	461a      	mov	r2, r3
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	2200      	movs	r2, #0
 8013140:	719a      	strb	r2, [r3, #6]
 8013142:	2200      	movs	r2, #0
 8013144:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013146:	4b2a      	ldr	r3, [pc, #168]	; (80131f0 <ip4_output_if_src+0x154>)
 8013148:	881b      	ldrh	r3, [r3, #0]
 801314a:	4618      	mov	r0, r3
 801314c:	f7f6 fd94 	bl	8009c78 <lwip_htons>
 8013150:	4603      	mov	r3, r0
 8013152:	461a      	mov	r2, r3
 8013154:	69fb      	ldr	r3, [r7, #28]
 8013156:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013158:	4b25      	ldr	r3, [pc, #148]	; (80131f0 <ip4_output_if_src+0x154>)
 801315a:	881b      	ldrh	r3, [r3, #0]
 801315c:	3301      	adds	r3, #1
 801315e:	b29a      	uxth	r2, r3
 8013160:	4b23      	ldr	r3, [pc, #140]	; (80131f0 <ip4_output_if_src+0x154>)
 8013162:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d104      	bne.n	8013174 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801316a:	4b22      	ldr	r3, [pc, #136]	; (80131f4 <ip4_output_if_src+0x158>)
 801316c:	681a      	ldr	r2, [r3, #0]
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	60da      	str	r2, [r3, #12]
 8013172:	e003      	b.n	801317c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	681a      	ldr	r2, [r3, #0]
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	2200      	movs	r2, #0
 8013180:	729a      	strb	r2, [r3, #10]
 8013182:	2200      	movs	r2, #0
 8013184:	72da      	strb	r2, [r3, #11]
 8013186:	e00f      	b.n	80131a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	895b      	ldrh	r3, [r3, #10]
 801318c:	2b13      	cmp	r3, #19
 801318e:	d802      	bhi.n	8013196 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013190:	f06f 0301 	mvn.w	r3, #1
 8013194:	e020      	b.n	80131d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	691b      	ldr	r3, [r3, #16]
 80131a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80131a2:	f107 0314 	add.w	r3, r7, #20
 80131a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80131a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00c      	beq.n	80131ca <ip4_output_if_src+0x12e>
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	891a      	ldrh	r2, [r3, #8]
 80131b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d906      	bls.n	80131ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80131c0:	68f8      	ldr	r0, [r7, #12]
 80131c2:	f000 fd53 	bl	8013c6c <ip4_frag>
 80131c6:	4603      	mov	r3, r0
 80131c8:	e006      	b.n	80131d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80131ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131cc:	695b      	ldr	r3, [r3, #20]
 80131ce:	687a      	ldr	r2, [r7, #4]
 80131d0:	68f9      	ldr	r1, [r7, #12]
 80131d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131d4:	4798      	blx	r3
 80131d6:	4603      	mov	r3, r0
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3720      	adds	r7, #32
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	08019528 	.word	0x08019528
 80131e4:	0801955c 	.word	0x0801955c
 80131e8:	08019568 	.word	0x08019568
 80131ec:	08019590 	.word	0x08019590
 80131f0:	2002e79a 	.word	0x2002e79a
 80131f4:	08019cb8 	.word	0x08019cb8

080131f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80131f8:	b480      	push	{r7}
 80131fa:	b085      	sub	sp, #20
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801320c:	d002      	beq.n	8013214 <ip4_addr_isbroadcast_u32+0x1c>
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d101      	bne.n	8013218 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013214:	2301      	movs	r3, #1
 8013216:	e02a      	b.n	801326e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801321e:	f003 0302 	and.w	r3, r3, #2
 8013222:	2b00      	cmp	r3, #0
 8013224:	d101      	bne.n	801322a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013226:	2300      	movs	r3, #0
 8013228:	e021      	b.n	801326e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	3304      	adds	r3, #4
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	687a      	ldr	r2, [r7, #4]
 8013232:	429a      	cmp	r2, r3
 8013234:	d101      	bne.n	801323a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013236:	2300      	movs	r3, #0
 8013238:	e019      	b.n	801326e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801323a:	68fa      	ldr	r2, [r7, #12]
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	3304      	adds	r3, #4
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	405a      	eors	r2, r3
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	3308      	adds	r3, #8
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4013      	ands	r3, r2
 801324c:	2b00      	cmp	r3, #0
 801324e:	d10d      	bne.n	801326c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	3308      	adds	r3, #8
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	43da      	mvns	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	3308      	adds	r3, #8
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013264:	429a      	cmp	r2, r3
 8013266:	d101      	bne.n	801326c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013268:	2301      	movs	r3, #1
 801326a:	e000      	b.n	801326e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801326c:	2300      	movs	r3, #0
  }
}
 801326e:	4618      	mov	r0, r3
 8013270:	3714      	adds	r7, #20
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr
	...

0801327c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013282:	2300      	movs	r3, #0
 8013284:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013286:	4b12      	ldr	r3, [pc, #72]	; (80132d0 <ip_reass_tmr+0x54>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801328c:	e018      	b.n	80132c0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	7fdb      	ldrb	r3, [r3, #31]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d00b      	beq.n	80132ae <ip_reass_tmr+0x32>
      r->timer--;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	7fdb      	ldrb	r3, [r3, #31]
 801329a:	3b01      	subs	r3, #1
 801329c:	b2da      	uxtb	r2, r3
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	60fb      	str	r3, [r7, #12]
 80132ac:	e008      	b.n	80132c0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80132b8:	68b9      	ldr	r1, [r7, #8]
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f000 f80a 	bl	80132d4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d1e3      	bne.n	801328e <ip_reass_tmr+0x12>
    }
  }
}
 80132c6:	bf00      	nop
 80132c8:	bf00      	nop
 80132ca:	3710      	adds	r7, #16
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}
 80132d0:	2002e79c 	.word	0x2002e79c

080132d4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b088      	sub	sp, #32
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80132de:	2300      	movs	r3, #0
 80132e0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d105      	bne.n	80132f6 <ip_reass_free_complete_datagram+0x22>
 80132ea:	4b45      	ldr	r3, [pc, #276]	; (8013400 <ip_reass_free_complete_datagram+0x12c>)
 80132ec:	22ab      	movs	r2, #171	; 0xab
 80132ee:	4945      	ldr	r1, [pc, #276]	; (8013404 <ip_reass_free_complete_datagram+0x130>)
 80132f0:	4845      	ldr	r0, [pc, #276]	; (8013408 <ip_reass_free_complete_datagram+0x134>)
 80132f2:	f002 fb1b 	bl	801592c <iprintf>
  if (prev != NULL) {
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d00a      	beq.n	8013312 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	429a      	cmp	r2, r3
 8013304:	d005      	beq.n	8013312 <ip_reass_free_complete_datagram+0x3e>
 8013306:	4b3e      	ldr	r3, [pc, #248]	; (8013400 <ip_reass_free_complete_datagram+0x12c>)
 8013308:	22ad      	movs	r2, #173	; 0xad
 801330a:	4940      	ldr	r1, [pc, #256]	; (801340c <ip_reass_free_complete_datagram+0x138>)
 801330c:	483e      	ldr	r0, [pc, #248]	; (8013408 <ip_reass_free_complete_datagram+0x134>)
 801330e:	f002 fb0d 	bl	801592c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	685b      	ldr	r3, [r3, #4]
 8013318:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	889b      	ldrh	r3, [r3, #4]
 801331e:	b29b      	uxth	r3, r3
 8013320:	2b00      	cmp	r3, #0
 8013322:	d12a      	bne.n	801337a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	681a      	ldr	r2, [r3, #0]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	6858      	ldr	r0, [r3, #4]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	3308      	adds	r3, #8
 801333a:	2214      	movs	r2, #20
 801333c:	4619      	mov	r1, r3
 801333e:	f002 f9d3 	bl	80156e8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013342:	2101      	movs	r1, #1
 8013344:	69b8      	ldr	r0, [r7, #24]
 8013346:	f7ff fc47 	bl	8012bd8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801334a:	69b8      	ldr	r0, [r7, #24]
 801334c:	f7f8 f914 	bl	800b578 <pbuf_clen>
 8013350:	4603      	mov	r3, r0
 8013352:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013354:	8bfa      	ldrh	r2, [r7, #30]
 8013356:	8a7b      	ldrh	r3, [r7, #18]
 8013358:	4413      	add	r3, r2
 801335a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801335e:	db05      	blt.n	801336c <ip_reass_free_complete_datagram+0x98>
 8013360:	4b27      	ldr	r3, [pc, #156]	; (8013400 <ip_reass_free_complete_datagram+0x12c>)
 8013362:	22bc      	movs	r2, #188	; 0xbc
 8013364:	492a      	ldr	r1, [pc, #168]	; (8013410 <ip_reass_free_complete_datagram+0x13c>)
 8013366:	4828      	ldr	r0, [pc, #160]	; (8013408 <ip_reass_free_complete_datagram+0x134>)
 8013368:	f002 fae0 	bl	801592c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801336c:	8bfa      	ldrh	r2, [r7, #30]
 801336e:	8a7b      	ldrh	r3, [r7, #18]
 8013370:	4413      	add	r3, r2
 8013372:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013374:	69b8      	ldr	r0, [r7, #24]
 8013376:	f7f8 f871 	bl	800b45c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013380:	e01f      	b.n	80133c2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013388:	69bb      	ldr	r3, [r7, #24]
 801338a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013392:	68f8      	ldr	r0, [r7, #12]
 8013394:	f7f8 f8f0 	bl	800b578 <pbuf_clen>
 8013398:	4603      	mov	r3, r0
 801339a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801339c:	8bfa      	ldrh	r2, [r7, #30]
 801339e:	8a7b      	ldrh	r3, [r7, #18]
 80133a0:	4413      	add	r3, r2
 80133a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133a6:	db05      	blt.n	80133b4 <ip_reass_free_complete_datagram+0xe0>
 80133a8:	4b15      	ldr	r3, [pc, #84]	; (8013400 <ip_reass_free_complete_datagram+0x12c>)
 80133aa:	22cc      	movs	r2, #204	; 0xcc
 80133ac:	4918      	ldr	r1, [pc, #96]	; (8013410 <ip_reass_free_complete_datagram+0x13c>)
 80133ae:	4816      	ldr	r0, [pc, #88]	; (8013408 <ip_reass_free_complete_datagram+0x134>)
 80133b0:	f002 fabc 	bl	801592c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80133b4:	8bfa      	ldrh	r2, [r7, #30]
 80133b6:	8a7b      	ldrh	r3, [r7, #18]
 80133b8:	4413      	add	r3, r2
 80133ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80133bc:	68f8      	ldr	r0, [r7, #12]
 80133be:	f7f8 f84d 	bl	800b45c <pbuf_free>
  while (p != NULL) {
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d1dc      	bne.n	8013382 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80133c8:	6839      	ldr	r1, [r7, #0]
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f000 f8c2 	bl	8013554 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80133d0:	4b10      	ldr	r3, [pc, #64]	; (8013414 <ip_reass_free_complete_datagram+0x140>)
 80133d2:	881b      	ldrh	r3, [r3, #0]
 80133d4:	8bfa      	ldrh	r2, [r7, #30]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d905      	bls.n	80133e6 <ip_reass_free_complete_datagram+0x112>
 80133da:	4b09      	ldr	r3, [pc, #36]	; (8013400 <ip_reass_free_complete_datagram+0x12c>)
 80133dc:	22d2      	movs	r2, #210	; 0xd2
 80133de:	490e      	ldr	r1, [pc, #56]	; (8013418 <ip_reass_free_complete_datagram+0x144>)
 80133e0:	4809      	ldr	r0, [pc, #36]	; (8013408 <ip_reass_free_complete_datagram+0x134>)
 80133e2:	f002 faa3 	bl	801592c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80133e6:	4b0b      	ldr	r3, [pc, #44]	; (8013414 <ip_reass_free_complete_datagram+0x140>)
 80133e8:	881a      	ldrh	r2, [r3, #0]
 80133ea:	8bfb      	ldrh	r3, [r7, #30]
 80133ec:	1ad3      	subs	r3, r2, r3
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	4b08      	ldr	r3, [pc, #32]	; (8013414 <ip_reass_free_complete_datagram+0x140>)
 80133f2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80133f4:	8bfb      	ldrh	r3, [r7, #30]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3720      	adds	r7, #32
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
 80133fe:	bf00      	nop
 8013400:	080195c0 	.word	0x080195c0
 8013404:	080195fc 	.word	0x080195fc
 8013408:	08019608 	.word	0x08019608
 801340c:	08019630 	.word	0x08019630
 8013410:	08019644 	.word	0x08019644
 8013414:	2002e7a0 	.word	0x2002e7a0
 8013418:	08019664 	.word	0x08019664

0801341c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b08a      	sub	sp, #40	; 0x28
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013426:	2300      	movs	r3, #0
 8013428:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801342a:	2300      	movs	r3, #0
 801342c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801342e:	2300      	movs	r3, #0
 8013430:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013432:	2300      	movs	r3, #0
 8013434:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013436:	2300      	movs	r3, #0
 8013438:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801343a:	4b28      	ldr	r3, [pc, #160]	; (80134dc <ip_reass_remove_oldest_datagram+0xc0>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013440:	e030      	b.n	80134a4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013444:	695a      	ldr	r2, [r3, #20]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	429a      	cmp	r2, r3
 801344c:	d10c      	bne.n	8013468 <ip_reass_remove_oldest_datagram+0x4c>
 801344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013450:	699a      	ldr	r2, [r3, #24]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	691b      	ldr	r3, [r3, #16]
 8013456:	429a      	cmp	r2, r3
 8013458:	d106      	bne.n	8013468 <ip_reass_remove_oldest_datagram+0x4c>
 801345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345c:	899a      	ldrh	r2, [r3, #12]
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	889b      	ldrh	r3, [r3, #4]
 8013462:	b29b      	uxth	r3, r3
 8013464:	429a      	cmp	r2, r3
 8013466:	d014      	beq.n	8013492 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	3301      	adds	r3, #1
 801346c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801346e:	6a3b      	ldr	r3, [r7, #32]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d104      	bne.n	801347e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013476:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	61bb      	str	r3, [r7, #24]
 801347c:	e009      	b.n	8013492 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013480:	7fda      	ldrb	r2, [r3, #31]
 8013482:	6a3b      	ldr	r3, [r7, #32]
 8013484:	7fdb      	ldrb	r3, [r3, #31]
 8013486:	429a      	cmp	r2, r3
 8013488:	d803      	bhi.n	8013492 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801348e:	69fb      	ldr	r3, [r7, #28]
 8013490:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d001      	beq.n	801349e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80134a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d1cb      	bne.n	8013442 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80134aa:	6a3b      	ldr	r3, [r7, #32]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d008      	beq.n	80134c2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80134b0:	69b9      	ldr	r1, [r7, #24]
 80134b2:	6a38      	ldr	r0, [r7, #32]
 80134b4:	f7ff ff0e 	bl	80132d4 <ip_reass_free_complete_datagram>
 80134b8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80134ba:	697a      	ldr	r2, [r7, #20]
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	4413      	add	r3, r2
 80134c0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80134c2:	697a      	ldr	r2, [r7, #20]
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	da02      	bge.n	80134d0 <ip_reass_remove_oldest_datagram+0xb4>
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	dcac      	bgt.n	801342a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80134d0:	697b      	ldr	r3, [r7, #20]
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3728      	adds	r7, #40	; 0x28
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	2002e79c 	.word	0x2002e79c

080134e0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80134ea:	2004      	movs	r0, #4
 80134ec:	f7f7 f89c 	bl	800a628 <memp_malloc>
 80134f0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d110      	bne.n	801351a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80134f8:	6839      	ldr	r1, [r7, #0]
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f7ff ff8e 	bl	801341c <ip_reass_remove_oldest_datagram>
 8013500:	4602      	mov	r2, r0
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	4293      	cmp	r3, r2
 8013506:	dc03      	bgt.n	8013510 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013508:	2004      	movs	r0, #4
 801350a:	f7f7 f88d 	bl	800a628 <memp_malloc>
 801350e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d101      	bne.n	801351a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013516:	2300      	movs	r3, #0
 8013518:	e016      	b.n	8013548 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801351a:	2220      	movs	r2, #32
 801351c:	2100      	movs	r1, #0
 801351e:	68f8      	ldr	r0, [r7, #12]
 8013520:	f002 f90a 	bl	8015738 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	220f      	movs	r2, #15
 8013528:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801352a:	4b09      	ldr	r3, [pc, #36]	; (8013550 <ip_reass_enqueue_new_datagram+0x70>)
 801352c:	681a      	ldr	r2, [r3, #0]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013532:	4a07      	ldr	r2, [pc, #28]	; (8013550 <ip_reass_enqueue_new_datagram+0x70>)
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	3308      	adds	r3, #8
 801353c:	2214      	movs	r2, #20
 801353e:	6879      	ldr	r1, [r7, #4]
 8013540:	4618      	mov	r0, r3
 8013542:	f002 f8d1 	bl	80156e8 <memcpy>
  return ipr;
 8013546:	68fb      	ldr	r3, [r7, #12]
}
 8013548:	4618      	mov	r0, r3
 801354a:	3710      	adds	r7, #16
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	2002e79c 	.word	0x2002e79c

08013554 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801355e:	4b10      	ldr	r3, [pc, #64]	; (80135a0 <ip_reass_dequeue_datagram+0x4c>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	687a      	ldr	r2, [r7, #4]
 8013564:	429a      	cmp	r2, r3
 8013566:	d104      	bne.n	8013572 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	4a0c      	ldr	r2, [pc, #48]	; (80135a0 <ip_reass_dequeue_datagram+0x4c>)
 801356e:	6013      	str	r3, [r2, #0]
 8013570:	e00d      	b.n	801358e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d106      	bne.n	8013586 <ip_reass_dequeue_datagram+0x32>
 8013578:	4b0a      	ldr	r3, [pc, #40]	; (80135a4 <ip_reass_dequeue_datagram+0x50>)
 801357a:	f240 1245 	movw	r2, #325	; 0x145
 801357e:	490a      	ldr	r1, [pc, #40]	; (80135a8 <ip_reass_dequeue_datagram+0x54>)
 8013580:	480a      	ldr	r0, [pc, #40]	; (80135ac <ip_reass_dequeue_datagram+0x58>)
 8013582:	f002 f9d3 	bl	801592c <iprintf>
    prev->next = ipr->next;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801358e:	6879      	ldr	r1, [r7, #4]
 8013590:	2004      	movs	r0, #4
 8013592:	f7f7 f8bf 	bl	800a714 <memp_free>
}
 8013596:	bf00      	nop
 8013598:	3708      	adds	r7, #8
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	2002e79c 	.word	0x2002e79c
 80135a4:	080195c0 	.word	0x080195c0
 80135a8:	08019688 	.word	0x08019688
 80135ac:	08019608 	.word	0x08019608

080135b0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b08c      	sub	sp, #48	; 0x30
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	60b9      	str	r1, [r7, #8]
 80135ba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80135bc:	2300      	movs	r3, #0
 80135be:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80135c0:	2301      	movs	r3, #1
 80135c2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	885b      	ldrh	r3, [r3, #2]
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7f6 fb51 	bl	8009c78 <lwip_htons>
 80135d6:	4603      	mov	r3, r0
 80135d8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80135da:	69fb      	ldr	r3, [r7, #28]
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	f003 030f 	and.w	r3, r3, #15
 80135e2:	b2db      	uxtb	r3, r3
 80135e4:	009b      	lsls	r3, r3, #2
 80135e6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80135e8:	7e7b      	ldrb	r3, [r7, #25]
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	8b7a      	ldrh	r2, [r7, #26]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d202      	bcs.n	80135f8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135f2:	f04f 33ff 	mov.w	r3, #4294967295
 80135f6:	e135      	b.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80135f8:	7e7b      	ldrb	r3, [r7, #25]
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	8b7a      	ldrh	r2, [r7, #26]
 80135fe:	1ad3      	subs	r3, r2, r3
 8013600:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	88db      	ldrh	r3, [r3, #6]
 8013606:	b29b      	uxth	r3, r3
 8013608:	4618      	mov	r0, r3
 801360a:	f7f6 fb35 	bl	8009c78 <lwip_htons>
 801360e:	4603      	mov	r3, r0
 8013610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013614:	b29b      	uxth	r3, r3
 8013616:	00db      	lsls	r3, r3, #3
 8013618:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013622:	2200      	movs	r2, #0
 8013624:	701a      	strb	r2, [r3, #0]
 8013626:	2200      	movs	r2, #0
 8013628:	705a      	strb	r2, [r3, #1]
 801362a:	2200      	movs	r2, #0
 801362c:	709a      	strb	r2, [r3, #2]
 801362e:	2200      	movs	r2, #0
 8013630:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013634:	8afa      	ldrh	r2, [r7, #22]
 8013636:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013638:	8afa      	ldrh	r2, [r7, #22]
 801363a:	8b7b      	ldrh	r3, [r7, #26]
 801363c:	4413      	add	r3, r2
 801363e:	b29a      	uxth	r2, r3
 8013640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013642:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013646:	88db      	ldrh	r3, [r3, #6]
 8013648:	b29b      	uxth	r3, r3
 801364a:	8afa      	ldrh	r2, [r7, #22]
 801364c:	429a      	cmp	r2, r3
 801364e:	d902      	bls.n	8013656 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013650:	f04f 33ff 	mov.w	r3, #4294967295
 8013654:	e106      	b.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	685b      	ldr	r3, [r3, #4]
 801365a:	627b      	str	r3, [r7, #36]	; 0x24
 801365c:	e068      	b.n	8013730 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013666:	889b      	ldrh	r3, [r3, #4]
 8013668:	b29a      	uxth	r2, r3
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	889b      	ldrh	r3, [r3, #4]
 801366e:	b29b      	uxth	r3, r3
 8013670:	429a      	cmp	r2, r3
 8013672:	d235      	bcs.n	80136e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013678:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367c:	2b00      	cmp	r3, #0
 801367e:	d020      	beq.n	80136c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013682:	889b      	ldrh	r3, [r3, #4]
 8013684:	b29a      	uxth	r2, r3
 8013686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013688:	88db      	ldrh	r3, [r3, #6]
 801368a:	b29b      	uxth	r3, r3
 801368c:	429a      	cmp	r2, r3
 801368e:	d307      	bcc.n	80136a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013692:	88db      	ldrh	r3, [r3, #6]
 8013694:	b29a      	uxth	r2, r3
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	889b      	ldrh	r3, [r3, #4]
 801369a:	b29b      	uxth	r3, r3
 801369c:	429a      	cmp	r2, r3
 801369e:	d902      	bls.n	80136a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136a0:	f04f 33ff 	mov.w	r3, #4294967295
 80136a4:	e0de      	b.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80136a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a8:	68ba      	ldr	r2, [r7, #8]
 80136aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80136ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ae:	88db      	ldrh	r3, [r3, #6]
 80136b0:	b29a      	uxth	r2, r3
 80136b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b4:	889b      	ldrh	r3, [r3, #4]
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d03d      	beq.n	8013738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80136bc:	2300      	movs	r3, #0
 80136be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80136c0:	e03a      	b.n	8013738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80136c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c4:	88db      	ldrh	r3, [r3, #6]
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	889b      	ldrh	r3, [r3, #4]
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d902      	bls.n	80136d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136d2:	f04f 33ff 	mov.w	r3, #4294967295
 80136d6:	e0c5      	b.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	68ba      	ldr	r2, [r7, #8]
 80136dc:	605a      	str	r2, [r3, #4]
      break;
 80136de:	e02b      	b.n	8013738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e2:	889b      	ldrh	r3, [r3, #4]
 80136e4:	b29a      	uxth	r2, r3
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	889b      	ldrh	r3, [r3, #4]
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d102      	bne.n	80136f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136f0:	f04f 33ff 	mov.w	r3, #4294967295
 80136f4:	e0b6      	b.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80136f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f8:	889b      	ldrh	r3, [r3, #4]
 80136fa:	b29a      	uxth	r2, r3
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	88db      	ldrh	r3, [r3, #6]
 8013700:	b29b      	uxth	r3, r3
 8013702:	429a      	cmp	r2, r3
 8013704:	d202      	bcs.n	801370c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013706:	f04f 33ff 	mov.w	r3, #4294967295
 801370a:	e0ab      	b.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370e:	2b00      	cmp	r3, #0
 8013710:	d009      	beq.n	8013726 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013714:	88db      	ldrh	r3, [r3, #6]
 8013716:	b29a      	uxth	r2, r3
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	889b      	ldrh	r3, [r3, #4]
 801371c:	b29b      	uxth	r3, r3
 801371e:	429a      	cmp	r2, r3
 8013720:	d001      	beq.n	8013726 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013722:	2300      	movs	r3, #0
 8013724:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013732:	2b00      	cmp	r3, #0
 8013734:	d193      	bne.n	801365e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013736:	e000      	b.n	801373a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013738:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373c:	2b00      	cmp	r3, #0
 801373e:	d12d      	bne.n	801379c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013742:	2b00      	cmp	r3, #0
 8013744:	d01c      	beq.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013748:	88db      	ldrh	r3, [r3, #6]
 801374a:	b29a      	uxth	r2, r3
 801374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801374e:	889b      	ldrh	r3, [r3, #4]
 8013750:	b29b      	uxth	r3, r3
 8013752:	429a      	cmp	r2, r3
 8013754:	d906      	bls.n	8013764 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013756:	4b45      	ldr	r3, [pc, #276]	; (801386c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013758:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801375c:	4944      	ldr	r1, [pc, #272]	; (8013870 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801375e:	4845      	ldr	r0, [pc, #276]	; (8013874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013760:	f002 f8e4 	bl	801592c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013766:	68ba      	ldr	r2, [r7, #8]
 8013768:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376c:	88db      	ldrh	r3, [r3, #6]
 801376e:	b29a      	uxth	r2, r3
 8013770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013772:	889b      	ldrh	r3, [r3, #4]
 8013774:	b29b      	uxth	r3, r3
 8013776:	429a      	cmp	r2, r3
 8013778:	d010      	beq.n	801379c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801377a:	2300      	movs	r3, #0
 801377c:	623b      	str	r3, [r7, #32]
 801377e:	e00d      	b.n	801379c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d006      	beq.n	8013796 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013788:	4b38      	ldr	r3, [pc, #224]	; (801386c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801378a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801378e:	493a      	ldr	r1, [pc, #232]	; (8013878 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013790:	4838      	ldr	r0, [pc, #224]	; (8013874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013792:	f002 f8cb 	bl	801592c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	68ba      	ldr	r2, [r7, #8]
 801379a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d105      	bne.n	80137ae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	7f9b      	ldrb	r3, [r3, #30]
 80137a6:	f003 0301 	and.w	r3, r3, #1
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d059      	beq.n	8013862 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80137ae:	6a3b      	ldr	r3, [r7, #32]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d04f      	beq.n	8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d006      	beq.n	80137ca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	889b      	ldrh	r3, [r3, #4]
 80137c4:	b29b      	uxth	r3, r3
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d002      	beq.n	80137d0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80137ca:	2300      	movs	r3, #0
 80137cc:	623b      	str	r3, [r7, #32]
 80137ce:	e041      	b.n	8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80137d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80137d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80137da:	e012      	b.n	8013802 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80137dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80137e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e4:	88db      	ldrh	r3, [r3, #6]
 80137e6:	b29a      	uxth	r2, r3
 80137e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ea:	889b      	ldrh	r3, [r3, #4]
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d002      	beq.n	80137f8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	623b      	str	r3, [r7, #32]
            break;
 80137f6:	e007      	b.n	8013808 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80137f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80137fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013804:	2b00      	cmp	r3, #0
 8013806:	d1e9      	bne.n	80137dc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013808:	6a3b      	ldr	r3, [r7, #32]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d022      	beq.n	8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d106      	bne.n	8013824 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013816:	4b15      	ldr	r3, [pc, #84]	; (801386c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013818:	f240 12df 	movw	r2, #479	; 0x1df
 801381c:	4917      	ldr	r1, [pc, #92]	; (801387c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801381e:	4815      	ldr	r0, [pc, #84]	; (8013874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013820:	f002 f884 	bl	801592c <iprintf>
          LWIP_ASSERT("sanity check",
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	685b      	ldr	r3, [r3, #4]
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801382c:	429a      	cmp	r2, r3
 801382e:	d106      	bne.n	801383e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013830:	4b0e      	ldr	r3, [pc, #56]	; (801386c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013832:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013836:	4911      	ldr	r1, [pc, #68]	; (801387c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013838:	480e      	ldr	r0, [pc, #56]	; (8013874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801383a:	f002 f877 	bl	801592c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d006      	beq.n	8013854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013846:	4b09      	ldr	r3, [pc, #36]	; (801386c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013848:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801384c:	490c      	ldr	r1, [pc, #48]	; (8013880 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801384e:	4809      	ldr	r0, [pc, #36]	; (8013874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013850:	f002 f86c 	bl	801592c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013854:	6a3b      	ldr	r3, [r7, #32]
 8013856:	2b00      	cmp	r3, #0
 8013858:	bf14      	ite	ne
 801385a:	2301      	movne	r3, #1
 801385c:	2300      	moveq	r3, #0
 801385e:	b2db      	uxtb	r3, r3
 8013860:	e000      	b.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013862:	2300      	movs	r3, #0
}
 8013864:	4618      	mov	r0, r3
 8013866:	3730      	adds	r7, #48	; 0x30
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	080195c0 	.word	0x080195c0
 8013870:	080196a4 	.word	0x080196a4
 8013874:	08019608 	.word	0x08019608
 8013878:	080196c4 	.word	0x080196c4
 801387c:	080196fc 	.word	0x080196fc
 8013880:	0801970c 	.word	0x0801970c

08013884 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b08e      	sub	sp, #56	; 0x38
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	f003 030f 	and.w	r3, r3, #15
 801389a:	b2db      	uxtb	r3, r3
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	2b14      	cmp	r3, #20
 80138a2:	f040 8171 	bne.w	8013b88 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80138a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a8:	88db      	ldrh	r3, [r3, #6]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7f6 f9e3 	bl	8009c78 <lwip_htons>
 80138b2:	4603      	mov	r3, r0
 80138b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138b8:	b29b      	uxth	r3, r3
 80138ba:	00db      	lsls	r3, r3, #3
 80138bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80138be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c0:	885b      	ldrh	r3, [r3, #2]
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7f6 f9d7 	bl	8009c78 <lwip_htons>
 80138ca:	4603      	mov	r3, r0
 80138cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80138ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	f003 030f 	and.w	r3, r3, #15
 80138d6:	b2db      	uxtb	r3, r3
 80138d8:	009b      	lsls	r3, r3, #2
 80138da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80138de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80138e6:	429a      	cmp	r2, r3
 80138e8:	f0c0 8150 	bcc.w	8013b8c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80138ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80138f0:	b29b      	uxth	r3, r3
 80138f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f7f7 fe3d 	bl	800b578 <pbuf_clen>
 80138fe:	4603      	mov	r3, r0
 8013900:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013902:	4b8c      	ldr	r3, [pc, #560]	; (8013b34 <ip4_reass+0x2b0>)
 8013904:	881b      	ldrh	r3, [r3, #0]
 8013906:	461a      	mov	r2, r3
 8013908:	8c3b      	ldrh	r3, [r7, #32]
 801390a:	4413      	add	r3, r2
 801390c:	2b0a      	cmp	r3, #10
 801390e:	dd10      	ble.n	8013932 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013910:	8c3b      	ldrh	r3, [r7, #32]
 8013912:	4619      	mov	r1, r3
 8013914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013916:	f7ff fd81 	bl	801341c <ip_reass_remove_oldest_datagram>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	f000 8137 	beq.w	8013b90 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013922:	4b84      	ldr	r3, [pc, #528]	; (8013b34 <ip4_reass+0x2b0>)
 8013924:	881b      	ldrh	r3, [r3, #0]
 8013926:	461a      	mov	r2, r3
 8013928:	8c3b      	ldrh	r3, [r7, #32]
 801392a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801392c:	2b0a      	cmp	r3, #10
 801392e:	f300 812f 	bgt.w	8013b90 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013932:	4b81      	ldr	r3, [pc, #516]	; (8013b38 <ip4_reass+0x2b4>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	633b      	str	r3, [r7, #48]	; 0x30
 8013938:	e015      	b.n	8013966 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393c:	695a      	ldr	r2, [r3, #20]
 801393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013940:	68db      	ldr	r3, [r3, #12]
 8013942:	429a      	cmp	r2, r3
 8013944:	d10c      	bne.n	8013960 <ip4_reass+0xdc>
 8013946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013948:	699a      	ldr	r2, [r3, #24]
 801394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801394c:	691b      	ldr	r3, [r3, #16]
 801394e:	429a      	cmp	r2, r3
 8013950:	d106      	bne.n	8013960 <ip4_reass+0xdc>
 8013952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013954:	899a      	ldrh	r2, [r3, #12]
 8013956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013958:	889b      	ldrh	r3, [r3, #4]
 801395a:	b29b      	uxth	r3, r3
 801395c:	429a      	cmp	r2, r3
 801395e:	d006      	beq.n	801396e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	633b      	str	r3, [r7, #48]	; 0x30
 8013966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013968:	2b00      	cmp	r3, #0
 801396a:	d1e6      	bne.n	801393a <ip4_reass+0xb6>
 801396c:	e000      	b.n	8013970 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801396e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013972:	2b00      	cmp	r3, #0
 8013974:	d109      	bne.n	801398a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013976:	8c3b      	ldrh	r3, [r7, #32]
 8013978:	4619      	mov	r1, r3
 801397a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801397c:	f7ff fdb0 	bl	80134e0 <ip_reass_enqueue_new_datagram>
 8013980:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	2b00      	cmp	r3, #0
 8013986:	d11c      	bne.n	80139c2 <ip4_reass+0x13e>
      goto nullreturn;
 8013988:	e105      	b.n	8013b96 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398c:	88db      	ldrh	r3, [r3, #6]
 801398e:	b29b      	uxth	r3, r3
 8013990:	4618      	mov	r0, r3
 8013992:	f7f6 f971 	bl	8009c78 <lwip_htons>
 8013996:	4603      	mov	r3, r0
 8013998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801399c:	2b00      	cmp	r3, #0
 801399e:	d110      	bne.n	80139c2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80139a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a2:	89db      	ldrh	r3, [r3, #14]
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7f6 f967 	bl	8009c78 <lwip_htons>
 80139aa:	4603      	mov	r3, r0
 80139ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d006      	beq.n	80139c2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80139b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b6:	3308      	adds	r3, #8
 80139b8:	2214      	movs	r2, #20
 80139ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139bc:	4618      	mov	r0, r3
 80139be:	f001 fe93 	bl	80156e8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80139c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c4:	88db      	ldrh	r3, [r3, #6]
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	f003 0320 	and.w	r3, r3, #32
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	bf0c      	ite	eq
 80139d0:	2301      	moveq	r3, #1
 80139d2:	2300      	movne	r3, #0
 80139d4:	b2db      	uxtb	r3, r3
 80139d6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d00e      	beq.n	80139fc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80139de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80139e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139e2:	4413      	add	r3, r2
 80139e4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80139e6:	8b7a      	ldrh	r2, [r7, #26]
 80139e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80139ea:	429a      	cmp	r2, r3
 80139ec:	f0c0 80a0 	bcc.w	8013b30 <ip4_reass+0x2ac>
 80139f0:	8b7b      	ldrh	r3, [r7, #26]
 80139f2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80139f6:	4293      	cmp	r3, r2
 80139f8:	f200 809a 	bhi.w	8013b30 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80139fc:	69fa      	ldr	r2, [r7, #28]
 80139fe:	6879      	ldr	r1, [r7, #4]
 8013a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a02:	f7ff fdd5 	bl	80135b0 <ip_reass_chain_frag_into_datagram_and_validate>
 8013a06:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a0e:	f000 809b 	beq.w	8013b48 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013a12:	4b48      	ldr	r3, [pc, #288]	; (8013b34 <ip4_reass+0x2b0>)
 8013a14:	881a      	ldrh	r2, [r3, #0]
 8013a16:	8c3b      	ldrh	r3, [r7, #32]
 8013a18:	4413      	add	r3, r2
 8013a1a:	b29a      	uxth	r2, r3
 8013a1c:	4b45      	ldr	r3, [pc, #276]	; (8013b34 <ip4_reass+0x2b0>)
 8013a1e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00d      	beq.n	8013a42 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a2a:	4413      	add	r3, r2
 8013a2c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a30:	8a7a      	ldrh	r2, [r7, #18]
 8013a32:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a36:	7f9b      	ldrb	r3, [r3, #30]
 8013a38:	f043 0301 	orr.w	r3, r3, #1
 8013a3c:	b2da      	uxtb	r2, r3
 8013a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a40:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013a42:	697b      	ldr	r3, [r7, #20]
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d171      	bne.n	8013b2c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4a:	8b9b      	ldrh	r3, [r3, #28]
 8013a4c:	3314      	adds	r3, #20
 8013a4e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a5c:	685b      	ldr	r3, [r3, #4]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a64:	3308      	adds	r3, #8
 8013a66:	2214      	movs	r2, #20
 8013a68:	4619      	mov	r1, r3
 8013a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a6c:	f001 fe3c 	bl	80156e8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013a70:	8a3b      	ldrh	r3, [r7, #16]
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7f6 f900 	bl	8009c78 <lwip_htons>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	2200      	movs	r2, #0
 8013a84:	719a      	strb	r2, [r3, #6]
 8013a86:	2200      	movs	r2, #0
 8013a88:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	729a      	strb	r2, [r3, #10]
 8013a90:	2200      	movs	r2, #0
 8013a92:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013a9a:	e00d      	b.n	8013ab8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013aa2:	2114      	movs	r1, #20
 8013aa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013aa6:	f7f7 fc53 	bl	800b350 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f7f7 fda3 	bl	800b5f8 <pbuf_cat>
      r = iprh->next_pbuf;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d1ee      	bne.n	8013a9c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013abe:	4b1e      	ldr	r3, [pc, #120]	; (8013b38 <ip4_reass+0x2b4>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d102      	bne.n	8013ace <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013acc:	e010      	b.n	8013af0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ace:	4b1a      	ldr	r3, [pc, #104]	; (8013b38 <ip4_reass+0x2b4>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ad4:	e007      	b.n	8013ae6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d006      	beq.n	8013aee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d1f4      	bne.n	8013ad6 <ip4_reass+0x252>
 8013aec:	e000      	b.n	8013af0 <ip4_reass+0x26c>
          break;
 8013aee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013af4:	f7ff fd2e 	bl	8013554 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f7f7 fd3d 	bl	800b578 <pbuf_clen>
 8013afe:	4603      	mov	r3, r0
 8013b00:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013b02:	4b0c      	ldr	r3, [pc, #48]	; (8013b34 <ip4_reass+0x2b0>)
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	8c3a      	ldrh	r2, [r7, #32]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d906      	bls.n	8013b1a <ip4_reass+0x296>
 8013b0c:	4b0b      	ldr	r3, [pc, #44]	; (8013b3c <ip4_reass+0x2b8>)
 8013b0e:	f240 229b 	movw	r2, #667	; 0x29b
 8013b12:	490b      	ldr	r1, [pc, #44]	; (8013b40 <ip4_reass+0x2bc>)
 8013b14:	480b      	ldr	r0, [pc, #44]	; (8013b44 <ip4_reass+0x2c0>)
 8013b16:	f001 ff09 	bl	801592c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013b1a:	4b06      	ldr	r3, [pc, #24]	; (8013b34 <ip4_reass+0x2b0>)
 8013b1c:	881a      	ldrh	r2, [r3, #0]
 8013b1e:	8c3b      	ldrh	r3, [r7, #32]
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	b29a      	uxth	r2, r3
 8013b24:	4b03      	ldr	r3, [pc, #12]	; (8013b34 <ip4_reass+0x2b0>)
 8013b26:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	e038      	b.n	8013b9e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	e036      	b.n	8013b9e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013b30:	bf00      	nop
 8013b32:	e00a      	b.n	8013b4a <ip4_reass+0x2c6>
 8013b34:	2002e7a0 	.word	0x2002e7a0
 8013b38:	2002e79c 	.word	0x2002e79c
 8013b3c:	080195c0 	.word	0x080195c0
 8013b40:	08019730 	.word	0x08019730
 8013b44:	08019608 	.word	0x08019608
    goto nullreturn_ipr;
 8013b48:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d106      	bne.n	8013b5e <ip4_reass+0x2da>
 8013b50:	4b15      	ldr	r3, [pc, #84]	; (8013ba8 <ip4_reass+0x324>)
 8013b52:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013b56:	4915      	ldr	r1, [pc, #84]	; (8013bac <ip4_reass+0x328>)
 8013b58:	4815      	ldr	r0, [pc, #84]	; (8013bb0 <ip4_reass+0x32c>)
 8013b5a:	f001 fee7 	bl	801592c <iprintf>
  if (ipr->p == NULL) {
 8013b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b60:	685b      	ldr	r3, [r3, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d116      	bne.n	8013b94 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013b66:	4b13      	ldr	r3, [pc, #76]	; (8013bb4 <ip4_reass+0x330>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d006      	beq.n	8013b7e <ip4_reass+0x2fa>
 8013b70:	4b0d      	ldr	r3, [pc, #52]	; (8013ba8 <ip4_reass+0x324>)
 8013b72:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013b76:	4910      	ldr	r1, [pc, #64]	; (8013bb8 <ip4_reass+0x334>)
 8013b78:	480d      	ldr	r0, [pc, #52]	; (8013bb0 <ip4_reass+0x32c>)
 8013b7a:	f001 fed7 	bl	801592c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013b7e:	2100      	movs	r1, #0
 8013b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b82:	f7ff fce7 	bl	8013554 <ip_reass_dequeue_datagram>
 8013b86:	e006      	b.n	8013b96 <ip4_reass+0x312>
    goto nullreturn;
 8013b88:	bf00      	nop
 8013b8a:	e004      	b.n	8013b96 <ip4_reass+0x312>
    goto nullreturn;
 8013b8c:	bf00      	nop
 8013b8e:	e002      	b.n	8013b96 <ip4_reass+0x312>
      goto nullreturn;
 8013b90:	bf00      	nop
 8013b92:	e000      	b.n	8013b96 <ip4_reass+0x312>
  }

nullreturn:
 8013b94:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f7f7 fc60 	bl	800b45c <pbuf_free>
  return NULL;
 8013b9c:	2300      	movs	r3, #0
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3738      	adds	r7, #56	; 0x38
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}
 8013ba6:	bf00      	nop
 8013ba8:	080195c0 	.word	0x080195c0
 8013bac:	0801974c 	.word	0x0801974c
 8013bb0:	08019608 	.word	0x08019608
 8013bb4:	2002e79c 	.word	0x2002e79c
 8013bb8:	08019758 	.word	0x08019758

08013bbc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013bc0:	2005      	movs	r0, #5
 8013bc2:	f7f6 fd31 	bl	800a628 <memp_malloc>
 8013bc6:	4603      	mov	r3, r0
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d106      	bne.n	8013be8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013bda:	4b07      	ldr	r3, [pc, #28]	; (8013bf8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013bdc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013be0:	4906      	ldr	r1, [pc, #24]	; (8013bfc <ip_frag_free_pbuf_custom_ref+0x30>)
 8013be2:	4807      	ldr	r0, [pc, #28]	; (8013c00 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013be4:	f001 fea2 	bl	801592c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013be8:	6879      	ldr	r1, [r7, #4]
 8013bea:	2005      	movs	r0, #5
 8013bec:	f7f6 fd92 	bl	800a714 <memp_free>
}
 8013bf0:	bf00      	nop
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	080195c0 	.word	0x080195c0
 8013bfc:	08019778 	.word	0x08019778
 8013c00:	08019608 	.word	0x08019608

08013c04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d106      	bne.n	8013c24 <ipfrag_free_pbuf_custom+0x20>
 8013c16:	4b11      	ldr	r3, [pc, #68]	; (8013c5c <ipfrag_free_pbuf_custom+0x58>)
 8013c18:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013c1c:	4910      	ldr	r1, [pc, #64]	; (8013c60 <ipfrag_free_pbuf_custom+0x5c>)
 8013c1e:	4811      	ldr	r0, [pc, #68]	; (8013c64 <ipfrag_free_pbuf_custom+0x60>)
 8013c20:	f001 fe84 	bl	801592c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d006      	beq.n	8013c3a <ipfrag_free_pbuf_custom+0x36>
 8013c2c:	4b0b      	ldr	r3, [pc, #44]	; (8013c5c <ipfrag_free_pbuf_custom+0x58>)
 8013c2e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013c32:	490d      	ldr	r1, [pc, #52]	; (8013c68 <ipfrag_free_pbuf_custom+0x64>)
 8013c34:	480b      	ldr	r0, [pc, #44]	; (8013c64 <ipfrag_free_pbuf_custom+0x60>)
 8013c36:	f001 fe79 	bl	801592c <iprintf>
  if (pcr->original != NULL) {
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	695b      	ldr	r3, [r3, #20]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d004      	beq.n	8013c4c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	695b      	ldr	r3, [r3, #20]
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7f7 fc08 	bl	800b45c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f7ff ffbd 	bl	8013bcc <ip_frag_free_pbuf_custom_ref>
}
 8013c52:	bf00      	nop
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	080195c0 	.word	0x080195c0
 8013c60:	08019784 	.word	0x08019784
 8013c64:	08019608 	.word	0x08019608
 8013c68:	08019790 	.word	0x08019790

08013c6c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b094      	sub	sp, #80	; 0x50
 8013c70:	af02      	add	r7, sp, #8
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c82:	3b14      	subs	r3, #20
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	da00      	bge.n	8013c8a <ip4_frag+0x1e>
 8013c88:	3307      	adds	r3, #7
 8013c8a:	10db      	asrs	r3, r3, #3
 8013c8c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013c8e:	2314      	movs	r3, #20
 8013c90:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9e:	781b      	ldrb	r3, [r3, #0]
 8013ca0:	f003 030f 	and.w	r3, r3, #15
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	b2db      	uxtb	r3, r3
 8013caa:	2b14      	cmp	r3, #20
 8013cac:	d002      	beq.n	8013cb4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013cae:	f06f 0305 	mvn.w	r3, #5
 8013cb2:	e110      	b.n	8013ed6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	895b      	ldrh	r3, [r3, #10]
 8013cb8:	2b13      	cmp	r3, #19
 8013cba:	d809      	bhi.n	8013cd0 <ip4_frag+0x64>
 8013cbc:	4b88      	ldr	r3, [pc, #544]	; (8013ee0 <ip4_frag+0x274>)
 8013cbe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013cc2:	4988      	ldr	r1, [pc, #544]	; (8013ee4 <ip4_frag+0x278>)
 8013cc4:	4888      	ldr	r0, [pc, #544]	; (8013ee8 <ip4_frag+0x27c>)
 8013cc6:	f001 fe31 	bl	801592c <iprintf>
 8013cca:	f06f 0305 	mvn.w	r3, #5
 8013cce:	e102      	b.n	8013ed6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd2:	88db      	ldrh	r3, [r3, #6]
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f5 ffce 	bl	8009c78 <lwip_htons>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013ce0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013cea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	891b      	ldrh	r3, [r3, #8]
 8013cf6:	3b14      	subs	r3, #20
 8013cf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013cfc:	e0e1      	b.n	8013ec2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013cfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d00:	00db      	lsls	r3, r3, #3
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d08:	4293      	cmp	r3, r2
 8013d0a:	bf28      	it	cs
 8013d0c:	4613      	movcs	r3, r2
 8013d0e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013d10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d14:	2114      	movs	r1, #20
 8013d16:	200e      	movs	r0, #14
 8013d18:	f7f7 f8bc 	bl	800ae94 <pbuf_alloc>
 8013d1c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f000 80d5 	beq.w	8013ed0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d28:	895b      	ldrh	r3, [r3, #10]
 8013d2a:	2b13      	cmp	r3, #19
 8013d2c:	d806      	bhi.n	8013d3c <ip4_frag+0xd0>
 8013d2e:	4b6c      	ldr	r3, [pc, #432]	; (8013ee0 <ip4_frag+0x274>)
 8013d30:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013d34:	496d      	ldr	r1, [pc, #436]	; (8013eec <ip4_frag+0x280>)
 8013d36:	486c      	ldr	r0, [pc, #432]	; (8013ee8 <ip4_frag+0x27c>)
 8013d38:	f001 fdf8 	bl	801592c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	2214      	movs	r2, #20
 8013d42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013d44:	4618      	mov	r0, r3
 8013d46:	f001 fccf 	bl	80156e8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013d50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013d52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013d56:	e064      	b.n	8013e22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	895a      	ldrh	r2, [r3, #10]
 8013d5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d5e:	1ad3      	subs	r3, r2, r3
 8013d60:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	895b      	ldrh	r3, [r3, #10]
 8013d66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d906      	bls.n	8013d7a <ip4_frag+0x10e>
 8013d6c:	4b5c      	ldr	r3, [pc, #368]	; (8013ee0 <ip4_frag+0x274>)
 8013d6e:	f240 322d 	movw	r2, #813	; 0x32d
 8013d72:	495f      	ldr	r1, [pc, #380]	; (8013ef0 <ip4_frag+0x284>)
 8013d74:	485c      	ldr	r0, [pc, #368]	; (8013ee8 <ip4_frag+0x27c>)
 8013d76:	f001 fdd9 	bl	801592c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013d7a:	8bfa      	ldrh	r2, [r7, #30]
 8013d7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013d80:	4293      	cmp	r3, r2
 8013d82:	bf28      	it	cs
 8013d84:	4613      	movcs	r3, r2
 8013d86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d105      	bne.n	8013d9e <ip4_frag+0x132>
        poff = 0;
 8013d92:	2300      	movs	r3, #0
 8013d94:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	60fb      	str	r3, [r7, #12]
        continue;
 8013d9c:	e041      	b.n	8013e22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013d9e:	f7ff ff0d 	bl	8013bbc <ip_frag_alloc_pbuf_custom_ref>
 8013da2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d103      	bne.n	8013db2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013daa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dac:	f7f7 fb56 	bl	800b45c <pbuf_free>
        goto memerr;
 8013db0:	e08f      	b.n	8013ed2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013db2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013db8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013dba:	4413      	add	r3, r2
 8013dbc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013dc0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013dc4:	9201      	str	r2, [sp, #4]
 8013dc6:	9300      	str	r3, [sp, #0]
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2241      	movs	r2, #65	; 0x41
 8013dcc:	2000      	movs	r0, #0
 8013dce:	f7f7 f98b 	bl	800b0e8 <pbuf_alloced_custom>
 8013dd2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d106      	bne.n	8013de8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013dda:	69b8      	ldr	r0, [r7, #24]
 8013ddc:	f7ff fef6 	bl	8013bcc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013de2:	f7f7 fb3b 	bl	800b45c <pbuf_free>
        goto memerr;
 8013de6:	e074      	b.n	8013ed2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013de8:	68f8      	ldr	r0, [r7, #12]
 8013dea:	f7f7 fbdd 	bl	800b5a8 <pbuf_ref>
      pcr->original = p;
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	68fa      	ldr	r2, [r7, #12]
 8013df2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	4a3f      	ldr	r2, [pc, #252]	; (8013ef4 <ip4_frag+0x288>)
 8013df8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013dfa:	6979      	ldr	r1, [r7, #20]
 8013dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dfe:	f7f7 fbfb 	bl	800b5f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013e02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013e06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e0a:	1ad3      	subs	r3, r2, r3
 8013e0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d004      	beq.n	8013e22 <ip4_frag+0x1b6>
        poff = 0;
 8013e18:	2300      	movs	r3, #0
 8013e1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013e22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d196      	bne.n	8013d58 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013e2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013e2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e30:	4413      	add	r3, r2
 8013e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013e38:	f1a3 0213 	sub.w	r2, r3, #19
 8013e3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e40:	429a      	cmp	r2, r3
 8013e42:	bfcc      	ite	gt
 8013e44:	2301      	movgt	r3, #1
 8013e46:	2300      	movle	r3, #0
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013e4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013e56:	6a3b      	ldr	r3, [r7, #32]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d002      	beq.n	8013e62 <ip4_frag+0x1f6>
 8013e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d003      	beq.n	8013e6a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013e62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013e68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013e6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7f5 ff03 	bl	8009c78 <lwip_htons>
 8013e72:	4603      	mov	r3, r0
 8013e74:	461a      	mov	r2, r3
 8013e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e78:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e7c:	3314      	adds	r3, #20
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7f5 fef9 	bl	8009c78 <lwip_htons>
 8013e86:	4603      	mov	r3, r0
 8013e88:	461a      	mov	r2, r3
 8013e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e8c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e90:	2200      	movs	r2, #0
 8013e92:	729a      	strb	r2, [r3, #10]
 8013e94:	2200      	movs	r2, #0
 8013e96:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	695b      	ldr	r3, [r3, #20]
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ea0:	68b8      	ldr	r0, [r7, #8]
 8013ea2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ea6:	f7f7 fad9 	bl	800b45c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013eaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013eb0:	1ad3      	subs	r3, r2, r3
 8013eb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013eb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013eba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ebc:	4413      	add	r3, r2
 8013ebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	f47f af19 	bne.w	8013cfe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	e002      	b.n	8013ed6 <ip4_frag+0x26a>
      goto memerr;
 8013ed0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3748      	adds	r7, #72	; 0x48
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	080195c0 	.word	0x080195c0
 8013ee4:	0801979c 	.word	0x0801979c
 8013ee8:	08019608 	.word	0x08019608
 8013eec:	080197b8 	.word	0x080197b8
 8013ef0:	080197d8 	.word	0x080197d8
 8013ef4:	08013c05 	.word	0x08013c05

08013ef8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b086      	sub	sp, #24
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013f02:	230e      	movs	r3, #14
 8013f04:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	895b      	ldrh	r3, [r3, #10]
 8013f0a:	2b0e      	cmp	r3, #14
 8013f0c:	d96e      	bls.n	8013fec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	7bdb      	ldrb	r3, [r3, #15]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d106      	bne.n	8013f24 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	b2da      	uxtb	r2, r3
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	685b      	ldr	r3, [r3, #4]
 8013f28:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	7b1a      	ldrb	r2, [r3, #12]
 8013f2e:	7b5b      	ldrb	r3, [r3, #13]
 8013f30:	021b      	lsls	r3, r3, #8
 8013f32:	4313      	orrs	r3, r2
 8013f34:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	f003 0301 	and.w	r3, r3, #1
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d023      	beq.n	8013f8a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	781b      	ldrb	r3, [r3, #0]
 8013f46:	2b01      	cmp	r3, #1
 8013f48:	d10f      	bne.n	8013f6a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	785b      	ldrb	r3, [r3, #1]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d11b      	bne.n	8013f8a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f56:	2b5e      	cmp	r3, #94	; 0x5e
 8013f58:	d117      	bne.n	8013f8a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	7b5b      	ldrb	r3, [r3, #13]
 8013f5e:	f043 0310 	orr.w	r3, r3, #16
 8013f62:	b2da      	uxtb	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	735a      	strb	r2, [r3, #13]
 8013f68:	e00f      	b.n	8013f8a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	2206      	movs	r2, #6
 8013f6e:	4928      	ldr	r1, [pc, #160]	; (8014010 <ethernet_input+0x118>)
 8013f70:	4618      	mov	r0, r3
 8013f72:	f001 fba9 	bl	80156c8 <memcmp>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	7b5b      	ldrb	r3, [r3, #13]
 8013f80:	f043 0308 	orr.w	r3, r3, #8
 8013f84:	b2da      	uxtb	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013f8a:	89fb      	ldrh	r3, [r7, #14]
 8013f8c:	2b08      	cmp	r3, #8
 8013f8e:	d003      	beq.n	8013f98 <ethernet_input+0xa0>
 8013f90:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013f94:	d014      	beq.n	8013fc0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013f96:	e032      	b.n	8013ffe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f9e:	f003 0308 	and.w	r3, r3, #8
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d024      	beq.n	8013ff0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013fa6:	8afb      	ldrh	r3, [r7, #22]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f7f7 f9d0 	bl	800b350 <pbuf_remove_header>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d11e      	bne.n	8013ff4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013fb6:	6839      	ldr	r1, [r7, #0]
 8013fb8:	6878      	ldr	r0, [r7, #4]
 8013fba:	f7fe ff21 	bl	8012e00 <ip4_input>
      break;
 8013fbe:	e013      	b.n	8013fe8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013fc6:	f003 0308 	and.w	r3, r3, #8
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d014      	beq.n	8013ff8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013fce:	8afb      	ldrh	r3, [r7, #22]
 8013fd0:	4619      	mov	r1, r3
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f7f7 f9bc 	bl	800b350 <pbuf_remove_header>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d10e      	bne.n	8013ffc <ethernet_input+0x104>
        etharp_input(p, netif);
 8013fde:	6839      	ldr	r1, [r7, #0]
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f7fe f8c1 	bl	8012168 <etharp_input>
      break;
 8013fe6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	e00c      	b.n	8014006 <ethernet_input+0x10e>
    goto free_and_return;
 8013fec:	bf00      	nop
 8013fee:	e006      	b.n	8013ffe <ethernet_input+0x106>
        goto free_and_return;
 8013ff0:	bf00      	nop
 8013ff2:	e004      	b.n	8013ffe <ethernet_input+0x106>
        goto free_and_return;
 8013ff4:	bf00      	nop
 8013ff6:	e002      	b.n	8013ffe <ethernet_input+0x106>
        goto free_and_return;
 8013ff8:	bf00      	nop
 8013ffa:	e000      	b.n	8013ffe <ethernet_input+0x106>
        goto free_and_return;
 8013ffc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013ffe:	6878      	ldr	r0, [r7, #4]
 8014000:	f7f7 fa2c 	bl	800b45c <pbuf_free>
  return ERR_OK;
 8014004:	2300      	movs	r3, #0
}
 8014006:	4618      	mov	r0, r3
 8014008:	3718      	adds	r7, #24
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	08019cbc 	.word	0x08019cbc

08014014 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014014:	b580      	push	{r7, lr}
 8014016:	b086      	sub	sp, #24
 8014018:	af00      	add	r7, sp, #0
 801401a:	60f8      	str	r0, [r7, #12]
 801401c:	60b9      	str	r1, [r7, #8]
 801401e:	607a      	str	r2, [r7, #4]
 8014020:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014022:	8c3b      	ldrh	r3, [r7, #32]
 8014024:	4618      	mov	r0, r3
 8014026:	f7f5 fe27 	bl	8009c78 <lwip_htons>
 801402a:	4603      	mov	r3, r0
 801402c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801402e:	210e      	movs	r1, #14
 8014030:	68b8      	ldr	r0, [r7, #8]
 8014032:	f7f7 f97d 	bl	800b330 <pbuf_add_header>
 8014036:	4603      	mov	r3, r0
 8014038:	2b00      	cmp	r3, #0
 801403a:	d125      	bne.n	8014088 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	8afa      	ldrh	r2, [r7, #22]
 8014046:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	2206      	movs	r2, #6
 801404c:	6839      	ldr	r1, [r7, #0]
 801404e:	4618      	mov	r0, r3
 8014050:	f001 fb4a 	bl	80156e8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	3306      	adds	r3, #6
 8014058:	2206      	movs	r2, #6
 801405a:	6879      	ldr	r1, [r7, #4]
 801405c:	4618      	mov	r0, r3
 801405e:	f001 fb43 	bl	80156e8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014068:	2b06      	cmp	r3, #6
 801406a:	d006      	beq.n	801407a <ethernet_output+0x66>
 801406c:	4b0a      	ldr	r3, [pc, #40]	; (8014098 <ethernet_output+0x84>)
 801406e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014072:	490a      	ldr	r1, [pc, #40]	; (801409c <ethernet_output+0x88>)
 8014074:	480a      	ldr	r0, [pc, #40]	; (80140a0 <ethernet_output+0x8c>)
 8014076:	f001 fc59 	bl	801592c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	699b      	ldr	r3, [r3, #24]
 801407e:	68b9      	ldr	r1, [r7, #8]
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	4798      	blx	r3
 8014084:	4603      	mov	r3, r0
 8014086:	e002      	b.n	801408e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014088:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801408a:	f06f 0301 	mvn.w	r3, #1
}
 801408e:	4618      	mov	r0, r3
 8014090:	3718      	adds	r7, #24
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	080197e8 	.word	0x080197e8
 801409c:	08019820 	.word	0x08019820
 80140a0:	08019854 	.word	0x08019854

080140a4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b086      	sub	sp, #24
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	60bb      	str	r3, [r7, #8]
 80140b2:	2304      	movs	r3, #4
 80140b4:	60fb      	str	r3, [r7, #12]
 80140b6:	2300      	movs	r3, #0
 80140b8:	613b      	str	r3, [r7, #16]
 80140ba:	2300      	movs	r3, #0
 80140bc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80140be:	f107 0308 	add.w	r3, r7, #8
 80140c2:	2100      	movs	r1, #0
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7f2 fb25 	bl	8006714 <osMessageCreate>
 80140ca:	4602      	mov	r2, r0
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d102      	bne.n	80140de <sys_mbox_new+0x3a>
    return ERR_MEM;
 80140d8:	f04f 33ff 	mov.w	r3, #4294967295
 80140dc:	e000      	b.n	80140e0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80140de:	2300      	movs	r3, #0
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3718      	adds	r7, #24
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b084      	sub	sp, #16
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	6839      	ldr	r1, [r7, #0]
 80140f8:	2200      	movs	r2, #0
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7f2 fb32 	bl	8006764 <osMessagePut>
 8014100:	4603      	mov	r3, r0
 8014102:	2b00      	cmp	r3, #0
 8014104:	d102      	bne.n	801410c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014106:	2300      	movs	r3, #0
 8014108:	73fb      	strb	r3, [r7, #15]
 801410a:	e001      	b.n	8014110 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801410c:	23ff      	movs	r3, #255	; 0xff
 801410e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014110:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014114:	4618      	mov	r0, r3
 8014116:	3710      	adds	r7, #16
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b08c      	sub	sp, #48	; 0x30
 8014120:	af00      	add	r7, sp, #0
 8014122:	61f8      	str	r0, [r7, #28]
 8014124:	61b9      	str	r1, [r7, #24]
 8014126:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014128:	f7f2 f964 	bl	80063f4 <osKernelSysTick>
 801412c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d017      	beq.n	8014164 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	6819      	ldr	r1, [r3, #0]
 8014138:	f107 0320 	add.w	r3, r7, #32
 801413c:	697a      	ldr	r2, [r7, #20]
 801413e:	4618      	mov	r0, r3
 8014140:	f7f2 fb50 	bl	80067e4 <osMessageGet>

    if(event.status == osEventMessage)
 8014144:	6a3b      	ldr	r3, [r7, #32]
 8014146:	2b10      	cmp	r3, #16
 8014148:	d109      	bne.n	801415e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414c:	461a      	mov	r2, r3
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014152:	f7f2 f94f 	bl	80063f4 <osKernelSysTick>
 8014156:	4602      	mov	r2, r0
 8014158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415a:	1ad3      	subs	r3, r2, r3
 801415c:	e019      	b.n	8014192 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801415e:	f04f 33ff 	mov.w	r3, #4294967295
 8014162:	e016      	b.n	8014192 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014164:	69fb      	ldr	r3, [r7, #28]
 8014166:	6819      	ldr	r1, [r3, #0]
 8014168:	463b      	mov	r3, r7
 801416a:	f04f 32ff 	mov.w	r2, #4294967295
 801416e:	4618      	mov	r0, r3
 8014170:	f7f2 fb38 	bl	80067e4 <osMessageGet>
 8014174:	f107 0320 	add.w	r3, r7, #32
 8014178:	463a      	mov	r2, r7
 801417a:	ca07      	ldmia	r2, {r0, r1, r2}
 801417c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	461a      	mov	r2, r3
 8014184:	69bb      	ldr	r3, [r7, #24]
 8014186:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014188:	f7f2 f934 	bl	80063f4 <osKernelSysTick>
 801418c:	4602      	mov	r2, r0
 801418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014190:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014192:	4618      	mov	r0, r3
 8014194:	3730      	adds	r7, #48	; 0x30
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}

0801419a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801419a:	b480      	push	{r7}
 801419c:	b083      	sub	sp, #12
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d101      	bne.n	80141ae <sys_mbox_valid+0x14>
    return 0;
 80141aa:	2300      	movs	r3, #0
 80141ac:	e000      	b.n	80141b0 <sys_mbox_valid+0x16>
  else
    return 1;
 80141ae:	2301      	movs	r3, #1
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	370c      	adds	r7, #12
 80141b4:	46bd      	mov	sp, r7
 80141b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ba:	4770      	bx	lr

080141bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80141c0:	4803      	ldr	r0, [pc, #12]	; (80141d0 <sys_init+0x14>)
 80141c2:	f7f2 f987 	bl	80064d4 <osMutexCreate>
 80141c6:	4603      	mov	r3, r0
 80141c8:	4a02      	ldr	r2, [pc, #8]	; (80141d4 <sys_init+0x18>)
 80141ca:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80141cc:	bf00      	nop
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	08019ccc 	.word	0x08019ccc
 80141d4:	2002e7a4 	.word	0x2002e7a4

080141d8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80141e0:	2300      	movs	r3, #0
 80141e2:	60bb      	str	r3, [r7, #8]
 80141e4:	2300      	movs	r3, #0
 80141e6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80141e8:	f107 0308 	add.w	r3, r7, #8
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7f2 f971 	bl	80064d4 <osMutexCreate>
 80141f2:	4602      	mov	r2, r0
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d102      	bne.n	8014206 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014200:	f04f 33ff 	mov.w	r3, #4294967295
 8014204:	e000      	b.n	8014208 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014206:	2300      	movs	r3, #0
}
 8014208:	4618      	mov	r0, r3
 801420a:	3710      	adds	r7, #16
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	f04f 31ff 	mov.w	r1, #4294967295
 8014220:	4618      	mov	r0, r3
 8014222:	f7f2 f96f 	bl	8006504 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014226:	bf00      	nop
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}

0801422e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801422e:	b580      	push	{r7, lr}
 8014230:	b082      	sub	sp, #8
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	4618      	mov	r0, r3
 801423c:	f7f2 f9b0 	bl	80065a0 <osMutexRelease>
}
 8014240:	bf00      	nop
 8014242:	3708      	adds	r7, #8
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b08c      	sub	sp, #48	; 0x30
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	607a      	str	r2, [r7, #4]
 8014254:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014256:	f107 0314 	add.w	r3, r7, #20
 801425a:	2200      	movs	r2, #0
 801425c:	601a      	str	r2, [r3, #0]
 801425e:	605a      	str	r2, [r3, #4]
 8014260:	609a      	str	r2, [r3, #8]
 8014262:	60da      	str	r2, [r3, #12]
 8014264:	611a      	str	r2, [r3, #16]
 8014266:	615a      	str	r2, [r3, #20]
 8014268:	619a      	str	r2, [r3, #24]
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	617b      	str	r3, [r7, #20]
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	61bb      	str	r3, [r7, #24]
 8014272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014274:	b21b      	sxth	r3, r3
 8014276:	83bb      	strh	r3, [r7, #28]
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801427c:	f107 0314 	add.w	r3, r7, #20
 8014280:	6879      	ldr	r1, [r7, #4]
 8014282:	4618      	mov	r0, r3
 8014284:	f7f2 f8c6 	bl	8006414 <osThreadCreate>
 8014288:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801428a:	4618      	mov	r0, r3
 801428c:	3730      	adds	r7, #48	; 0x30
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
	...

08014294 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014298:	4b04      	ldr	r3, [pc, #16]	; (80142ac <sys_arch_protect+0x18>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f04f 31ff 	mov.w	r1, #4294967295
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7f2 f92f 	bl	8006504 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80142a6:	2301      	movs	r3, #1
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	2002e7a4 	.word	0x2002e7a4

080142b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80142b8:	4b04      	ldr	r3, [pc, #16]	; (80142cc <sys_arch_unprotect+0x1c>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4618      	mov	r0, r3
 80142be:	f7f2 f96f 	bl	80065a0 <osMutexRelease>
}
 80142c2:	bf00      	nop
 80142c4:	3708      	adds	r7, #8
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	2002e7a4 	.word	0x2002e7a4

080142d0 <rtg_main>:




void rtg_main()
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af02      	add	r7, sp, #8
	//Creates 12 Queue messages 4 for the departments, and 3 severity for any of them
	PoliceCritical = xQueueCreate(QueueLength, MSG_SIZE);
 80142d6:	2200      	movs	r2, #0
 80142d8:	2196      	movs	r1, #150	; 0x96
 80142da:	200a      	movs	r0, #10
 80142dc:	f7f2 fc96 	bl	8006c0c <xQueueGenericCreate>
 80142e0:	4603      	mov	r3, r0
 80142e2:	4ab3      	ldr	r2, [pc, #716]	; (80145b0 <rtg_main+0x2e0>)
 80142e4:	6013      	str	r3, [r2, #0]
		if(PoliceCritical == pdFALSE){
 80142e6:	4bb2      	ldr	r3, [pc, #712]	; (80145b0 <rtg_main+0x2e0>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d105      	bne.n	80142fa <rtg_main+0x2a>
			printf("Error\r\n");
 80142ee:	48b1      	ldr	r0, [pc, #708]	; (80145b4 <rtg_main+0x2e4>)
 80142f0:	f001 fba2 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 80142f4:	2001      	movs	r0, #1
 80142f6:	f000 ff3d 	bl	8015174 <exit>
		}
		PoliceWarning = xQueueCreate(QueueLength, MSG_SIZE);
 80142fa:	2200      	movs	r2, #0
 80142fc:	2196      	movs	r1, #150	; 0x96
 80142fe:	200a      	movs	r0, #10
 8014300:	f7f2 fc84 	bl	8006c0c <xQueueGenericCreate>
 8014304:	4603      	mov	r3, r0
 8014306:	4aac      	ldr	r2, [pc, #688]	; (80145b8 <rtg_main+0x2e8>)
 8014308:	6013      	str	r3, [r2, #0]
		if(PoliceWarning == pdFALSE){
 801430a:	4bab      	ldr	r3, [pc, #684]	; (80145b8 <rtg_main+0x2e8>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d105      	bne.n	801431e <rtg_main+0x4e>
			printf("Error\r\n");
 8014312:	48a8      	ldr	r0, [pc, #672]	; (80145b4 <rtg_main+0x2e4>)
 8014314:	f001 fb90 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 8014318:	2001      	movs	r0, #1
 801431a:	f000 ff2b 	bl	8015174 <exit>
		}
		PoliceNotice = xQueueCreate(QueueLength, MSG_SIZE);
 801431e:	2200      	movs	r2, #0
 8014320:	2196      	movs	r1, #150	; 0x96
 8014322:	200a      	movs	r0, #10
 8014324:	f7f2 fc72 	bl	8006c0c <xQueueGenericCreate>
 8014328:	4603      	mov	r3, r0
 801432a:	4aa4      	ldr	r2, [pc, #656]	; (80145bc <rtg_main+0x2ec>)
 801432c:	6013      	str	r3, [r2, #0]
		if(PoliceNotice == pdFALSE){
 801432e:	4ba3      	ldr	r3, [pc, #652]	; (80145bc <rtg_main+0x2ec>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d105      	bne.n	8014342 <rtg_main+0x72>
			printf("Error\r\n");
 8014336:	489f      	ldr	r0, [pc, #636]	; (80145b4 <rtg_main+0x2e4>)
 8014338:	f001 fb7e 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 801433c:	2001      	movs	r0, #1
 801433e:	f000 ff19 	bl	8015174 <exit>
		}

		FireCritical = xQueueCreate(QueueLength, MSG_SIZE);
 8014342:	2200      	movs	r2, #0
 8014344:	2196      	movs	r1, #150	; 0x96
 8014346:	200a      	movs	r0, #10
 8014348:	f7f2 fc60 	bl	8006c0c <xQueueGenericCreate>
 801434c:	4603      	mov	r3, r0
 801434e:	4a9c      	ldr	r2, [pc, #624]	; (80145c0 <rtg_main+0x2f0>)
 8014350:	6013      	str	r3, [r2, #0]
		if(FireCritical == pdFALSE){
 8014352:	4b9b      	ldr	r3, [pc, #620]	; (80145c0 <rtg_main+0x2f0>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d105      	bne.n	8014366 <rtg_main+0x96>
			printf("Error\r\n");
 801435a:	4896      	ldr	r0, [pc, #600]	; (80145b4 <rtg_main+0x2e4>)
 801435c:	f001 fb6c 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 8014360:	2001      	movs	r0, #1
 8014362:	f000 ff07 	bl	8015174 <exit>
		}
		FireWarning = xQueueCreate(QueueLength, MSG_SIZE);
 8014366:	2200      	movs	r2, #0
 8014368:	2196      	movs	r1, #150	; 0x96
 801436a:	200a      	movs	r0, #10
 801436c:	f7f2 fc4e 	bl	8006c0c <xQueueGenericCreate>
 8014370:	4603      	mov	r3, r0
 8014372:	4a94      	ldr	r2, [pc, #592]	; (80145c4 <rtg_main+0x2f4>)
 8014374:	6013      	str	r3, [r2, #0]
		if(FireWarning == pdFALSE){
 8014376:	4b93      	ldr	r3, [pc, #588]	; (80145c4 <rtg_main+0x2f4>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d105      	bne.n	801438a <rtg_main+0xba>
			printf("Error\r\n");
 801437e:	488d      	ldr	r0, [pc, #564]	; (80145b4 <rtg_main+0x2e4>)
 8014380:	f001 fb5a 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 8014384:	2001      	movs	r0, #1
 8014386:	f000 fef5 	bl	8015174 <exit>
		}
		FireNotice = xQueueCreate(QueueLength, MSG_SIZE);
 801438a:	2200      	movs	r2, #0
 801438c:	2196      	movs	r1, #150	; 0x96
 801438e:	200a      	movs	r0, #10
 8014390:	f7f2 fc3c 	bl	8006c0c <xQueueGenericCreate>
 8014394:	4603      	mov	r3, r0
 8014396:	4a8c      	ldr	r2, [pc, #560]	; (80145c8 <rtg_main+0x2f8>)
 8014398:	6013      	str	r3, [r2, #0]
		if(FireNotice == pdFALSE){
 801439a:	4b8b      	ldr	r3, [pc, #556]	; (80145c8 <rtg_main+0x2f8>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d105      	bne.n	80143ae <rtg_main+0xde>
			printf("Error\r\n");
 80143a2:	4884      	ldr	r0, [pc, #528]	; (80145b4 <rtg_main+0x2e4>)
 80143a4:	f001 fb48 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 80143a8:	2001      	movs	r0, #1
 80143aa:	f000 fee3 	bl	8015174 <exit>
		}

		AmbulanceCritical = xQueueCreate(QueueLength, MSG_SIZE);
 80143ae:	2200      	movs	r2, #0
 80143b0:	2196      	movs	r1, #150	; 0x96
 80143b2:	200a      	movs	r0, #10
 80143b4:	f7f2 fc2a 	bl	8006c0c <xQueueGenericCreate>
 80143b8:	4603      	mov	r3, r0
 80143ba:	4a84      	ldr	r2, [pc, #528]	; (80145cc <rtg_main+0x2fc>)
 80143bc:	6013      	str	r3, [r2, #0]
		if(AmbulanceCritical == pdFALSE){
 80143be:	4b83      	ldr	r3, [pc, #524]	; (80145cc <rtg_main+0x2fc>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d105      	bne.n	80143d2 <rtg_main+0x102>
			printf("Error\r\n");
 80143c6:	487b      	ldr	r0, [pc, #492]	; (80145b4 <rtg_main+0x2e4>)
 80143c8:	f001 fb36 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 80143cc:	2001      	movs	r0, #1
 80143ce:	f000 fed1 	bl	8015174 <exit>
		}
		AmbulceWarning = xQueueCreate(QueueLength, MSG_SIZE);
 80143d2:	2200      	movs	r2, #0
 80143d4:	2196      	movs	r1, #150	; 0x96
 80143d6:	200a      	movs	r0, #10
 80143d8:	f7f2 fc18 	bl	8006c0c <xQueueGenericCreate>
 80143dc:	4603      	mov	r3, r0
 80143de:	4a7c      	ldr	r2, [pc, #496]	; (80145d0 <rtg_main+0x300>)
 80143e0:	6013      	str	r3, [r2, #0]
		if(AmbulceWarning == pdFALSE){
 80143e2:	4b7b      	ldr	r3, [pc, #492]	; (80145d0 <rtg_main+0x300>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d105      	bne.n	80143f6 <rtg_main+0x126>
			printf("Error\r\n");
 80143ea:	4872      	ldr	r0, [pc, #456]	; (80145b4 <rtg_main+0x2e4>)
 80143ec:	f001 fb24 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 80143f0:	2001      	movs	r0, #1
 80143f2:	f000 febf 	bl	8015174 <exit>
		}
		AmbulanceNotice = xQueueCreate(QueueLength, MSG_SIZE);
 80143f6:	2200      	movs	r2, #0
 80143f8:	2196      	movs	r1, #150	; 0x96
 80143fa:	200a      	movs	r0, #10
 80143fc:	f7f2 fc06 	bl	8006c0c <xQueueGenericCreate>
 8014400:	4603      	mov	r3, r0
 8014402:	4a74      	ldr	r2, [pc, #464]	; (80145d4 <rtg_main+0x304>)
 8014404:	6013      	str	r3, [r2, #0]
		if(AmbulanceNotice == pdFALSE){
 8014406:	4b73      	ldr	r3, [pc, #460]	; (80145d4 <rtg_main+0x304>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d105      	bne.n	801441a <rtg_main+0x14a>
			printf("Error\r\n");
 801440e:	4869      	ldr	r0, [pc, #420]	; (80145b4 <rtg_main+0x2e4>)
 8014410:	f001 fb12 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 8014414:	2001      	movs	r0, #1
 8014416:	f000 fead 	bl	8015174 <exit>
		}

		MaintenanceCritical = xQueueCreate(QueueLength, MSG_SIZE);
 801441a:	2200      	movs	r2, #0
 801441c:	2196      	movs	r1, #150	; 0x96
 801441e:	200a      	movs	r0, #10
 8014420:	f7f2 fbf4 	bl	8006c0c <xQueueGenericCreate>
 8014424:	4603      	mov	r3, r0
 8014426:	4a6c      	ldr	r2, [pc, #432]	; (80145d8 <rtg_main+0x308>)
 8014428:	6013      	str	r3, [r2, #0]
		if(MaintenanceCritical == pdFALSE){
 801442a:	4b6b      	ldr	r3, [pc, #428]	; (80145d8 <rtg_main+0x308>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d105      	bne.n	801443e <rtg_main+0x16e>
			printf("Error\r\n");
 8014432:	4860      	ldr	r0, [pc, #384]	; (80145b4 <rtg_main+0x2e4>)
 8014434:	f001 fb00 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 8014438:	2001      	movs	r0, #1
 801443a:	f000 fe9b 	bl	8015174 <exit>
		}
		MaintenanceWarning = xQueueCreate(QueueLength, MSG_SIZE);
 801443e:	2200      	movs	r2, #0
 8014440:	2196      	movs	r1, #150	; 0x96
 8014442:	200a      	movs	r0, #10
 8014444:	f7f2 fbe2 	bl	8006c0c <xQueueGenericCreate>
 8014448:	4603      	mov	r3, r0
 801444a:	4a64      	ldr	r2, [pc, #400]	; (80145dc <rtg_main+0x30c>)
 801444c:	6013      	str	r3, [r2, #0]
		if(MaintenanceWarning == pdFALSE){
 801444e:	4b63      	ldr	r3, [pc, #396]	; (80145dc <rtg_main+0x30c>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d105      	bne.n	8014462 <rtg_main+0x192>
			printf("Error\r\n");
 8014456:	4857      	ldr	r0, [pc, #348]	; (80145b4 <rtg_main+0x2e4>)
 8014458:	f001 faee 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 801445c:	2001      	movs	r0, #1
 801445e:	f000 fe89 	bl	8015174 <exit>
		}
		MaintenanceNotice = xQueueCreate(QueueLength, MSG_SIZE);
 8014462:	2200      	movs	r2, #0
 8014464:	2196      	movs	r1, #150	; 0x96
 8014466:	200a      	movs	r0, #10
 8014468:	f7f2 fbd0 	bl	8006c0c <xQueueGenericCreate>
 801446c:	4603      	mov	r3, r0
 801446e:	4a5c      	ldr	r2, [pc, #368]	; (80145e0 <rtg_main+0x310>)
 8014470:	6013      	str	r3, [r2, #0]
		if(MaintenanceNotice == pdFALSE){
 8014472:	4b5b      	ldr	r3, [pc, #364]	; (80145e0 <rtg_main+0x310>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d105      	bne.n	8014486 <rtg_main+0x1b6>
			printf("Error\r\n");
 801447a:	484e      	ldr	r0, [pc, #312]	; (80145b4 <rtg_main+0x2e4>)
 801447c:	f001 fadc 	bl	8015a38 <puts>
		exit(EXIT_FAILURE);
 8014480:	2001      	movs	r0, #1
 8014482:	f000 fe77 	bl	8015174 <exit>
		}

		tftp_event_queue = xQueueCreate(1, sizeof(msg_t));
 8014486:	2200      	movs	r2, #0
 8014488:	2152      	movs	r1, #82	; 0x52
 801448a:	2001      	movs	r0, #1
 801448c:	f7f2 fbbe 	bl	8006c0c <xQueueGenericCreate>
 8014490:	4603      	mov	r3, r0
 8014492:	4a54      	ldr	r2, [pc, #336]	; (80145e4 <rtg_main+0x314>)
 8014494:	6013      	str	r3, [r2, #0]

			BaseType_t taskStatus = pdPASS;
 8014496:	2301      	movs	r3, #1
 8014498:	603b      	str	r3, [r7, #0]
			//Creates task for the communication initialization,
			taskStatus = xTaskCreate((TaskFunction_t)Communicationinit, "TFTP 3", 1000, NULL, 3, NULL );
 801449a:	2300      	movs	r3, #0
 801449c:	9301      	str	r3, [sp, #4]
 801449e:	2303      	movs	r3, #3
 80144a0:	9300      	str	r3, [sp, #0]
 80144a2:	2300      	movs	r3, #0
 80144a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80144a8:	494f      	ldr	r1, [pc, #316]	; (80145e8 <rtg_main+0x318>)
 80144aa:	4850      	ldr	r0, [pc, #320]	; (80145ec <rtg_main+0x31c>)
 80144ac:	f7f3 faa3 	bl	80079f6 <xTaskCreate>
 80144b0:	6038      	str	r0, [r7, #0]
			if(taskStatus == pdFALSE){
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d102      	bne.n	80144be <rtg_main+0x1ee>
			exit(EXIT_FAILURE);
 80144b8:	2001      	movs	r0, #1
 80144ba:	f000 fe5b 	bl	8015174 <exit>
			}
			//create task for the dispatcher with the highest priority
			taskStatus = xTaskCreate((TaskFunction_t)Manager, "manager", 1000, NULL, 2, NULL);
 80144be:	2300      	movs	r3, #0
 80144c0:	9301      	str	r3, [sp, #4]
 80144c2:	2302      	movs	r3, #2
 80144c4:	9300      	str	r3, [sp, #0]
 80144c6:	2300      	movs	r3, #0
 80144c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80144cc:	4948      	ldr	r1, [pc, #288]	; (80145f0 <rtg_main+0x320>)
 80144ce:	4849      	ldr	r0, [pc, #292]	; (80145f4 <rtg_main+0x324>)
 80144d0:	f7f3 fa91 	bl	80079f6 <xTaskCreate>
 80144d4:	6038      	str	r0, [r7, #0]
			if(taskStatus == pdFALSE){
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d102      	bne.n	80144e2 <rtg_main+0x212>
			exit(EXIT_FAILURE);
 80144dc:	2001      	movs	r0, #1
 80144de:	f000 fe49 	bl	8015174 <exit>
			}
			//Creates 3 tasks for every department
			for (int var = 0; var < MAX_TASK_TO_CREATE; ++var) {
 80144e2:	2300      	movs	r3, #0
 80144e4:	607b      	str	r3, [r7, #4]
 80144e6:	e04a      	b.n	801457e <rtg_main+0x2ae>
				taskStatus = xTaskCreate((TaskFunction_t)PoliceWorker, "Police1", 1000, NULL, 1, NULL);
 80144e8:	2300      	movs	r3, #0
 80144ea:	9301      	str	r3, [sp, #4]
 80144ec:	2301      	movs	r3, #1
 80144ee:	9300      	str	r3, [sp, #0]
 80144f0:	2300      	movs	r3, #0
 80144f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80144f6:	4940      	ldr	r1, [pc, #256]	; (80145f8 <rtg_main+0x328>)
 80144f8:	4840      	ldr	r0, [pc, #256]	; (80145fc <rtg_main+0x32c>)
 80144fa:	f7f3 fa7c 	bl	80079f6 <xTaskCreate>
 80144fe:	6038      	str	r0, [r7, #0]
				if(taskStatus == pdFALSE){
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d102      	bne.n	801450c <rtg_main+0x23c>
				exit(EXIT_FAILURE);
 8014506:	2001      	movs	r0, #1
 8014508:	f000 fe34 	bl	8015174 <exit>
				}
				taskStatus = xTaskCreate((TaskFunction_t)AmbulanceWorker, "Ambulance1", 1000, NULL, 1, NULL);
 801450c:	2300      	movs	r3, #0
 801450e:	9301      	str	r3, [sp, #4]
 8014510:	2301      	movs	r3, #1
 8014512:	9300      	str	r3, [sp, #0]
 8014514:	2300      	movs	r3, #0
 8014516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801451a:	4939      	ldr	r1, [pc, #228]	; (8014600 <rtg_main+0x330>)
 801451c:	4839      	ldr	r0, [pc, #228]	; (8014604 <rtg_main+0x334>)
 801451e:	f7f3 fa6a 	bl	80079f6 <xTaskCreate>
 8014522:	6038      	str	r0, [r7, #0]
				if(taskStatus == pdFALSE){
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d102      	bne.n	8014530 <rtg_main+0x260>
				exit(EXIT_FAILURE);
 801452a:	2001      	movs	r0, #1
 801452c:	f000 fe22 	bl	8015174 <exit>
				}
				taskStatus = xTaskCreate((TaskFunction_t)FireWorker, "Fireman1", 1000, NULL, 1, NULL);
 8014530:	2300      	movs	r3, #0
 8014532:	9301      	str	r3, [sp, #4]
 8014534:	2301      	movs	r3, #1
 8014536:	9300      	str	r3, [sp, #0]
 8014538:	2300      	movs	r3, #0
 801453a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801453e:	4932      	ldr	r1, [pc, #200]	; (8014608 <rtg_main+0x338>)
 8014540:	4832      	ldr	r0, [pc, #200]	; (801460c <rtg_main+0x33c>)
 8014542:	f7f3 fa58 	bl	80079f6 <xTaskCreate>
 8014546:	6038      	str	r0, [r7, #0]
				if(taskStatus == pdFALSE){
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d102      	bne.n	8014554 <rtg_main+0x284>
				exit(EXIT_FAILURE);
 801454e:	2001      	movs	r0, #1
 8014550:	f000 fe10 	bl	8015174 <exit>
				}
				taskStatus = xTaskCreate((TaskFunction_t)MaintenanceWorker, "Maintenance1", 1000, NULL, 1, NULL);
 8014554:	2300      	movs	r3, #0
 8014556:	9301      	str	r3, [sp, #4]
 8014558:	2301      	movs	r3, #1
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	2300      	movs	r3, #0
 801455e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014562:	492b      	ldr	r1, [pc, #172]	; (8014610 <rtg_main+0x340>)
 8014564:	482b      	ldr	r0, [pc, #172]	; (8014614 <rtg_main+0x344>)
 8014566:	f7f3 fa46 	bl	80079f6 <xTaskCreate>
 801456a:	6038      	str	r0, [r7, #0]
				if(taskStatus == pdFALSE){
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d102      	bne.n	8014578 <rtg_main+0x2a8>
				exit(EXIT_FAILURE);
 8014572:	2001      	movs	r0, #1
 8014574:	f000 fdfe 	bl	8015174 <exit>
			for (int var = 0; var < MAX_TASK_TO_CREATE; ++var) {
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	3301      	adds	r3, #1
 801457c:	607b      	str	r3, [r7, #4]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2b02      	cmp	r3, #2
 8014582:	ddb1      	ble.n	80144e8 <rtg_main+0x218>
				}

			}

	//creates binary semaphore
	Sem = xSemaphoreCreateBinary();
 8014584:	2203      	movs	r2, #3
 8014586:	2100      	movs	r1, #0
 8014588:	2001      	movs	r0, #1
 801458a:	f7f2 fb3f 	bl	8006c0c <xQueueGenericCreate>
 801458e:	4603      	mov	r3, r0
 8014590:	4a21      	ldr	r2, [pc, #132]	; (8014618 <rtg_main+0x348>)
 8014592:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(Sem);
 8014594:	4b20      	ldr	r3, [pc, #128]	; (8014618 <rtg_main+0x348>)
 8014596:	6818      	ldr	r0, [r3, #0]
 8014598:	2300      	movs	r3, #0
 801459a:	2200      	movs	r2, #0
 801459c:	2100      	movs	r1, #0
 801459e:	f7f2 fbe3 	bl	8006d68 <xQueueGenericSend>
	printf("Start of program:\r\n");
 80145a2:	481e      	ldr	r0, [pc, #120]	; (801461c <rtg_main+0x34c>)
 80145a4:	f001 fa48 	bl	8015a38 <puts>

	//start the program by the scheduler task
	vTaskStartScheduler();
 80145a8:	f7f3 fbaa 	bl	8007d00 <vTaskStartScheduler>
	while(TRUE);
 80145ac:	e7fe      	b.n	80145ac <rtg_main+0x2dc>
 80145ae:	bf00      	nop
 80145b0:	2002ed9c 	.word	0x2002ed9c
 80145b4:	0801987c 	.word	0x0801987c
 80145b8:	2002eda0 	.word	0x2002eda0
 80145bc:	2002eda4 	.word	0x2002eda4
 80145c0:	2002eda8 	.word	0x2002eda8
 80145c4:	2002edac 	.word	0x2002edac
 80145c8:	2002edb0 	.word	0x2002edb0
 80145cc:	2002edb4 	.word	0x2002edb4
 80145d0:	2002edb8 	.word	0x2002edb8
 80145d4:	2002edbc 	.word	0x2002edbc
 80145d8:	2002edc0 	.word	0x2002edc0
 80145dc:	2002edc4 	.word	0x2002edc4
 80145e0:	2002edc8 	.word	0x2002edc8
 80145e4:	2002ed98 	.word	0x2002ed98
 80145e8:	08019884 	.word	0x08019884
 80145ec:	08014f65 	.word	0x08014f65
 80145f0:	0801988c 	.word	0x0801988c
 80145f4:	08014635 	.word	0x08014635
 80145f8:	08019894 	.word	0x08019894
 80145fc:	08014a9d 	.word	0x08014a9d
 8014600:	0801989c 	.word	0x0801989c
 8014604:	08014be1 	.word	0x08014be1
 8014608:	080198a8 	.word	0x080198a8
 801460c:	08014d0d 	.word	0x08014d0d
 8014610:	080198b4 	.word	0x080198b4
 8014614:	08014e39 	.word	0x08014e39
 8014618:	2002edcc 	.word	0x2002edcc
 801461c:	080198c4 	.word	0x080198c4

08014620 <tftpd_init>:
}

void tftpd_init(void)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	af00      	add	r7, sp, #0
	tftp_init(&tftpd);
 8014624:	4802      	ldr	r0, [pc, #8]	; (8014630 <tftpd_init+0x10>)
 8014626:	f7f5 fae5 	bl	8009bf4 <tftp_init>
}
 801462a:	bf00      	nop
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	2002e7ac 	.word	0x2002e7ac

08014634 <Manager>:

//this function manage the "city" ,
//The function receives an event, transfers it to the handling department via a switch case,
//and uploads it to the queue message of that department
void Manager(void const * argument)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b0aa      	sub	sp, #168	; 0xa8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]

	BaseType_t xQueueSendStatus = pdFAIL;
 801463c:	2300      	movs	r3, #0
 801463e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    //get the asci values and calculate - 48 to get the values
	uint8_t department = tftp_event_buffer.Department -48;
 8014642:	4baf      	ldr	r3, [pc, #700]	; (8014900 <Manager+0x2cc>)
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	3b30      	subs	r3, #48	; 0x30
 8014648:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	uint8_t sevirity  = tftp_event_buffer.Sevirity -48;
 801464c:	4bac      	ldr	r3, [pc, #688]	; (8014900 <Manager+0x2cc>)
 801464e:	785b      	ldrb	r3, [r3, #1]
 8014650:	3b30      	subs	r3, #48	; 0x30
 8014652:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	//This buffer using to load the data by string and upload it the queue message
	char buff[MESSAGE_LENGTH];

	//Calculate the department *10 + severity so we can choose the specific case by one number
	//and we don't have to do case inside case
	uint8_t CaseChecker = department*(uint8_t)CONVERTION + sevirity;
 8014656:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 801465a:	461a      	mov	r2, r3
 801465c:	0092      	lsls	r2, r2, #2
 801465e:	4413      	add	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	b2da      	uxtb	r2, r3
 8014664:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8014668:	4413      	add	r3, r2
 801466a:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1

	while(TRUE)
	{


		if(New_event_flag){
 801466e:	4ba5      	ldr	r3, [pc, #660]	; (8014904 <Manager+0x2d0>)
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	f000 81e4 	beq.w	8014a40 <Manager+0x40c>

			///POLICE CASES:///
			switch(CaseChecker){
 8014678:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 801467c:	3b0b      	subs	r3, #11
 801467e:	2b20      	cmp	r3, #32
 8014680:	f200 81db 	bhi.w	8014a3a <Manager+0x406>
 8014684:	a201      	add	r2, pc, #4	; (adr r2, 801468c <Manager+0x58>)
 8014686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801468a:	bf00      	nop
 801468c:	08014711 	.word	0x08014711
 8014690:	0801474f 	.word	0x0801474f
 8014694:	0801478d 	.word	0x0801478d
 8014698:	08014a3b 	.word	0x08014a3b
 801469c:	08014a3b 	.word	0x08014a3b
 80146a0:	08014a3b 	.word	0x08014a3b
 80146a4:	08014a3b 	.word	0x08014a3b
 80146a8:	08014a3b 	.word	0x08014a3b
 80146ac:	08014a3b 	.word	0x08014a3b
 80146b0:	08014a3b 	.word	0x08014a3b
 80146b4:	080147cb 	.word	0x080147cb
 80146b8:	08014809 	.word	0x08014809
 80146bc:	08014847 	.word	0x08014847
 80146c0:	08014a3b 	.word	0x08014a3b
 80146c4:	08014a3b 	.word	0x08014a3b
 80146c8:	08014a3b 	.word	0x08014a3b
 80146cc:	08014a3b 	.word	0x08014a3b
 80146d0:	08014a3b 	.word	0x08014a3b
 80146d4:	08014a3b 	.word	0x08014a3b
 80146d8:	08014a3b 	.word	0x08014a3b
 80146dc:	08014885 	.word	0x08014885
 80146e0:	080148c3 	.word	0x080148c3
 80146e4:	08014951 	.word	0x08014951
 80146e8:	08014a3b 	.word	0x08014a3b
 80146ec:	08014a3b 	.word	0x08014a3b
 80146f0:	08014a3b 	.word	0x08014a3b
 80146f4:	08014a3b 	.word	0x08014a3b
 80146f8:	08014a3b 	.word	0x08014a3b
 80146fc:	08014a3b 	.word	0x08014a3b
 8014700:	08014a3b 	.word	0x08014a3b
 8014704:	0801498d 	.word	0x0801498d
 8014708:	080149c7 	.word	0x080149c7
 801470c:	08014a01 	.word	0x08014a01

			case POLICE_CRITICAL:
				sprintf(buff,"Event ID: %d Department: Police, Priority: Critical, Address: %s",LogID,  tftp_event_buffer.Address );
 8014710:	4b7d      	ldr	r3, [pc, #500]	; (8014908 <Manager+0x2d4>)
 8014712:	881b      	ldrh	r3, [r3, #0]
 8014714:	461a      	mov	r2, r3
 8014716:	f107 0008 	add.w	r0, r7, #8
 801471a:	4b7c      	ldr	r3, [pc, #496]	; (801490c <Manager+0x2d8>)
 801471c:	497c      	ldr	r1, [pc, #496]	; (8014910 <Manager+0x2dc>)
 801471e:	f001 fa7f 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(PoliceCritical,buff,TimeToWait);
 8014722:	4b7c      	ldr	r3, [pc, #496]	; (8014914 <Manager+0x2e0>)
 8014724:	6818      	ldr	r0, [r3, #0]
 8014726:	f107 0108 	add.w	r1, r7, #8
 801472a:	2300      	movs	r3, #0
 801472c:	2200      	movs	r2, #0
 801472e:	f7f2 fb1b 	bl	8006d68 <xQueueGenericSend>
 8014732:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 8014736:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801473a:	2b00      	cmp	r3, #0
 801473c:	f000 8184 	beq.w	8014a48 <Manager+0x414>
					continue;
				LogID++;
 8014740:	4b71      	ldr	r3, [pc, #452]	; (8014908 <Manager+0x2d4>)
 8014742:	881b      	ldrh	r3, [r3, #0]
 8014744:	3301      	adds	r3, #1
 8014746:	b29a      	uxth	r2, r3
 8014748:	4b6f      	ldr	r3, [pc, #444]	; (8014908 <Manager+0x2d4>)
 801474a:	801a      	strh	r2, [r3, #0]
				break;
 801474c:	e175      	b.n	8014a3a <Manager+0x406>
			case POLICE_WARNING:
				sprintf(buff,"Event ID: %d Department: Police, Priority: WARNING, Address: %s",LogID, tftp_event_buffer.Address );
 801474e:	4b6e      	ldr	r3, [pc, #440]	; (8014908 <Manager+0x2d4>)
 8014750:	881b      	ldrh	r3, [r3, #0]
 8014752:	461a      	mov	r2, r3
 8014754:	f107 0008 	add.w	r0, r7, #8
 8014758:	4b6c      	ldr	r3, [pc, #432]	; (801490c <Manager+0x2d8>)
 801475a:	496f      	ldr	r1, [pc, #444]	; (8014918 <Manager+0x2e4>)
 801475c:	f001 fa60 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(PoliceWarning,buff,TimeToWait);
 8014760:	4b6e      	ldr	r3, [pc, #440]	; (801491c <Manager+0x2e8>)
 8014762:	6818      	ldr	r0, [r3, #0]
 8014764:	f107 0108 	add.w	r1, r7, #8
 8014768:	2300      	movs	r3, #0
 801476a:	2200      	movs	r2, #0
 801476c:	f7f2 fafc 	bl	8006d68 <xQueueGenericSend>
 8014770:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 8014774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014778:	2b00      	cmp	r3, #0
 801477a:	f000 8167 	beq.w	8014a4c <Manager+0x418>
					continue;
				LogID++;
 801477e:	4b62      	ldr	r3, [pc, #392]	; (8014908 <Manager+0x2d4>)
 8014780:	881b      	ldrh	r3, [r3, #0]
 8014782:	3301      	adds	r3, #1
 8014784:	b29a      	uxth	r2, r3
 8014786:	4b60      	ldr	r3, [pc, #384]	; (8014908 <Manager+0x2d4>)
 8014788:	801a      	strh	r2, [r3, #0]

				break;
 801478a:	e156      	b.n	8014a3a <Manager+0x406>
			case POLICE_NOTICE:
				sprintf(buff,"Event ID: %d Department: Police, Priority: NOTICE, Address: %s",LogID, tftp_event_buffer.Address );
 801478c:	4b5e      	ldr	r3, [pc, #376]	; (8014908 <Manager+0x2d4>)
 801478e:	881b      	ldrh	r3, [r3, #0]
 8014790:	461a      	mov	r2, r3
 8014792:	f107 0008 	add.w	r0, r7, #8
 8014796:	4b5d      	ldr	r3, [pc, #372]	; (801490c <Manager+0x2d8>)
 8014798:	4961      	ldr	r1, [pc, #388]	; (8014920 <Manager+0x2ec>)
 801479a:	f001 fa41 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(PoliceNotice,buff,TimeToWait);
 801479e:	4b61      	ldr	r3, [pc, #388]	; (8014924 <Manager+0x2f0>)
 80147a0:	6818      	ldr	r0, [r3, #0]
 80147a2:	f107 0108 	add.w	r1, r7, #8
 80147a6:	2300      	movs	r3, #0
 80147a8:	2200      	movs	r2, #0
 80147aa:	f7f2 fadd 	bl	8006d68 <xQueueGenericSend>
 80147ae:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 80147b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	f000 814a 	beq.w	8014a50 <Manager+0x41c>
					continue;
				LogID++;
 80147bc:	4b52      	ldr	r3, [pc, #328]	; (8014908 <Manager+0x2d4>)
 80147be:	881b      	ldrh	r3, [r3, #0]
 80147c0:	3301      	adds	r3, #1
 80147c2:	b29a      	uxth	r2, r3
 80147c4:	4b50      	ldr	r3, [pc, #320]	; (8014908 <Manager+0x2d4>)
 80147c6:	801a      	strh	r2, [r3, #0]
				break;
 80147c8:	e137      	b.n	8014a3a <Manager+0x406>

			///FIRE CASES: ///
			case FIRE_CRITICAL:
				sprintf(buff,"Event ID: %d Department: Fire, Priority: Critical, Address: %s",LogID, tftp_event_buffer.Address );
 80147ca:	4b4f      	ldr	r3, [pc, #316]	; (8014908 <Manager+0x2d4>)
 80147cc:	881b      	ldrh	r3, [r3, #0]
 80147ce:	461a      	mov	r2, r3
 80147d0:	f107 0008 	add.w	r0, r7, #8
 80147d4:	4b4d      	ldr	r3, [pc, #308]	; (801490c <Manager+0x2d8>)
 80147d6:	4954      	ldr	r1, [pc, #336]	; (8014928 <Manager+0x2f4>)
 80147d8:	f001 fa22 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(FireCritical,buff,TimeToWait);
 80147dc:	4b53      	ldr	r3, [pc, #332]	; (801492c <Manager+0x2f8>)
 80147de:	6818      	ldr	r0, [r3, #0]
 80147e0:	f107 0108 	add.w	r1, r7, #8
 80147e4:	2300      	movs	r3, #0
 80147e6:	2200      	movs	r2, #0
 80147e8:	f7f2 fabe 	bl	8006d68 <xQueueGenericSend>
 80147ec:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 80147f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	f000 812d 	beq.w	8014a54 <Manager+0x420>
					continue;
				LogID++;
 80147fa:	4b43      	ldr	r3, [pc, #268]	; (8014908 <Manager+0x2d4>)
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	3301      	adds	r3, #1
 8014800:	b29a      	uxth	r2, r3
 8014802:	4b41      	ldr	r3, [pc, #260]	; (8014908 <Manager+0x2d4>)
 8014804:	801a      	strh	r2, [r3, #0]
				break;
 8014806:	e118      	b.n	8014a3a <Manager+0x406>
			case FIRE_WARNING:
				sprintf(buff,"Event ID: %d Department: Fire, Priority: WARNING, Address: %s",LogID, tftp_event_buffer.Address );
 8014808:	4b3f      	ldr	r3, [pc, #252]	; (8014908 <Manager+0x2d4>)
 801480a:	881b      	ldrh	r3, [r3, #0]
 801480c:	461a      	mov	r2, r3
 801480e:	f107 0008 	add.w	r0, r7, #8
 8014812:	4b3e      	ldr	r3, [pc, #248]	; (801490c <Manager+0x2d8>)
 8014814:	4946      	ldr	r1, [pc, #280]	; (8014930 <Manager+0x2fc>)
 8014816:	f001 fa03 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(FireWarning,buff,TimeToWait);
 801481a:	4b46      	ldr	r3, [pc, #280]	; (8014934 <Manager+0x300>)
 801481c:	6818      	ldr	r0, [r3, #0]
 801481e:	f107 0108 	add.w	r1, r7, #8
 8014822:	2300      	movs	r3, #0
 8014824:	2200      	movs	r2, #0
 8014826:	f7f2 fa9f 	bl	8006d68 <xQueueGenericSend>
 801482a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 801482e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014832:	2b00      	cmp	r3, #0
 8014834:	f000 8110 	beq.w	8014a58 <Manager+0x424>
					continue;
				LogID++;
 8014838:	4b33      	ldr	r3, [pc, #204]	; (8014908 <Manager+0x2d4>)
 801483a:	881b      	ldrh	r3, [r3, #0]
 801483c:	3301      	adds	r3, #1
 801483e:	b29a      	uxth	r2, r3
 8014840:	4b31      	ldr	r3, [pc, #196]	; (8014908 <Manager+0x2d4>)
 8014842:	801a      	strh	r2, [r3, #0]
				break;
 8014844:	e0f9      	b.n	8014a3a <Manager+0x406>
			case FIRE_NOTICE:
				sprintf(buff,"Event ID: %d, Department: Fire, Priority: NOTICE, Address: %s",LogID, tftp_event_buffer.Address );
 8014846:	4b30      	ldr	r3, [pc, #192]	; (8014908 <Manager+0x2d4>)
 8014848:	881b      	ldrh	r3, [r3, #0]
 801484a:	461a      	mov	r2, r3
 801484c:	f107 0008 	add.w	r0, r7, #8
 8014850:	4b2e      	ldr	r3, [pc, #184]	; (801490c <Manager+0x2d8>)
 8014852:	4939      	ldr	r1, [pc, #228]	; (8014938 <Manager+0x304>)
 8014854:	f001 f9e4 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(FireNotice,buff,TimeToWait);
 8014858:	4b38      	ldr	r3, [pc, #224]	; (801493c <Manager+0x308>)
 801485a:	6818      	ldr	r0, [r3, #0]
 801485c:	f107 0108 	add.w	r1, r7, #8
 8014860:	2300      	movs	r3, #0
 8014862:	2200      	movs	r2, #0
 8014864:	f7f2 fa80 	bl	8006d68 <xQueueGenericSend>
 8014868:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 801486c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014870:	2b00      	cmp	r3, #0
 8014872:	f000 80f3 	beq.w	8014a5c <Manager+0x428>
					continue;
				LogID++;
 8014876:	4b24      	ldr	r3, [pc, #144]	; (8014908 <Manager+0x2d4>)
 8014878:	881b      	ldrh	r3, [r3, #0]
 801487a:	3301      	adds	r3, #1
 801487c:	b29a      	uxth	r2, r3
 801487e:	4b22      	ldr	r3, [pc, #136]	; (8014908 <Manager+0x2d4>)
 8014880:	801a      	strh	r2, [r3, #0]
				break;
 8014882:	e0da      	b.n	8014a3a <Manager+0x406>

			//AMBULANCE CASES: ///
			case AMBULANCE_CRITICAL:
				sprintf(buff,"Event ID: %d ,Department: Ambulance, Priority: Critical, Address: %s",LogID, tftp_event_buffer.Address );
 8014884:	4b20      	ldr	r3, [pc, #128]	; (8014908 <Manager+0x2d4>)
 8014886:	881b      	ldrh	r3, [r3, #0]
 8014888:	461a      	mov	r2, r3
 801488a:	f107 0008 	add.w	r0, r7, #8
 801488e:	4b1f      	ldr	r3, [pc, #124]	; (801490c <Manager+0x2d8>)
 8014890:	492b      	ldr	r1, [pc, #172]	; (8014940 <Manager+0x30c>)
 8014892:	f001 f9c5 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(AmbulanceCritical,buff,TimeToWait);
 8014896:	4b2b      	ldr	r3, [pc, #172]	; (8014944 <Manager+0x310>)
 8014898:	6818      	ldr	r0, [r3, #0]
 801489a:	f107 0108 	add.w	r1, r7, #8
 801489e:	2300      	movs	r3, #0
 80148a0:	2200      	movs	r2, #0
 80148a2:	f7f2 fa61 	bl	8006d68 <xQueueGenericSend>
 80148a6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 80148aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	f000 80d6 	beq.w	8014a60 <Manager+0x42c>
					continue;
				LogID++;
 80148b4:	4b14      	ldr	r3, [pc, #80]	; (8014908 <Manager+0x2d4>)
 80148b6:	881b      	ldrh	r3, [r3, #0]
 80148b8:	3301      	adds	r3, #1
 80148ba:	b29a      	uxth	r2, r3
 80148bc:	4b12      	ldr	r3, [pc, #72]	; (8014908 <Manager+0x2d4>)
 80148be:	801a      	strh	r2, [r3, #0]
				break;
 80148c0:	e0bb      	b.n	8014a3a <Manager+0x406>
			case AMBULANCE_WARNING:
				sprintf(buff,"Event ID: %d ,Department: Ambulance, Priority: WARNING, Address: %s",LogID, tftp_event_buffer.Address );
 80148c2:	4b11      	ldr	r3, [pc, #68]	; (8014908 <Manager+0x2d4>)
 80148c4:	881b      	ldrh	r3, [r3, #0]
 80148c6:	461a      	mov	r2, r3
 80148c8:	f107 0008 	add.w	r0, r7, #8
 80148cc:	4b0f      	ldr	r3, [pc, #60]	; (801490c <Manager+0x2d8>)
 80148ce:	491e      	ldr	r1, [pc, #120]	; (8014948 <Manager+0x314>)
 80148d0:	f001 f9a6 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(AmbulceWarning,buff,TimeToWait);
 80148d4:	4b1d      	ldr	r3, [pc, #116]	; (801494c <Manager+0x318>)
 80148d6:	6818      	ldr	r0, [r3, #0]
 80148d8:	f107 0108 	add.w	r1, r7, #8
 80148dc:	2300      	movs	r3, #0
 80148de:	2200      	movs	r2, #0
 80148e0:	f7f2 fa42 	bl	8006d68 <xQueueGenericSend>
 80148e4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 80148e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	f000 80b9 	beq.w	8014a64 <Manager+0x430>
					continue;
				LogID++;
 80148f2:	4b05      	ldr	r3, [pc, #20]	; (8014908 <Manager+0x2d4>)
 80148f4:	881b      	ldrh	r3, [r3, #0]
 80148f6:	3301      	adds	r3, #1
 80148f8:	b29a      	uxth	r2, r3
 80148fa:	4b03      	ldr	r3, [pc, #12]	; (8014908 <Manager+0x2d4>)
 80148fc:	801a      	strh	r2, [r3, #0]
				break;
 80148fe:	e09c      	b.n	8014a3a <Manager+0x406>
 8014900:	2002efd4 	.word	0x2002efd4
 8014904:	2002f026 	.word	0x2002f026
 8014908:	2000002e 	.word	0x2000002e
 801490c:	2002efd6 	.word	0x2002efd6
 8014910:	080198d8 	.word	0x080198d8
 8014914:	2002ed9c 	.word	0x2002ed9c
 8014918:	0801991c 	.word	0x0801991c
 801491c:	2002eda0 	.word	0x2002eda0
 8014920:	0801995c 	.word	0x0801995c
 8014924:	2002eda4 	.word	0x2002eda4
 8014928:	0801999c 	.word	0x0801999c
 801492c:	2002eda8 	.word	0x2002eda8
 8014930:	080199dc 	.word	0x080199dc
 8014934:	2002edac 	.word	0x2002edac
 8014938:	08019a1c 	.word	0x08019a1c
 801493c:	2002edb0 	.word	0x2002edb0
 8014940:	08019a5c 	.word	0x08019a5c
 8014944:	2002edb4 	.word	0x2002edb4
 8014948:	08019aa4 	.word	0x08019aa4
 801494c:	2002edb8 	.word	0x2002edb8
			case AMBULANCE_NOTICE:
				sprintf(buff,"Event ID: %d ,Department: Ambulance, Priority: NOTICE, Address: %s",LogID, tftp_event_buffer.Address );
 8014950:	4b49      	ldr	r3, [pc, #292]	; (8014a78 <Manager+0x444>)
 8014952:	881b      	ldrh	r3, [r3, #0]
 8014954:	461a      	mov	r2, r3
 8014956:	f107 0008 	add.w	r0, r7, #8
 801495a:	4b48      	ldr	r3, [pc, #288]	; (8014a7c <Manager+0x448>)
 801495c:	4948      	ldr	r1, [pc, #288]	; (8014a80 <Manager+0x44c>)
 801495e:	f001 f95f 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(AmbulanceNotice,buff,TimeToWait);
 8014962:	4b48      	ldr	r3, [pc, #288]	; (8014a84 <Manager+0x450>)
 8014964:	6818      	ldr	r0, [r3, #0]
 8014966:	f107 0108 	add.w	r1, r7, #8
 801496a:	2300      	movs	r3, #0
 801496c:	2200      	movs	r2, #0
 801496e:	f7f2 f9fb 	bl	8006d68 <xQueueGenericSend>
 8014972:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 8014976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801497a:	2b00      	cmp	r3, #0
 801497c:	d074      	beq.n	8014a68 <Manager+0x434>
					continue;
				LogID++;
 801497e:	4b3e      	ldr	r3, [pc, #248]	; (8014a78 <Manager+0x444>)
 8014980:	881b      	ldrh	r3, [r3, #0]
 8014982:	3301      	adds	r3, #1
 8014984:	b29a      	uxth	r2, r3
 8014986:	4b3c      	ldr	r3, [pc, #240]	; (8014a78 <Manager+0x444>)
 8014988:	801a      	strh	r2, [r3, #0]
				break;
 801498a:	e056      	b.n	8014a3a <Manager+0x406>

				//MAINTENANCE CASES: ///
			case MAINTANANCE_CRITICAL:
				sprintf(buff,"Event ID: %d ,Department: Maintenance, Priority: NOTICE, Address: %s",LogID, tftp_event_buffer.Address );
 801498c:	4b3a      	ldr	r3, [pc, #232]	; (8014a78 <Manager+0x444>)
 801498e:	881b      	ldrh	r3, [r3, #0]
 8014990:	461a      	mov	r2, r3
 8014992:	f107 0008 	add.w	r0, r7, #8
 8014996:	4b39      	ldr	r3, [pc, #228]	; (8014a7c <Manager+0x448>)
 8014998:	493b      	ldr	r1, [pc, #236]	; (8014a88 <Manager+0x454>)
 801499a:	f001 f941 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(MaintenanceCritical,tftp_event_buffer.Address,TimeToWait);
 801499e:	4b3b      	ldr	r3, [pc, #236]	; (8014a8c <Manager+0x458>)
 80149a0:	6818      	ldr	r0, [r3, #0]
 80149a2:	2300      	movs	r3, #0
 80149a4:	2200      	movs	r2, #0
 80149a6:	4935      	ldr	r1, [pc, #212]	; (8014a7c <Manager+0x448>)
 80149a8:	f7f2 f9de 	bl	8006d68 <xQueueGenericSend>
 80149ac:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 80149b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d059      	beq.n	8014a6c <Manager+0x438>
					continue;
				LogID++;
 80149b8:	4b2f      	ldr	r3, [pc, #188]	; (8014a78 <Manager+0x444>)
 80149ba:	881b      	ldrh	r3, [r3, #0]
 80149bc:	3301      	adds	r3, #1
 80149be:	b29a      	uxth	r2, r3
 80149c0:	4b2d      	ldr	r3, [pc, #180]	; (8014a78 <Manager+0x444>)
 80149c2:	801a      	strh	r2, [r3, #0]
				break;
 80149c4:	e039      	b.n	8014a3a <Manager+0x406>
			case MAINTANANCE_WARNING:
				sprintf(buff,"Event ID: %d ,Department: Maintenance, Priority: NOTICE, Address: %s",LogID, tftp_event_buffer.Address );
 80149c6:	4b2c      	ldr	r3, [pc, #176]	; (8014a78 <Manager+0x444>)
 80149c8:	881b      	ldrh	r3, [r3, #0]
 80149ca:	461a      	mov	r2, r3
 80149cc:	f107 0008 	add.w	r0, r7, #8
 80149d0:	4b2a      	ldr	r3, [pc, #168]	; (8014a7c <Manager+0x448>)
 80149d2:	492d      	ldr	r1, [pc, #180]	; (8014a88 <Manager+0x454>)
 80149d4:	f001 f924 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(MaintenanceWarning,tftp_event_buffer.Address,TimeToWait);
 80149d8:	4b2d      	ldr	r3, [pc, #180]	; (8014a90 <Manager+0x45c>)
 80149da:	6818      	ldr	r0, [r3, #0]
 80149dc:	2300      	movs	r3, #0
 80149de:	2200      	movs	r2, #0
 80149e0:	4926      	ldr	r1, [pc, #152]	; (8014a7c <Manager+0x448>)
 80149e2:	f7f2 f9c1 	bl	8006d68 <xQueueGenericSend>
 80149e6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 80149ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d03e      	beq.n	8014a70 <Manager+0x43c>
					continue;
				LogID++;
 80149f2:	4b21      	ldr	r3, [pc, #132]	; (8014a78 <Manager+0x444>)
 80149f4:	881b      	ldrh	r3, [r3, #0]
 80149f6:	3301      	adds	r3, #1
 80149f8:	b29a      	uxth	r2, r3
 80149fa:	4b1f      	ldr	r3, [pc, #124]	; (8014a78 <Manager+0x444>)
 80149fc:	801a      	strh	r2, [r3, #0]
				break;
 80149fe:	e01c      	b.n	8014a3a <Manager+0x406>
			case MAINTANANCE_NOTICE:
				sprintf(buff,"Event ID: %d ,Department: Maintenance, Priority: NOTICE, Address: %s", LogID, tftp_event_buffer.Address );
 8014a00:	4b1d      	ldr	r3, [pc, #116]	; (8014a78 <Manager+0x444>)
 8014a02:	881b      	ldrh	r3, [r3, #0]
 8014a04:	461a      	mov	r2, r3
 8014a06:	f107 0008 	add.w	r0, r7, #8
 8014a0a:	4b1c      	ldr	r3, [pc, #112]	; (8014a7c <Manager+0x448>)
 8014a0c:	491e      	ldr	r1, [pc, #120]	; (8014a88 <Manager+0x454>)
 8014a0e:	f001 f907 	bl	8015c20 <siprintf>
				xQueueSendStatus = xQueueSendToBack(MaintenanceNotice,tftp_event_buffer.Address,TimeToWait);
 8014a12:	4b20      	ldr	r3, [pc, #128]	; (8014a94 <Manager+0x460>)
 8014a14:	6818      	ldr	r0, [r3, #0]
 8014a16:	2300      	movs	r3, #0
 8014a18:	2200      	movs	r2, #0
 8014a1a:	4918      	ldr	r1, [pc, #96]	; (8014a7c <Manager+0x448>)
 8014a1c:	f7f2 f9a4 	bl	8006d68 <xQueueGenericSend>
 8014a20:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if(xQueueSendStatus == pdFAIL)
 8014a24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d023      	beq.n	8014a74 <Manager+0x440>
					continue;
				LogID++;
 8014a2c:	4b12      	ldr	r3, [pc, #72]	; (8014a78 <Manager+0x444>)
 8014a2e:	881b      	ldrh	r3, [r3, #0]
 8014a30:	3301      	adds	r3, #1
 8014a32:	b29a      	uxth	r2, r3
 8014a34:	4b10      	ldr	r3, [pc, #64]	; (8014a78 <Manager+0x444>)
 8014a36:	801a      	strh	r2, [r3, #0]
				break;
 8014a38:	bf00      	nop

		}
	New_event_flag = INIT_ZERO;
 8014a3a:	4b17      	ldr	r3, [pc, #92]	; (8014a98 <Manager+0x464>)
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	701a      	strb	r2, [r3, #0]
	}
	vTaskDelay(pdMS_TO_TICKS(DISPATCHER_DELAY));
 8014a40:	2064      	movs	r0, #100	; 0x64
 8014a42:	f7f3 f927 	bl	8007c94 <vTaskDelay>
 8014a46:	e612      	b.n	801466e <Manager+0x3a>
					continue;
 8014a48:	bf00      	nop
 8014a4a:	e610      	b.n	801466e <Manager+0x3a>
					continue;
 8014a4c:	bf00      	nop
 8014a4e:	e60e      	b.n	801466e <Manager+0x3a>
					continue;
 8014a50:	bf00      	nop
 8014a52:	e60c      	b.n	801466e <Manager+0x3a>
					continue;
 8014a54:	bf00      	nop
 8014a56:	e60a      	b.n	801466e <Manager+0x3a>
					continue;
 8014a58:	bf00      	nop
 8014a5a:	e608      	b.n	801466e <Manager+0x3a>
					continue;
 8014a5c:	bf00      	nop
 8014a5e:	e606      	b.n	801466e <Manager+0x3a>
					continue;
 8014a60:	bf00      	nop
 8014a62:	e604      	b.n	801466e <Manager+0x3a>
					continue;
 8014a64:	bf00      	nop
 8014a66:	e602      	b.n	801466e <Manager+0x3a>
					continue;
 8014a68:	bf00      	nop
 8014a6a:	e600      	b.n	801466e <Manager+0x3a>
					continue;
 8014a6c:	bf00      	nop
 8014a6e:	e5fe      	b.n	801466e <Manager+0x3a>
					continue;
 8014a70:	bf00      	nop
 8014a72:	e5fc      	b.n	801466e <Manager+0x3a>
					continue;
 8014a74:	bf00      	nop
		if(New_event_flag){
 8014a76:	e5fa      	b.n	801466e <Manager+0x3a>
 8014a78:	2000002e 	.word	0x2000002e
 8014a7c:	2002efd6 	.word	0x2002efd6
 8014a80:	08019ae8 	.word	0x08019ae8
 8014a84:	2002edbc 	.word	0x2002edbc
 8014a88:	08019b2c 	.word	0x08019b2c
 8014a8c:	2002edc0 	.word	0x2002edc0
 8014a90:	2002edc4 	.word	0x2002edc4
 8014a94:	2002edc8 	.word	0x2002edc8
 8014a98:	2002f026 	.word	0x2002f026

08014a9c <PoliceWorker>:
//This function expresses a call to the policeman,
//Checks the queue message of the police department in order of priority:
//first the critical queue, then the warning queue and then the notice queue
//if there is an event in the message queue, it pulls it out and prints it to the screen by UART protocol
void PoliceWorker(void)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0

	BaseType_t xStatus = pdFALSE;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	607b      	str	r3, [r7, #4]
	TickType_t xTicksToWait = pdMS_TO_TICKS(Queue_Time_to_Wait);
 8014aa6:	230a      	movs	r3, #10
 8014aa8:	603b      	str	r3, [r7, #0]

	while(TRUE)
	{
		//check if there is an event in the queue message and then take a semaphore to using the UART
		//protocol so there us no case that tow events try to use in the same resource at the same time
		if(xQueueReceive(PoliceCritical,CityLog,TimeToWait) == pdTRUE)
 8014aaa:	4b45      	ldr	r3, [pc, #276]	; (8014bc0 <PoliceWorker+0x124>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	2200      	movs	r2, #0
 8014ab0:	4944      	ldr	r1, [pc, #272]	; (8014bc4 <PoliceWorker+0x128>)
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7f2 fb94 	bl	80071e0 <xQueueReceive>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	d120      	bne.n	8014b00 <PoliceWorker+0x64>
		{
			xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014abe:	4b42      	ldr	r3, [pc, #264]	; (8014bc8 <PoliceWorker+0x12c>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7f2 fc70 	bl	80073ac <xQueueSemaphoreTake>
 8014acc:	6078      	str	r0, [r7, #4]
			if(xStatus == pdFAIL)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d06f      	beq.n	8014bb4 <PoliceWorker+0x118>
				continue;
			printf("%s\r\n",CityLog);
 8014ad4:	493b      	ldr	r1, [pc, #236]	; (8014bc4 <PoliceWorker+0x128>)
 8014ad6:	483d      	ldr	r0, [pc, #244]	; (8014bcc <PoliceWorker+0x130>)
 8014ad8:	f000 ff28 	bl	801592c <iprintf>
			flag_printer = INIT_ZERO;
 8014adc:	4b3c      	ldr	r3, [pc, #240]	; (8014bd0 <PoliceWorker+0x134>)
 8014ade:	2200      	movs	r2, #0
 8014ae0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014ae2:	2180      	movs	r1, #128	; 0x80
 8014ae4:	483b      	ldr	r0, [pc, #236]	; (8014bd4 <PoliceWorker+0x138>)
 8014ae6:	f7ee f856 	bl	8002b96 <HAL_GPIO_TogglePin>
			HAL_Delay(DELAY_WORKER);
 8014aea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014aee:	f7ec fb39 	bl	8001164 <HAL_Delay>
			memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014af2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014af6:	2100      	movs	r1, #0
 8014af8:	4832      	ldr	r0, [pc, #200]	; (8014bc4 <PoliceWorker+0x128>)
 8014afa:	f000 fe1d 	bl	8015738 <memset>
 8014afe:	e04e      	b.n	8014b9e <PoliceWorker+0x102>

		}
		else if(xQueueReceive(PoliceWarning,CityLog,TimeToWait) == pdTRUE)
 8014b00:	4b35      	ldr	r3, [pc, #212]	; (8014bd8 <PoliceWorker+0x13c>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2200      	movs	r2, #0
 8014b06:	492f      	ldr	r1, [pc, #188]	; (8014bc4 <PoliceWorker+0x128>)
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f7f2 fb69 	bl	80071e0 <xQueueReceive>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	d11d      	bne.n	8014b50 <PoliceWorker+0xb4>
		{
			xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014b14:	4b2c      	ldr	r3, [pc, #176]	; (8014bc8 <PoliceWorker+0x12c>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	f04f 31ff 	mov.w	r1, #4294967295
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7f2 fc45 	bl	80073ac <xQueueSemaphoreTake>
 8014b22:	6078      	str	r0, [r7, #4]
			if(xStatus == pdFAIL)
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d046      	beq.n	8014bb8 <PoliceWorker+0x11c>
				continue;
			printf("%s\r\n",CityLog);
 8014b2a:	4926      	ldr	r1, [pc, #152]	; (8014bc4 <PoliceWorker+0x128>)
 8014b2c:	4827      	ldr	r0, [pc, #156]	; (8014bcc <PoliceWorker+0x130>)
 8014b2e:	f000 fefd 	bl	801592c <iprintf>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014b32:	2180      	movs	r1, #128	; 0x80
 8014b34:	4827      	ldr	r0, [pc, #156]	; (8014bd4 <PoliceWorker+0x138>)
 8014b36:	f7ee f82e 	bl	8002b96 <HAL_GPIO_TogglePin>
			HAL_Delay(DELAY_WORKER);
 8014b3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014b3e:	f7ec fb11 	bl	8001164 <HAL_Delay>
			memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014b42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014b46:	2100      	movs	r1, #0
 8014b48:	481e      	ldr	r0, [pc, #120]	; (8014bc4 <PoliceWorker+0x128>)
 8014b4a:	f000 fdf5 	bl	8015738 <memset>
 8014b4e:	e026      	b.n	8014b9e <PoliceWorker+0x102>
		}
		else if(xQueueReceive(PoliceNotice,CityLog,TimeToWait) == pdTRUE)
 8014b50:	4b22      	ldr	r3, [pc, #136]	; (8014bdc <PoliceWorker+0x140>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	2200      	movs	r2, #0
 8014b56:	491b      	ldr	r1, [pc, #108]	; (8014bc4 <PoliceWorker+0x128>)
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7f2 fb41 	bl	80071e0 <xQueueReceive>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	2b01      	cmp	r3, #1
 8014b62:	d11c      	bne.n	8014b9e <PoliceWorker+0x102>
		{
			xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014b64:	4b18      	ldr	r3, [pc, #96]	; (8014bc8 <PoliceWorker+0x12c>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	f04f 31ff 	mov.w	r1, #4294967295
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7f2 fc1d 	bl	80073ac <xQueueSemaphoreTake>
 8014b72:	6078      	str	r0, [r7, #4]
			if(xStatus == pdFAIL)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d020      	beq.n	8014bbc <PoliceWorker+0x120>
				continue;
			printf("%s\r\n",CityLog);
 8014b7a:	4912      	ldr	r1, [pc, #72]	; (8014bc4 <PoliceWorker+0x128>)
 8014b7c:	4813      	ldr	r0, [pc, #76]	; (8014bcc <PoliceWorker+0x130>)
 8014b7e:	f000 fed5 	bl	801592c <iprintf>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014b82:	2180      	movs	r1, #128	; 0x80
 8014b84:	4813      	ldr	r0, [pc, #76]	; (8014bd4 <PoliceWorker+0x138>)
 8014b86:	f7ee f806 	bl	8002b96 <HAL_GPIO_TogglePin>
			HAL_Delay(DELAY_WORKER);
 8014b8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014b8e:	f7ec fae9 	bl	8001164 <HAL_Delay>
			memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014b92:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014b96:	2100      	movs	r1, #0
 8014b98:	480a      	ldr	r0, [pc, #40]	; (8014bc4 <PoliceWorker+0x128>)
 8014b9a:	f000 fdcd 	bl	8015738 <memset>
		}

		xSemaphoreGive(Sem);
 8014b9e:	4b0a      	ldr	r3, [pc, #40]	; (8014bc8 <PoliceWorker+0x12c>)
 8014ba0:	6818      	ldr	r0, [r3, #0]
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	2100      	movs	r1, #0
 8014ba8:	f7f2 f8de 	bl	8006d68 <xQueueGenericSend>
		vTaskDelay(xTicksToWait);
 8014bac:	6838      	ldr	r0, [r7, #0]
 8014bae:	f7f3 f871 	bl	8007c94 <vTaskDelay>
 8014bb2:	e77a      	b.n	8014aaa <PoliceWorker+0xe>
				continue;
 8014bb4:	bf00      	nop
 8014bb6:	e778      	b.n	8014aaa <PoliceWorker+0xe>
				continue;
 8014bb8:	bf00      	nop
 8014bba:	e776      	b.n	8014aaa <PoliceWorker+0xe>
				continue;
 8014bbc:	bf00      	nop
		if(xQueueReceive(PoliceCritical,CityLog,TimeToWait) == pdTRUE)
 8014bbe:	e774      	b.n	8014aaa <PoliceWorker+0xe>
 8014bc0:	2002ed9c 	.word	0x2002ed9c
 8014bc4:	2002e7bc 	.word	0x2002e7bc
 8014bc8:	2002edcc 	.word	0x2002edcc
 8014bcc:	08019b74 	.word	0x08019b74
 8014bd0:	2002e7a8 	.word	0x2002e7a8
 8014bd4:	40020400 	.word	0x40020400
 8014bd8:	2002eda0 	.word	0x2002eda0
 8014bdc:	2002eda4 	.word	0x2002eda4

08014be0 <AmbulanceWorker>:
//This function expresses a call to the ambulance,
//Checks the queue message of the ambulance department in order of priority:
//first the critical queue, then the warning queue and then the notice queue
//if there is an event in the message queue, it pulls it out and prints it to the screen by UART protocol
void AmbulanceWorker(void)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0

	BaseType_t xStatus = pdFALSE;
 8014be6:	2300      	movs	r3, #0
 8014be8:	607b      	str	r3, [r7, #4]
	TickType_t xTicksToWait = pdMS_TO_TICKS(Queue_Time_to_Wait);
 8014bea:	230a      	movs	r3, #10
 8014bec:	603b      	str	r3, [r7, #0]
	while(TRUE)
		{
		//check if there is an event in the queue message and then take a semaphore to using the UART
		//protocol so there us no case that tow events try to use in the same resource at the same time
			if(xQueueReceive(AmbulanceCritical,CityLog,TimeToWait) == pdTRUE)
 8014bee:	4b40      	ldr	r3, [pc, #256]	; (8014cf0 <AmbulanceWorker+0x110>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	493f      	ldr	r1, [pc, #252]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7f2 faf2 	bl	80071e0 <xQueueReceive>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	2b01      	cmp	r3, #1
 8014c00:	d11d      	bne.n	8014c3e <AmbulanceWorker+0x5e>
			{
				xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014c02:	4b3d      	ldr	r3, [pc, #244]	; (8014cf8 <AmbulanceWorker+0x118>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	f04f 31ff 	mov.w	r1, #4294967295
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7f2 fbce 	bl	80073ac <xQueueSemaphoreTake>
 8014c10:	6078      	str	r0, [r7, #4]
				if(xStatus == pdFAIL)
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d065      	beq.n	8014ce4 <AmbulanceWorker+0x104>
					continue;
				printf("%s\r\n",CityLog);
 8014c18:	4936      	ldr	r1, [pc, #216]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014c1a:	4838      	ldr	r0, [pc, #224]	; (8014cfc <AmbulanceWorker+0x11c>)
 8014c1c:	f000 fe86 	bl	801592c <iprintf>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014c20:	2180      	movs	r1, #128	; 0x80
 8014c22:	4837      	ldr	r0, [pc, #220]	; (8014d00 <AmbulanceWorker+0x120>)
 8014c24:	f7ed ffb7 	bl	8002b96 <HAL_GPIO_TogglePin>
				HAL_Delay(DELAY_WORKER);
 8014c28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014c2c:	f7ec fa9a 	bl	8001164 <HAL_Delay>
				memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014c30:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014c34:	2100      	movs	r1, #0
 8014c36:	482f      	ldr	r0, [pc, #188]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014c38:	f000 fd7e 	bl	8015738 <memset>
 8014c3c:	e04e      	b.n	8014cdc <AmbulanceWorker+0xfc>
			}

			else if(xQueueReceive(AmbulceWarning,CityLog,TimeToWait) == pdTRUE)
 8014c3e:	4b31      	ldr	r3, [pc, #196]	; (8014d04 <AmbulanceWorker+0x124>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	2200      	movs	r2, #0
 8014c44:	492b      	ldr	r1, [pc, #172]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7f2 faca 	bl	80071e0 <xQueueReceive>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b01      	cmp	r3, #1
 8014c50:	d11d      	bne.n	8014c8e <AmbulanceWorker+0xae>
			{
				xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014c52:	4b29      	ldr	r3, [pc, #164]	; (8014cf8 <AmbulanceWorker+0x118>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	f04f 31ff 	mov.w	r1, #4294967295
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7f2 fba6 	bl	80073ac <xQueueSemaphoreTake>
 8014c60:	6078      	str	r0, [r7, #4]
				if(xStatus == pdFAIL)
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d03f      	beq.n	8014ce8 <AmbulanceWorker+0x108>
					continue;
				printf("%s\r\n",CityLog);
 8014c68:	4922      	ldr	r1, [pc, #136]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014c6a:	4824      	ldr	r0, [pc, #144]	; (8014cfc <AmbulanceWorker+0x11c>)
 8014c6c:	f000 fe5e 	bl	801592c <iprintf>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014c70:	2180      	movs	r1, #128	; 0x80
 8014c72:	4823      	ldr	r0, [pc, #140]	; (8014d00 <AmbulanceWorker+0x120>)
 8014c74:	f7ed ff8f 	bl	8002b96 <HAL_GPIO_TogglePin>
				HAL_Delay(DELAY_WORKER);
 8014c78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014c7c:	f7ec fa72 	bl	8001164 <HAL_Delay>
				memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014c80:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014c84:	2100      	movs	r1, #0
 8014c86:	481b      	ldr	r0, [pc, #108]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014c88:	f000 fd56 	bl	8015738 <memset>
 8014c8c:	e026      	b.n	8014cdc <AmbulanceWorker+0xfc>
			}
			else if(xQueueReceive(AmbulanceNotice,CityLog,TimeToWait) == pdTRUE)
 8014c8e:	4b1e      	ldr	r3, [pc, #120]	; (8014d08 <AmbulanceWorker+0x128>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	2200      	movs	r2, #0
 8014c94:	4917      	ldr	r1, [pc, #92]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7f2 faa2 	bl	80071e0 <xQueueReceive>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b01      	cmp	r3, #1
 8014ca0:	d11c      	bne.n	8014cdc <AmbulanceWorker+0xfc>
			{
				xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014ca2:	4b15      	ldr	r3, [pc, #84]	; (8014cf8 <AmbulanceWorker+0x118>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7f2 fb7e 	bl	80073ac <xQueueSemaphoreTake>
 8014cb0:	6078      	str	r0, [r7, #4]
				if(xStatus == pdFAIL)
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d019      	beq.n	8014cec <AmbulanceWorker+0x10c>
					continue;
				printf("%s\r\n",CityLog);
 8014cb8:	490e      	ldr	r1, [pc, #56]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014cba:	4810      	ldr	r0, [pc, #64]	; (8014cfc <AmbulanceWorker+0x11c>)
 8014cbc:	f000 fe36 	bl	801592c <iprintf>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014cc0:	2180      	movs	r1, #128	; 0x80
 8014cc2:	480f      	ldr	r0, [pc, #60]	; (8014d00 <AmbulanceWorker+0x120>)
 8014cc4:	f7ed ff67 	bl	8002b96 <HAL_GPIO_TogglePin>
				HAL_Delay(DELAY_WORKER);
 8014cc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014ccc:	f7ec fa4a 	bl	8001164 <HAL_Delay>
				memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014cd0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014cd4:	2100      	movs	r1, #0
 8014cd6:	4807      	ldr	r0, [pc, #28]	; (8014cf4 <AmbulanceWorker+0x114>)
 8014cd8:	f000 fd2e 	bl	8015738 <memset>
			}

			vTaskDelay(xTicksToWait);
 8014cdc:	6838      	ldr	r0, [r7, #0]
 8014cde:	f7f2 ffd9 	bl	8007c94 <vTaskDelay>
 8014ce2:	e784      	b.n	8014bee <AmbulanceWorker+0xe>
					continue;
 8014ce4:	bf00      	nop
 8014ce6:	e782      	b.n	8014bee <AmbulanceWorker+0xe>
					continue;
 8014ce8:	bf00      	nop
 8014cea:	e780      	b.n	8014bee <AmbulanceWorker+0xe>
					continue;
 8014cec:	bf00      	nop
			if(xQueueReceive(AmbulanceCritical,CityLog,TimeToWait) == pdTRUE)
 8014cee:	e77e      	b.n	8014bee <AmbulanceWorker+0xe>
 8014cf0:	2002edb4 	.word	0x2002edb4
 8014cf4:	2002e7bc 	.word	0x2002e7bc
 8014cf8:	2002edcc 	.word	0x2002edcc
 8014cfc:	08019b74 	.word	0x08019b74
 8014d00:	40020400 	.word	0x40020400
 8014d04:	2002edb8 	.word	0x2002edb8
 8014d08:	2002edbc 	.word	0x2002edbc

08014d0c <FireWorker>:
//This function expresses a call to the Fire fighters,
//Checks the queue message of the fire department in order of priority:
//first the critical queue, then the warning queue and then the notice queue
//if there is an event in the message queue, it pulls it out and prints it to the screen by UART protocol
void FireWorker(void)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
	BaseType_t xStatus = pdFALSE;
 8014d12:	2300      	movs	r3, #0
 8014d14:	607b      	str	r3, [r7, #4]
	TickType_t xTicksToWait = pdMS_TO_TICKS(Queue_Time_to_Wait);
 8014d16:	230a      	movs	r3, #10
 8014d18:	603b      	str	r3, [r7, #0]

	while(TRUE)
		{
		//check if there is an event in the queue message and then take a semaphore to using the UART
		//protocol so there us no case that tow events try to use in the same resource at the same time
			if(xQueueReceive(FireCritical,CityLog,TimeToWait) == pdTRUE)
 8014d1a:	4b40      	ldr	r3, [pc, #256]	; (8014e1c <FireWorker+0x110>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	493f      	ldr	r1, [pc, #252]	; (8014e20 <FireWorker+0x114>)
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7f2 fa5c 	bl	80071e0 <xQueueReceive>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b01      	cmp	r3, #1
 8014d2c:	d11d      	bne.n	8014d6a <FireWorker+0x5e>
			{
				xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014d2e:	4b3d      	ldr	r3, [pc, #244]	; (8014e24 <FireWorker+0x118>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	f04f 31ff 	mov.w	r1, #4294967295
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7f2 fb38 	bl	80073ac <xQueueSemaphoreTake>
 8014d3c:	6078      	str	r0, [r7, #4]
				if(xStatus == pdFAIL)
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d065      	beq.n	8014e10 <FireWorker+0x104>
					continue;
				printf("%s\r\n",CityLog);
 8014d44:	4936      	ldr	r1, [pc, #216]	; (8014e20 <FireWorker+0x114>)
 8014d46:	4838      	ldr	r0, [pc, #224]	; (8014e28 <FireWorker+0x11c>)
 8014d48:	f000 fdf0 	bl	801592c <iprintf>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014d4c:	2180      	movs	r1, #128	; 0x80
 8014d4e:	4837      	ldr	r0, [pc, #220]	; (8014e2c <FireWorker+0x120>)
 8014d50:	f7ed ff21 	bl	8002b96 <HAL_GPIO_TogglePin>
				HAL_Delay(DELAY_WORKER);
 8014d54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014d58:	f7ec fa04 	bl	8001164 <HAL_Delay>
				memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014d5c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014d60:	2100      	movs	r1, #0
 8014d62:	482f      	ldr	r0, [pc, #188]	; (8014e20 <FireWorker+0x114>)
 8014d64:	f000 fce8 	bl	8015738 <memset>
 8014d68:	e04e      	b.n	8014e08 <FireWorker+0xfc>
			}
			else if(xQueueReceive(FireWarning,CityLog,TimeToWait) == pdTRUE)
 8014d6a:	4b31      	ldr	r3, [pc, #196]	; (8014e30 <FireWorker+0x124>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	492b      	ldr	r1, [pc, #172]	; (8014e20 <FireWorker+0x114>)
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7f2 fa34 	bl	80071e0 <xQueueReceive>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	2b01      	cmp	r3, #1
 8014d7c:	d11d      	bne.n	8014dba <FireWorker+0xae>
			{
				xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014d7e:	4b29      	ldr	r3, [pc, #164]	; (8014e24 <FireWorker+0x118>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f04f 31ff 	mov.w	r1, #4294967295
 8014d86:	4618      	mov	r0, r3
 8014d88:	f7f2 fb10 	bl	80073ac <xQueueSemaphoreTake>
 8014d8c:	6078      	str	r0, [r7, #4]
				if(xStatus == pdFAIL)
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d03f      	beq.n	8014e14 <FireWorker+0x108>
					continue;
				printf("%s\r\n",CityLog);
 8014d94:	4922      	ldr	r1, [pc, #136]	; (8014e20 <FireWorker+0x114>)
 8014d96:	4824      	ldr	r0, [pc, #144]	; (8014e28 <FireWorker+0x11c>)
 8014d98:	f000 fdc8 	bl	801592c <iprintf>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014d9c:	2180      	movs	r1, #128	; 0x80
 8014d9e:	4823      	ldr	r0, [pc, #140]	; (8014e2c <FireWorker+0x120>)
 8014da0:	f7ed fef9 	bl	8002b96 <HAL_GPIO_TogglePin>
				HAL_Delay(DELAY_WORKER);
 8014da4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014da8:	f7ec f9dc 	bl	8001164 <HAL_Delay>
				memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014dac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014db0:	2100      	movs	r1, #0
 8014db2:	481b      	ldr	r0, [pc, #108]	; (8014e20 <FireWorker+0x114>)
 8014db4:	f000 fcc0 	bl	8015738 <memset>
 8014db8:	e026      	b.n	8014e08 <FireWorker+0xfc>
			}
			else if(xQueueReceive(FireNotice,CityLog,TimeToWait) == pdTRUE)
 8014dba:	4b1e      	ldr	r3, [pc, #120]	; (8014e34 <FireWorker+0x128>)
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	4917      	ldr	r1, [pc, #92]	; (8014e20 <FireWorker+0x114>)
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7f2 fa0c 	bl	80071e0 <xQueueReceive>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	2b01      	cmp	r3, #1
 8014dcc:	d11c      	bne.n	8014e08 <FireWorker+0xfc>
			{
				xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014dce:	4b15      	ldr	r3, [pc, #84]	; (8014e24 <FireWorker+0x118>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7f2 fae8 	bl	80073ac <xQueueSemaphoreTake>
 8014ddc:	6078      	str	r0, [r7, #4]
				if(xStatus == pdFAIL)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d019      	beq.n	8014e18 <FireWorker+0x10c>
					continue;
				printf("%s\r\n",CityLog);
 8014de4:	490e      	ldr	r1, [pc, #56]	; (8014e20 <FireWorker+0x114>)
 8014de6:	4810      	ldr	r0, [pc, #64]	; (8014e28 <FireWorker+0x11c>)
 8014de8:	f000 fda0 	bl	801592c <iprintf>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014dec:	2180      	movs	r1, #128	; 0x80
 8014dee:	480f      	ldr	r0, [pc, #60]	; (8014e2c <FireWorker+0x120>)
 8014df0:	f7ed fed1 	bl	8002b96 <HAL_GPIO_TogglePin>
				HAL_Delay(DELAY_WORKER);
 8014df4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014df8:	f7ec f9b4 	bl	8001164 <HAL_Delay>
				memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014dfc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014e00:	2100      	movs	r1, #0
 8014e02:	4807      	ldr	r0, [pc, #28]	; (8014e20 <FireWorker+0x114>)
 8014e04:	f000 fc98 	bl	8015738 <memset>
			}

			vTaskDelay(xTicksToWait);
 8014e08:	6838      	ldr	r0, [r7, #0]
 8014e0a:	f7f2 ff43 	bl	8007c94 <vTaskDelay>
 8014e0e:	e784      	b.n	8014d1a <FireWorker+0xe>
					continue;
 8014e10:	bf00      	nop
 8014e12:	e782      	b.n	8014d1a <FireWorker+0xe>
					continue;
 8014e14:	bf00      	nop
 8014e16:	e780      	b.n	8014d1a <FireWorker+0xe>
					continue;
 8014e18:	bf00      	nop
			if(xQueueReceive(FireCritical,CityLog,TimeToWait) == pdTRUE)
 8014e1a:	e77e      	b.n	8014d1a <FireWorker+0xe>
 8014e1c:	2002eda8 	.word	0x2002eda8
 8014e20:	2002e7bc 	.word	0x2002e7bc
 8014e24:	2002edcc 	.word	0x2002edcc
 8014e28:	08019b74 	.word	0x08019b74
 8014e2c:	40020400 	.word	0x40020400
 8014e30:	2002edac 	.word	0x2002edac
 8014e34:	2002edb0 	.word	0x2002edb0

08014e38 <MaintenanceWorker>:
//This function expresses a call to the maintenance,
//Checks the queue message of the maintenance department in order of priority:
//first the critical queue, then the warning queue and then the notice queue
//if there is an event in the message queue, it pulls it out and prints it to the screen by UART protocol
void MaintenanceWorker(void)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0

	BaseType_t xStatus = pdFALSE;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	607b      	str	r3, [r7, #4]
	TickType_t xTicksToWait = pdMS_TO_TICKS(Queue_Time_to_Wait);
 8014e42:	230a      	movs	r3, #10
 8014e44:	603b      	str	r3, [r7, #0]

	while(TRUE)
		{
			    //check if there is an event in the queue message and then take a semaphore to using the UART
			    //protocol so there us no case that tow events try to use in the same resource at the same time
				if(xQueueReceive(MaintenanceCritical,CityLog,TimeToWait) == pdTRUE)
 8014e46:	4b40      	ldr	r3, [pc, #256]	; (8014f48 <MaintenanceWorker+0x110>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	493f      	ldr	r1, [pc, #252]	; (8014f4c <MaintenanceWorker+0x114>)
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7f2 f9c6 	bl	80071e0 <xQueueReceive>
 8014e54:	4603      	mov	r3, r0
 8014e56:	2b01      	cmp	r3, #1
 8014e58:	d11d      	bne.n	8014e96 <MaintenanceWorker+0x5e>
				{
					xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014e5a:	4b3d      	ldr	r3, [pc, #244]	; (8014f50 <MaintenanceWorker+0x118>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7f2 faa2 	bl	80073ac <xQueueSemaphoreTake>
 8014e68:	6078      	str	r0, [r7, #4]
					if(xStatus == pdFAIL)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d065      	beq.n	8014f3c <MaintenanceWorker+0x104>
						continue;
					printf("%s\r\n",CityLog);
 8014e70:	4936      	ldr	r1, [pc, #216]	; (8014f4c <MaintenanceWorker+0x114>)
 8014e72:	4838      	ldr	r0, [pc, #224]	; (8014f54 <MaintenanceWorker+0x11c>)
 8014e74:	f000 fd5a 	bl	801592c <iprintf>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014e78:	2180      	movs	r1, #128	; 0x80
 8014e7a:	4837      	ldr	r0, [pc, #220]	; (8014f58 <MaintenanceWorker+0x120>)
 8014e7c:	f7ed fe8b 	bl	8002b96 <HAL_GPIO_TogglePin>
					HAL_Delay(DELAY_WORKER);
 8014e80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014e84:	f7ec f96e 	bl	8001164 <HAL_Delay>
					memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014e88:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	482f      	ldr	r0, [pc, #188]	; (8014f4c <MaintenanceWorker+0x114>)
 8014e90:	f000 fc52 	bl	8015738 <memset>
 8014e94:	e04e      	b.n	8014f34 <MaintenanceWorker+0xfc>
				}

				else if(xQueueReceive(MaintenanceWarning,CityLog ,TimeToWait) == pdTRUE)
 8014e96:	4b31      	ldr	r3, [pc, #196]	; (8014f5c <MaintenanceWorker+0x124>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	492b      	ldr	r1, [pc, #172]	; (8014f4c <MaintenanceWorker+0x114>)
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7f2 f99e 	bl	80071e0 <xQueueReceive>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	2b01      	cmp	r3, #1
 8014ea8:	d11d      	bne.n	8014ee6 <MaintenanceWorker+0xae>
				{
					xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014eaa:	4b29      	ldr	r3, [pc, #164]	; (8014f50 <MaintenanceWorker+0x118>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	f04f 31ff 	mov.w	r1, #4294967295
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f7f2 fa7a 	bl	80073ac <xQueueSemaphoreTake>
 8014eb8:	6078      	str	r0, [r7, #4]
					if(xStatus == pdFAIL)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d03f      	beq.n	8014f40 <MaintenanceWorker+0x108>
						continue;
					printf("%s\r\n",CityLog);
 8014ec0:	4922      	ldr	r1, [pc, #136]	; (8014f4c <MaintenanceWorker+0x114>)
 8014ec2:	4824      	ldr	r0, [pc, #144]	; (8014f54 <MaintenanceWorker+0x11c>)
 8014ec4:	f000 fd32 	bl	801592c <iprintf>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014ec8:	2180      	movs	r1, #128	; 0x80
 8014eca:	4823      	ldr	r0, [pc, #140]	; (8014f58 <MaintenanceWorker+0x120>)
 8014ecc:	f7ed fe63 	bl	8002b96 <HAL_GPIO_TogglePin>
					HAL_Delay(DELAY_WORKER);
 8014ed0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014ed4:	f7ec f946 	bl	8001164 <HAL_Delay>
					memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014ed8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014edc:	2100      	movs	r1, #0
 8014ede:	481b      	ldr	r0, [pc, #108]	; (8014f4c <MaintenanceWorker+0x114>)
 8014ee0:	f000 fc2a 	bl	8015738 <memset>
 8014ee4:	e026      	b.n	8014f34 <MaintenanceWorker+0xfc>
				}
				else if(xQueueReceive(MaintenanceNotice,CityLog,TimeToWait) == pdTRUE)
 8014ee6:	4b1e      	ldr	r3, [pc, #120]	; (8014f60 <MaintenanceWorker+0x128>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	2200      	movs	r2, #0
 8014eec:	4917      	ldr	r1, [pc, #92]	; (8014f4c <MaintenanceWorker+0x114>)
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7f2 f976 	bl	80071e0 <xQueueReceive>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d11c      	bne.n	8014f34 <MaintenanceWorker+0xfc>
				{
					xStatus = xSemaphoreTake(Sem, HAL_MAX_DELAY);
 8014efa:	4b15      	ldr	r3, [pc, #84]	; (8014f50 <MaintenanceWorker+0x118>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	f04f 31ff 	mov.w	r1, #4294967295
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7f2 fa52 	bl	80073ac <xQueueSemaphoreTake>
 8014f08:	6078      	str	r0, [r7, #4]
					if(xStatus == pdFAIL)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d019      	beq.n	8014f44 <MaintenanceWorker+0x10c>
						continue;
					printf("%s\r\n",CityLog);
 8014f10:	490e      	ldr	r1, [pc, #56]	; (8014f4c <MaintenanceWorker+0x114>)
 8014f12:	4810      	ldr	r0, [pc, #64]	; (8014f54 <MaintenanceWorker+0x11c>)
 8014f14:	f000 fd0a 	bl	801592c <iprintf>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8014f18:	2180      	movs	r1, #128	; 0x80
 8014f1a:	480f      	ldr	r0, [pc, #60]	; (8014f58 <MaintenanceWorker+0x120>)
 8014f1c:	f7ed fe3b 	bl	8002b96 <HAL_GPIO_TogglePin>
					HAL_Delay(DELAY_WORKER);
 8014f20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014f24:	f7ec f91e 	bl	8001164 <HAL_Delay>
					memset(CityLog, INIT_ZERO, sizeof(CityLog));
 8014f28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	4807      	ldr	r0, [pc, #28]	; (8014f4c <MaintenanceWorker+0x114>)
 8014f30:	f000 fc02 	bl	8015738 <memset>
				}

				vTaskDelay(xTicksToWait);
 8014f34:	6838      	ldr	r0, [r7, #0]
 8014f36:	f7f2 fead 	bl	8007c94 <vTaskDelay>
 8014f3a:	e784      	b.n	8014e46 <MaintenanceWorker+0xe>
						continue;
 8014f3c:	bf00      	nop
 8014f3e:	e782      	b.n	8014e46 <MaintenanceWorker+0xe>
						continue;
 8014f40:	bf00      	nop
 8014f42:	e780      	b.n	8014e46 <MaintenanceWorker+0xe>
						continue;
 8014f44:	bf00      	nop
				if(xQueueReceive(MaintenanceCritical,CityLog,TimeToWait) == pdTRUE)
 8014f46:	e77e      	b.n	8014e46 <MaintenanceWorker+0xe>
 8014f48:	2002edc0 	.word	0x2002edc0
 8014f4c:	2002e7bc 	.word	0x2002e7bc
 8014f50:	2002edcc 	.word	0x2002edcc
 8014f54:	08019b74 	.word	0x08019b74
 8014f58:	40020400 	.word	0x40020400
 8014f5c:	2002edc4 	.word	0x2002edc4
 8014f60:	2002edc8 	.word	0x2002edc8

08014f64 <Communicationinit>:
}


//This function is responsible for initializing LWIP and TFTP communication
void Communicationinit(void const * argument)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b082      	sub	sp, #8
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]

	MX_LWIP_Init();
 8014f6c:	f7f0 fbe0 	bl	8005730 <MX_LWIP_Init>
	tftpd_init();
 8014f70:	f7ff fb56 	bl	8014620 <tftpd_init>

	tftpd.open  = tftp_open;
 8014f74:	4b0c      	ldr	r3, [pc, #48]	; (8014fa8 <Communicationinit+0x44>)
 8014f76:	4a0d      	ldr	r2, [pc, #52]	; (8014fac <Communicationinit+0x48>)
 8014f78:	601a      	str	r2, [r3, #0]
	tftpd.write = &tftp_write;
 8014f7a:	4b0b      	ldr	r3, [pc, #44]	; (8014fa8 <Communicationinit+0x44>)
 8014f7c:	4a0c      	ldr	r2, [pc, #48]	; (8014fb0 <Communicationinit+0x4c>)
 8014f7e:	60da      	str	r2, [r3, #12]
	tftpd.read  = &tftp_read;
 8014f80:	4b09      	ldr	r3, [pc, #36]	; (8014fa8 <Communicationinit+0x44>)
 8014f82:	4a0c      	ldr	r2, [pc, #48]	; (8014fb4 <Communicationinit+0x50>)
 8014f84:	609a      	str	r2, [r3, #8]
	tftpd.close = &tftp_close;
 8014f86:	4b08      	ldr	r3, [pc, #32]	; (8014fa8 <Communicationinit+0x44>)
 8014f88:	4a0b      	ldr	r2, [pc, #44]	; (8014fb8 <Communicationinit+0x54>)
 8014f8a:	605a      	str	r2, [r3, #4]
	while(TRUE)
		{
			if( xQueueReceive( tftp_event_queue, &( tftp_event_buffer ), ( TickType_t ) portMAX_DELAY ) != pdPASS )
 8014f8c:	4b0b      	ldr	r3, [pc, #44]	; (8014fbc <Communicationinit+0x58>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	f04f 32ff 	mov.w	r2, #4294967295
 8014f94:	490a      	ldr	r1, [pc, #40]	; (8014fc0 <Communicationinit+0x5c>)
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7f2 f922 	bl	80071e0 <xQueueReceive>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d0f4      	beq.n	8014f8c <Communicationinit+0x28>
			{
				exit(EXIT_FAILURE);
 8014fa2:	2001      	movs	r0, #1
 8014fa4:	f000 f8e6 	bl	8015174 <exit>
 8014fa8:	2002e7ac 	.word	0x2002e7ac
 8014fac:	080150b9 	.word	0x080150b9
 8014fb0:	08015109 	.word	0x08015109
 8014fb4:	080150ef 	.word	0x080150ef
 8014fb8:	080150db 	.word	0x080150db
 8014fbc:	2002ed98 	.word	0x2002ed98
 8014fc0:	2002efd4 	.word	0x2002efd4

08014fc4 <_write>:
#include "RTG.h"

int _write(int file, char *ptr, int len){
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	60b9      	str	r1, [r7, #8]
 8014fce:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	b29a      	uxth	r2, r3
 8014fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014fd8:	68b9      	ldr	r1, [r7, #8]
 8014fda:	4804      	ldr	r0, [pc, #16]	; (8014fec <_write+0x28>)
 8014fdc:	f7ef fb68 	bl	80046b0 <HAL_UART_Transmit>
	return len;
 8014fe0:	687b      	ldr	r3, [r7, #4]
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3710      	adds	r7, #16
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	200004a4 	.word	0x200004a4

08014ff0 <_read>:
	return ch;
}

// scanf
int _read(int file, char *ptr, int len)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b086      	sub	sp, #24
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	60b9      	str	r1, [r7, #8]
 8014ffa:	607a      	str	r2, [r7, #4]
	int ch=0;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8015000:	f107 0114 	add.w	r1, r7, #20
 8015004:	f04f 33ff 	mov.w	r3, #4294967295
 8015008:	2201      	movs	r2, #1
 801500a:	4817      	ldr	r0, [pc, #92]	; (8015068 <_read+0x78>)
 801500c:	f7ef fbd3 	bl	80047b6 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8015010:	f107 0114 	add.w	r1, r7, #20
 8015014:	f04f 33ff 	mov.w	r3, #4294967295
 8015018:	2201      	movs	r2, #1
 801501a:	4813      	ldr	r0, [pc, #76]	; (8015068 <_read+0x78>)
 801501c:	f7ef fb48 	bl	80046b0 <HAL_UART_Transmit>
	if(ch==13)
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	2b0d      	cmp	r3, #13
 8015024:	d10a      	bne.n	801503c <_read+0x4c>
	{
		ch=10;
 8015026:	230a      	movs	r3, #10
 8015028:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 801502a:	f107 0114 	add.w	r1, r7, #20
 801502e:	f04f 33ff 	mov.w	r3, #4294967295
 8015032:	2201      	movs	r2, #1
 8015034:	480c      	ldr	r0, [pc, #48]	; (8015068 <_read+0x78>)
 8015036:	f7ef fb3b 	bl	80046b0 <HAL_UART_Transmit>
 801503a:	e00c      	b.n	8015056 <_read+0x66>
	}
	else if(ch==8)
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	2b08      	cmp	r3, #8
 8015040:	d109      	bne.n	8015056 <_read+0x66>
	{
		ch=0x30;
 8015042:	2330      	movs	r3, #48	; 0x30
 8015044:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8015046:	f107 0114 	add.w	r1, r7, #20
 801504a:	f04f 33ff 	mov.w	r3, #4294967295
 801504e:	2201      	movs	r2, #1
 8015050:	4805      	ldr	r0, [pc, #20]	; (8015068 <_read+0x78>)
 8015052:	f7ef fb2d 	bl	80046b0 <HAL_UART_Transmit>
	}
	*ptr=ch;
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	b2da      	uxtb	r2, r3
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	701a      	strb	r2, [r3, #0]
	return 1;
 801505e:	2301      	movs	r3, #1
}
 8015060:	4618      	mov	r0, r3
 8015062:	3718      	adds	r7, #24
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}
 8015068:	200004a4 	.word	0x200004a4

0801506c <tftp_open_file>:
msg_t tftp_event_buffer;
uint8_t New_event_flag = INIT_ZERO;
extern QueueHandle_t tftp_event_queue;

void * tftp_open_file(const char* fname, u8_t is_write)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	460b      	mov	r3, r1
 8015076:	70fb      	strb	r3, [r7, #3]
  snprintf(event_str, sizeof(event_str), "%s", fname);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	4a0c      	ldr	r2, [pc, #48]	; (80150ac <tftp_open_file+0x40>)
 801507c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015080:	480b      	ldr	r0, [pc, #44]	; (80150b0 <tftp_open_file+0x44>)
 8015082:	f000 fd99 	bl	8015bb8 <sniprintf>
  event_str[sizeof(event_str)-1] = 0;
 8015086:	4b0a      	ldr	r3, [pc, #40]	; (80150b0 <tftp_open_file+0x44>)
 8015088:	2200      	movs	r2, #0
 801508a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203

  if (is_write) {
 801508e:	78fb      	ldrb	r3, [r7, #3]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d001      	beq.n	8015098 <tftp_open_file+0x2c>
//    return (void*)fopen(event_str, "w");
	  return event_str;
 8015094:	4b06      	ldr	r3, [pc, #24]	; (80150b0 <tftp_open_file+0x44>)
 8015096:	e005      	b.n	80150a4 <tftp_open_file+0x38>
  } else {
    return (void*)fopen(event_str, "r");
 8015098:	4906      	ldr	r1, [pc, #24]	; (80150b4 <tftp_open_file+0x48>)
 801509a:	4805      	ldr	r0, [pc, #20]	; (80150b0 <tftp_open_file+0x44>)
 801509c:	f000 f9a8 	bl	80153f0 <fopen>
 80150a0:	4603      	mov	r3, r0
 80150a2:	bf00      	nop
  }
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	08019b7c 	.word	0x08019b7c
 80150b0:	2002edd0 	.word	0x2002edd0
 80150b4:	08019b80 	.word	0x08019b80

080150b8 <tftp_open>:

void* tftp_open(const char* fname, const char* mode, u8_t is_write)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	4613      	mov	r3, r2
 80150c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(mode);
  return tftp_open_file(fname, is_write);
 80150c6:	79fb      	ldrb	r3, [r7, #7]
 80150c8:	4619      	mov	r1, r3
 80150ca:	68f8      	ldr	r0, [r7, #12]
 80150cc:	f7ff ffce 	bl	801506c <tftp_open_file>
 80150d0:	4603      	mov	r3, r0
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3710      	adds	r7, #16
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}

080150da <tftp_close>:

void tftp_close(void* handle)
{
 80150da:	b480      	push	{r7}
 80150dc:	b083      	sub	sp, #12
 80150de:	af00      	add	r7, sp, #0
 80150e0:	6078      	str	r0, [r7, #4]

}
 80150e2:	bf00      	nop
 80150e4:	370c      	adds	r7, #12
 80150e6:	46bd      	mov	sp, r7
 80150e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ec:	4770      	bx	lr

080150ee <tftp_read>:

int tftp_read(void* handle, void* buf, int bytes)
{
 80150ee:	b480      	push	{r7}
 80150f0:	b085      	sub	sp, #20
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	60f8      	str	r0, [r7, #12]
 80150f6:	60b9      	str	r1, [r7, #8]
 80150f8:	607a      	str	r2, [r7, #4]
	return 1;
 80150fa:	2301      	movs	r3, #1
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3714      	adds	r7, #20
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr

08015108 <tftp_write>:

int tftp_write(void* handle, struct pbuf* p)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b098      	sub	sp, #96	; 0x60
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
	memcpy(event_str, p->payload, 82);
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	2252      	movs	r2, #82	; 0x52
 8015118:	4619      	mov	r1, r3
 801511a:	4812      	ldr	r0, [pc, #72]	; (8015164 <tftp_write+0x5c>)
 801511c:	f000 fae4 	bl	80156e8 <memcpy>

	msg_t buffer = {0};
 8015120:	f107 030c 	add.w	r3, r7, #12
 8015124:	2252      	movs	r2, #82	; 0x52
 8015126:	2100      	movs	r1, #0
 8015128:	4618      	mov	r0, r3
 801512a:	f000 fb05 	bl	8015738 <memset>
	memcpy(&tftp_event_buffer, p->payload,sizeof(buffer));
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	4a0d      	ldr	r2, [pc, #52]	; (8015168 <tftp_write+0x60>)
 8015134:	4610      	mov	r0, r2
 8015136:	4619      	mov	r1, r3
 8015138:	2352      	movs	r3, #82	; 0x52
 801513a:	461a      	mov	r2, r3
 801513c:	f000 fad4 	bl	80156e8 <memcpy>
	New_event_flag = TRUE;
 8015140:	4b0a      	ldr	r3, [pc, #40]	; (801516c <tftp_write+0x64>)
 8015142:	2201      	movs	r2, #1
 8015144:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; // We have not woken a task at the start of the ISR.
 8015146:	2300      	movs	r3, #0
 8015148:	60bb      	str	r3, [r7, #8]
    xQueueSendToBackFromISR( tftp_event_queue, &tftp_event_buffer, &xHigherPriorityTaskWoken );
 801514a:	4b09      	ldr	r3, [pc, #36]	; (8015170 <tftp_write+0x68>)
 801514c:	6818      	ldr	r0, [r3, #0]
 801514e:	f107 0208 	add.w	r2, r7, #8
 8015152:	2300      	movs	r3, #0
 8015154:	4904      	ldr	r1, [pc, #16]	; (8015168 <tftp_write+0x60>)
 8015156:	f7f1 ff0d 	bl	8006f74 <xQueueGenericSendFromISR>
	return 0;
 801515a:	2300      	movs	r3, #0
}
 801515c:	4618      	mov	r0, r3
 801515e:	3760      	adds	r7, #96	; 0x60
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	2002edd0 	.word	0x2002edd0
 8015168:	2002efd4 	.word	0x2002efd4
 801516c:	2002f026 	.word	0x2002f026
 8015170:	2002ed98 	.word	0x2002ed98

08015174 <exit>:
 8015174:	b508      	push	{r3, lr}
 8015176:	4b07      	ldr	r3, [pc, #28]	; (8015194 <exit+0x20>)
 8015178:	4604      	mov	r4, r0
 801517a:	b113      	cbz	r3, 8015182 <exit+0xe>
 801517c:	2100      	movs	r1, #0
 801517e:	f3af 8000 	nop.w
 8015182:	4b05      	ldr	r3, [pc, #20]	; (8015198 <exit+0x24>)
 8015184:	6818      	ldr	r0, [r3, #0]
 8015186:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015188:	b103      	cbz	r3, 801518c <exit+0x18>
 801518a:	4798      	blx	r3
 801518c:	4620      	mov	r0, r4
 801518e:	f7eb fd9b 	bl	8000cc8 <_exit>
 8015192:	bf00      	nop
 8015194:	00000000 	.word	0x00000000
 8015198:	08019d34 	.word	0x08019d34

0801519c <std>:
 801519c:	2300      	movs	r3, #0
 801519e:	b510      	push	{r4, lr}
 80151a0:	4604      	mov	r4, r0
 80151a2:	e9c0 3300 	strd	r3, r3, [r0]
 80151a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80151aa:	6083      	str	r3, [r0, #8]
 80151ac:	8181      	strh	r1, [r0, #12]
 80151ae:	6643      	str	r3, [r0, #100]	; 0x64
 80151b0:	81c2      	strh	r2, [r0, #14]
 80151b2:	6183      	str	r3, [r0, #24]
 80151b4:	4619      	mov	r1, r3
 80151b6:	2208      	movs	r2, #8
 80151b8:	305c      	adds	r0, #92	; 0x5c
 80151ba:	f000 fabd 	bl	8015738 <memset>
 80151be:	4b05      	ldr	r3, [pc, #20]	; (80151d4 <std+0x38>)
 80151c0:	6263      	str	r3, [r4, #36]	; 0x24
 80151c2:	4b05      	ldr	r3, [pc, #20]	; (80151d8 <std+0x3c>)
 80151c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80151c6:	4b05      	ldr	r3, [pc, #20]	; (80151dc <std+0x40>)
 80151c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80151ca:	4b05      	ldr	r3, [pc, #20]	; (80151e0 <std+0x44>)
 80151cc:	6224      	str	r4, [r4, #32]
 80151ce:	6323      	str	r3, [r4, #48]	; 0x30
 80151d0:	bd10      	pop	{r4, pc}
 80151d2:	bf00      	nop
 80151d4:	08015c61 	.word	0x08015c61
 80151d8:	08015c83 	.word	0x08015c83
 80151dc:	08015cbb 	.word	0x08015cbb
 80151e0:	08015cdf 	.word	0x08015cdf

080151e4 <_cleanup_r>:
 80151e4:	4901      	ldr	r1, [pc, #4]	; (80151ec <_cleanup_r+0x8>)
 80151e6:	f000 b9c1 	b.w	801556c <_fwalk_reent>
 80151ea:	bf00      	nop
 80151ec:	08015ff5 	.word	0x08015ff5

080151f0 <__sfmoreglue>:
 80151f0:	b570      	push	{r4, r5, r6, lr}
 80151f2:	2268      	movs	r2, #104	; 0x68
 80151f4:	1e4d      	subs	r5, r1, #1
 80151f6:	4355      	muls	r5, r2
 80151f8:	460e      	mov	r6, r1
 80151fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80151fe:	f000 fb0f 	bl	8015820 <_malloc_r>
 8015202:	4604      	mov	r4, r0
 8015204:	b140      	cbz	r0, 8015218 <__sfmoreglue+0x28>
 8015206:	2100      	movs	r1, #0
 8015208:	e9c0 1600 	strd	r1, r6, [r0]
 801520c:	300c      	adds	r0, #12
 801520e:	60a0      	str	r0, [r4, #8]
 8015210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015214:	f000 fa90 	bl	8015738 <memset>
 8015218:	4620      	mov	r0, r4
 801521a:	bd70      	pop	{r4, r5, r6, pc}

0801521c <__sfp_lock_acquire>:
 801521c:	4801      	ldr	r0, [pc, #4]	; (8015224 <__sfp_lock_acquire+0x8>)
 801521e:	f000 b9eb 	b.w	80155f8 <__retarget_lock_acquire_recursive>
 8015222:	bf00      	nop
 8015224:	2002f028 	.word	0x2002f028

08015228 <__sfp_lock_release>:
 8015228:	4801      	ldr	r0, [pc, #4]	; (8015230 <__sfp_lock_release+0x8>)
 801522a:	f000 b9e6 	b.w	80155fa <__retarget_lock_release_recursive>
 801522e:	bf00      	nop
 8015230:	2002f028 	.word	0x2002f028

08015234 <__sinit_lock_acquire>:
 8015234:	4801      	ldr	r0, [pc, #4]	; (801523c <__sinit_lock_acquire+0x8>)
 8015236:	f000 b9df 	b.w	80155f8 <__retarget_lock_acquire_recursive>
 801523a:	bf00      	nop
 801523c:	2002f029 	.word	0x2002f029

08015240 <__sinit_lock_release>:
 8015240:	4801      	ldr	r0, [pc, #4]	; (8015248 <__sinit_lock_release+0x8>)
 8015242:	f000 b9da 	b.w	80155fa <__retarget_lock_release_recursive>
 8015246:	bf00      	nop
 8015248:	2002f029 	.word	0x2002f029

0801524c <__sinit>:
 801524c:	b510      	push	{r4, lr}
 801524e:	4604      	mov	r4, r0
 8015250:	f7ff fff0 	bl	8015234 <__sinit_lock_acquire>
 8015254:	69a3      	ldr	r3, [r4, #24]
 8015256:	b11b      	cbz	r3, 8015260 <__sinit+0x14>
 8015258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801525c:	f7ff bff0 	b.w	8015240 <__sinit_lock_release>
 8015260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015264:	6523      	str	r3, [r4, #80]	; 0x50
 8015266:	4b13      	ldr	r3, [pc, #76]	; (80152b4 <__sinit+0x68>)
 8015268:	4a13      	ldr	r2, [pc, #76]	; (80152b8 <__sinit+0x6c>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	62a2      	str	r2, [r4, #40]	; 0x28
 801526e:	42a3      	cmp	r3, r4
 8015270:	bf04      	itt	eq
 8015272:	2301      	moveq	r3, #1
 8015274:	61a3      	streq	r3, [r4, #24]
 8015276:	4620      	mov	r0, r4
 8015278:	f000 f820 	bl	80152bc <__sfp>
 801527c:	6060      	str	r0, [r4, #4]
 801527e:	4620      	mov	r0, r4
 8015280:	f000 f81c 	bl	80152bc <__sfp>
 8015284:	60a0      	str	r0, [r4, #8]
 8015286:	4620      	mov	r0, r4
 8015288:	f000 f818 	bl	80152bc <__sfp>
 801528c:	2200      	movs	r2, #0
 801528e:	60e0      	str	r0, [r4, #12]
 8015290:	2104      	movs	r1, #4
 8015292:	6860      	ldr	r0, [r4, #4]
 8015294:	f7ff ff82 	bl	801519c <std>
 8015298:	68a0      	ldr	r0, [r4, #8]
 801529a:	2201      	movs	r2, #1
 801529c:	2109      	movs	r1, #9
 801529e:	f7ff ff7d 	bl	801519c <std>
 80152a2:	68e0      	ldr	r0, [r4, #12]
 80152a4:	2202      	movs	r2, #2
 80152a6:	2112      	movs	r1, #18
 80152a8:	f7ff ff78 	bl	801519c <std>
 80152ac:	2301      	movs	r3, #1
 80152ae:	61a3      	str	r3, [r4, #24]
 80152b0:	e7d2      	b.n	8015258 <__sinit+0xc>
 80152b2:	bf00      	nop
 80152b4:	08019d34 	.word	0x08019d34
 80152b8:	080151e5 	.word	0x080151e5

080152bc <__sfp>:
 80152bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152be:	4607      	mov	r7, r0
 80152c0:	f7ff ffac 	bl	801521c <__sfp_lock_acquire>
 80152c4:	4b1e      	ldr	r3, [pc, #120]	; (8015340 <__sfp+0x84>)
 80152c6:	681e      	ldr	r6, [r3, #0]
 80152c8:	69b3      	ldr	r3, [r6, #24]
 80152ca:	b913      	cbnz	r3, 80152d2 <__sfp+0x16>
 80152cc:	4630      	mov	r0, r6
 80152ce:	f7ff ffbd 	bl	801524c <__sinit>
 80152d2:	3648      	adds	r6, #72	; 0x48
 80152d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80152d8:	3b01      	subs	r3, #1
 80152da:	d503      	bpl.n	80152e4 <__sfp+0x28>
 80152dc:	6833      	ldr	r3, [r6, #0]
 80152de:	b30b      	cbz	r3, 8015324 <__sfp+0x68>
 80152e0:	6836      	ldr	r6, [r6, #0]
 80152e2:	e7f7      	b.n	80152d4 <__sfp+0x18>
 80152e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80152e8:	b9d5      	cbnz	r5, 8015320 <__sfp+0x64>
 80152ea:	4b16      	ldr	r3, [pc, #88]	; (8015344 <__sfp+0x88>)
 80152ec:	60e3      	str	r3, [r4, #12]
 80152ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80152f2:	6665      	str	r5, [r4, #100]	; 0x64
 80152f4:	f000 f97e 	bl	80155f4 <__retarget_lock_init_recursive>
 80152f8:	f7ff ff96 	bl	8015228 <__sfp_lock_release>
 80152fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015304:	6025      	str	r5, [r4, #0]
 8015306:	61a5      	str	r5, [r4, #24]
 8015308:	2208      	movs	r2, #8
 801530a:	4629      	mov	r1, r5
 801530c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015310:	f000 fa12 	bl	8015738 <memset>
 8015314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801531c:	4620      	mov	r0, r4
 801531e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015320:	3468      	adds	r4, #104	; 0x68
 8015322:	e7d9      	b.n	80152d8 <__sfp+0x1c>
 8015324:	2104      	movs	r1, #4
 8015326:	4638      	mov	r0, r7
 8015328:	f7ff ff62 	bl	80151f0 <__sfmoreglue>
 801532c:	4604      	mov	r4, r0
 801532e:	6030      	str	r0, [r6, #0]
 8015330:	2800      	cmp	r0, #0
 8015332:	d1d5      	bne.n	80152e0 <__sfp+0x24>
 8015334:	f7ff ff78 	bl	8015228 <__sfp_lock_release>
 8015338:	230c      	movs	r3, #12
 801533a:	603b      	str	r3, [r7, #0]
 801533c:	e7ee      	b.n	801531c <__sfp+0x60>
 801533e:	bf00      	nop
 8015340:	08019d34 	.word	0x08019d34
 8015344:	ffff0001 	.word	0xffff0001

08015348 <_fopen_r>:
 8015348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801534a:	460f      	mov	r7, r1
 801534c:	4611      	mov	r1, r2
 801534e:	aa01      	add	r2, sp, #4
 8015350:	4605      	mov	r5, r0
 8015352:	f000 fe8b 	bl	801606c <__sflags>
 8015356:	4606      	mov	r6, r0
 8015358:	b918      	cbnz	r0, 8015362 <_fopen_r+0x1a>
 801535a:	2400      	movs	r4, #0
 801535c:	4620      	mov	r0, r4
 801535e:	b003      	add	sp, #12
 8015360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015362:	4628      	mov	r0, r5
 8015364:	f7ff ffaa 	bl	80152bc <__sfp>
 8015368:	4604      	mov	r4, r0
 801536a:	2800      	cmp	r0, #0
 801536c:	d0f5      	beq.n	801535a <_fopen_r+0x12>
 801536e:	4639      	mov	r1, r7
 8015370:	9a01      	ldr	r2, [sp, #4]
 8015372:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8015376:	4628      	mov	r0, r5
 8015378:	f000 fac6 	bl	8015908 <_open_r>
 801537c:	1e07      	subs	r7, r0, #0
 801537e:	da09      	bge.n	8015394 <_fopen_r+0x4c>
 8015380:	2500      	movs	r5, #0
 8015382:	f7ff ff4b 	bl	801521c <__sfp_lock_acquire>
 8015386:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015388:	81a5      	strh	r5, [r4, #12]
 801538a:	f000 f934 	bl	80155f6 <__retarget_lock_close_recursive>
 801538e:	f7ff ff4b 	bl	8015228 <__sfp_lock_release>
 8015392:	e7e2      	b.n	801535a <_fopen_r+0x12>
 8015394:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015396:	07db      	lsls	r3, r3, #31
 8015398:	d405      	bmi.n	80153a6 <_fopen_r+0x5e>
 801539a:	89a3      	ldrh	r3, [r4, #12]
 801539c:	0598      	lsls	r0, r3, #22
 801539e:	d402      	bmi.n	80153a6 <_fopen_r+0x5e>
 80153a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153a2:	f000 f929 	bl	80155f8 <__retarget_lock_acquire_recursive>
 80153a6:	4b0e      	ldr	r3, [pc, #56]	; (80153e0 <_fopen_r+0x98>)
 80153a8:	6263      	str	r3, [r4, #36]	; 0x24
 80153aa:	4b0e      	ldr	r3, [pc, #56]	; (80153e4 <_fopen_r+0x9c>)
 80153ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80153ae:	4b0e      	ldr	r3, [pc, #56]	; (80153e8 <_fopen_r+0xa0>)
 80153b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80153b2:	05f1      	lsls	r1, r6, #23
 80153b4:	4b0d      	ldr	r3, [pc, #52]	; (80153ec <_fopen_r+0xa4>)
 80153b6:	81e7      	strh	r7, [r4, #14]
 80153b8:	81a6      	strh	r6, [r4, #12]
 80153ba:	6224      	str	r4, [r4, #32]
 80153bc:	6323      	str	r3, [r4, #48]	; 0x30
 80153be:	d505      	bpl.n	80153cc <_fopen_r+0x84>
 80153c0:	2302      	movs	r3, #2
 80153c2:	2200      	movs	r2, #0
 80153c4:	4621      	mov	r1, r4
 80153c6:	4628      	mov	r0, r5
 80153c8:	f000 f81a 	bl	8015400 <_fseek_r>
 80153cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80153ce:	07da      	lsls	r2, r3, #31
 80153d0:	d4c4      	bmi.n	801535c <_fopen_r+0x14>
 80153d2:	89a3      	ldrh	r3, [r4, #12]
 80153d4:	059b      	lsls	r3, r3, #22
 80153d6:	d4c1      	bmi.n	801535c <_fopen_r+0x14>
 80153d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153da:	f000 f90e 	bl	80155fa <__retarget_lock_release_recursive>
 80153de:	e7bd      	b.n	801535c <_fopen_r+0x14>
 80153e0:	08015c61 	.word	0x08015c61
 80153e4:	08015c83 	.word	0x08015c83
 80153e8:	08015cbb 	.word	0x08015cbb
 80153ec:	08015cdf 	.word	0x08015cdf

080153f0 <fopen>:
 80153f0:	4b02      	ldr	r3, [pc, #8]	; (80153fc <fopen+0xc>)
 80153f2:	460a      	mov	r2, r1
 80153f4:	4601      	mov	r1, r0
 80153f6:	6818      	ldr	r0, [r3, #0]
 80153f8:	f7ff bfa6 	b.w	8015348 <_fopen_r>
 80153fc:	20000030 	.word	0x20000030

08015400 <_fseek_r>:
 8015400:	f000 b800 	b.w	8015404 <_fseeko_r>

08015404 <_fseeko_r>:
 8015404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015408:	460c      	mov	r4, r1
 801540a:	4617      	mov	r7, r2
 801540c:	461d      	mov	r5, r3
 801540e:	4606      	mov	r6, r0
 8015410:	b118      	cbz	r0, 801541a <_fseeko_r+0x16>
 8015412:	6983      	ldr	r3, [r0, #24]
 8015414:	b90b      	cbnz	r3, 801541a <_fseeko_r+0x16>
 8015416:	f7ff ff19 	bl	801524c <__sinit>
 801541a:	4b51      	ldr	r3, [pc, #324]	; (8015560 <_fseeko_r+0x15c>)
 801541c:	429c      	cmp	r4, r3
 801541e:	d122      	bne.n	8015466 <_fseeko_r+0x62>
 8015420:	6874      	ldr	r4, [r6, #4]
 8015422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015424:	07d9      	lsls	r1, r3, #31
 8015426:	d405      	bmi.n	8015434 <_fseeko_r+0x30>
 8015428:	89a3      	ldrh	r3, [r4, #12]
 801542a:	059a      	lsls	r2, r3, #22
 801542c:	d402      	bmi.n	8015434 <_fseeko_r+0x30>
 801542e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015430:	f000 f8e2 	bl	80155f8 <__retarget_lock_acquire_recursive>
 8015434:	89a3      	ldrh	r3, [r4, #12]
 8015436:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801543a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801543e:	d103      	bne.n	8015448 <_fseeko_r+0x44>
 8015440:	4621      	mov	r1, r4
 8015442:	4630      	mov	r0, r6
 8015444:	f000 fdd6 	bl	8015ff4 <_fflush_r>
 8015448:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801544c:	f1b8 0f00 	cmp.w	r8, #0
 8015450:	d113      	bne.n	801547a <_fseeko_r+0x76>
 8015452:	231d      	movs	r3, #29
 8015454:	6033      	str	r3, [r6, #0]
 8015456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015458:	07d9      	lsls	r1, r3, #31
 801545a:	d578      	bpl.n	801554e <_fseeko_r+0x14a>
 801545c:	f04f 35ff 	mov.w	r5, #4294967295
 8015460:	4628      	mov	r0, r5
 8015462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015466:	4b3f      	ldr	r3, [pc, #252]	; (8015564 <_fseeko_r+0x160>)
 8015468:	429c      	cmp	r4, r3
 801546a:	d101      	bne.n	8015470 <_fseeko_r+0x6c>
 801546c:	68b4      	ldr	r4, [r6, #8]
 801546e:	e7d8      	b.n	8015422 <_fseeko_r+0x1e>
 8015470:	4b3d      	ldr	r3, [pc, #244]	; (8015568 <_fseeko_r+0x164>)
 8015472:	429c      	cmp	r4, r3
 8015474:	bf08      	it	eq
 8015476:	68f4      	ldreq	r4, [r6, #12]
 8015478:	e7d3      	b.n	8015422 <_fseeko_r+0x1e>
 801547a:	2d01      	cmp	r5, #1
 801547c:	d036      	beq.n	80154ec <_fseeko_r+0xe8>
 801547e:	f035 0302 	bics.w	r3, r5, #2
 8015482:	d162      	bne.n	801554a <_fseeko_r+0x146>
 8015484:	6923      	ldr	r3, [r4, #16]
 8015486:	b91b      	cbnz	r3, 8015490 <_fseeko_r+0x8c>
 8015488:	4621      	mov	r1, r4
 801548a:	4630      	mov	r0, r6
 801548c:	f000 f8dc 	bl	8015648 <__smakebuf_r>
 8015490:	4621      	mov	r1, r4
 8015492:	4630      	mov	r0, r6
 8015494:	f000 fdae 	bl	8015ff4 <_fflush_r>
 8015498:	2800      	cmp	r0, #0
 801549a:	d1dc      	bne.n	8015456 <_fseeko_r+0x52>
 801549c:	6a21      	ldr	r1, [r4, #32]
 801549e:	462b      	mov	r3, r5
 80154a0:	463a      	mov	r2, r7
 80154a2:	4630      	mov	r0, r6
 80154a4:	47c0      	blx	r8
 80154a6:	3001      	adds	r0, #1
 80154a8:	d0d5      	beq.n	8015456 <_fseeko_r+0x52>
 80154aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154ac:	b141      	cbz	r1, 80154c0 <_fseeko_r+0xbc>
 80154ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154b2:	4299      	cmp	r1, r3
 80154b4:	d002      	beq.n	80154bc <_fseeko_r+0xb8>
 80154b6:	4630      	mov	r0, r6
 80154b8:	f000 f946 	bl	8015748 <_free_r>
 80154bc:	2300      	movs	r3, #0
 80154be:	6363      	str	r3, [r4, #52]	; 0x34
 80154c0:	6923      	ldr	r3, [r4, #16]
 80154c2:	6023      	str	r3, [r4, #0]
 80154c4:	89a3      	ldrh	r3, [r4, #12]
 80154c6:	2600      	movs	r6, #0
 80154c8:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80154cc:	6066      	str	r6, [r4, #4]
 80154ce:	81a3      	strh	r3, [r4, #12]
 80154d0:	2208      	movs	r2, #8
 80154d2:	4631      	mov	r1, r6
 80154d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80154d8:	f000 f92e 	bl	8015738 <memset>
 80154dc:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80154de:	f015 0501 	ands.w	r5, r5, #1
 80154e2:	d13b      	bne.n	801555c <_fseeko_r+0x158>
 80154e4:	89a3      	ldrh	r3, [r4, #12]
 80154e6:	059b      	lsls	r3, r3, #22
 80154e8:	d4ba      	bmi.n	8015460 <_fseeko_r+0x5c>
 80154ea:	e021      	b.n	8015530 <_fseeko_r+0x12c>
 80154ec:	4621      	mov	r1, r4
 80154ee:	4630      	mov	r0, r6
 80154f0:	f000 fd80 	bl	8015ff4 <_fflush_r>
 80154f4:	89a2      	ldrh	r2, [r4, #12]
 80154f6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80154fa:	d00c      	beq.n	8015516 <_fseeko_r+0x112>
 80154fc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80154fe:	89a3      	ldrh	r3, [r4, #12]
 8015500:	075a      	lsls	r2, r3, #29
 8015502:	d519      	bpl.n	8015538 <_fseeko_r+0x134>
 8015504:	6863      	ldr	r3, [r4, #4]
 8015506:	1aed      	subs	r5, r5, r3
 8015508:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801550a:	b10b      	cbz	r3, 8015510 <_fseeko_r+0x10c>
 801550c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801550e:	1aed      	subs	r5, r5, r3
 8015510:	442f      	add	r7, r5
 8015512:	2500      	movs	r5, #0
 8015514:	e7b6      	b.n	8015484 <_fseeko_r+0x80>
 8015516:	462b      	mov	r3, r5
 8015518:	6a21      	ldr	r1, [r4, #32]
 801551a:	4630      	mov	r0, r6
 801551c:	47c0      	blx	r8
 801551e:	1c43      	adds	r3, r0, #1
 8015520:	4605      	mov	r5, r0
 8015522:	d1ec      	bne.n	80154fe <_fseeko_r+0xfa>
 8015524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015526:	07d8      	lsls	r0, r3, #31
 8015528:	d498      	bmi.n	801545c <_fseeko_r+0x58>
 801552a:	89a3      	ldrh	r3, [r4, #12]
 801552c:	0599      	lsls	r1, r3, #22
 801552e:	d495      	bmi.n	801545c <_fseeko_r+0x58>
 8015530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015532:	f000 f862 	bl	80155fa <__retarget_lock_release_recursive>
 8015536:	e793      	b.n	8015460 <_fseeko_r+0x5c>
 8015538:	0718      	lsls	r0, r3, #28
 801553a:	d5e9      	bpl.n	8015510 <_fseeko_r+0x10c>
 801553c:	6823      	ldr	r3, [r4, #0]
 801553e:	6922      	ldr	r2, [r4, #16]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d0e5      	beq.n	8015510 <_fseeko_r+0x10c>
 8015544:	1a9b      	subs	r3, r3, r2
 8015546:	441d      	add	r5, r3
 8015548:	e7e2      	b.n	8015510 <_fseeko_r+0x10c>
 801554a:	2316      	movs	r3, #22
 801554c:	e782      	b.n	8015454 <_fseeko_r+0x50>
 801554e:	89a3      	ldrh	r3, [r4, #12]
 8015550:	059a      	lsls	r2, r3, #22
 8015552:	d483      	bmi.n	801545c <_fseeko_r+0x58>
 8015554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015556:	f000 f850 	bl	80155fa <__retarget_lock_release_recursive>
 801555a:	e77f      	b.n	801545c <_fseeko_r+0x58>
 801555c:	4635      	mov	r5, r6
 801555e:	e77f      	b.n	8015460 <_fseeko_r+0x5c>
 8015560:	08019cf4 	.word	0x08019cf4
 8015564:	08019d14 	.word	0x08019d14
 8015568:	08019cd4 	.word	0x08019cd4

0801556c <_fwalk_reent>:
 801556c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015570:	4606      	mov	r6, r0
 8015572:	4688      	mov	r8, r1
 8015574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015578:	2700      	movs	r7, #0
 801557a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801557e:	f1b9 0901 	subs.w	r9, r9, #1
 8015582:	d505      	bpl.n	8015590 <_fwalk_reent+0x24>
 8015584:	6824      	ldr	r4, [r4, #0]
 8015586:	2c00      	cmp	r4, #0
 8015588:	d1f7      	bne.n	801557a <_fwalk_reent+0xe>
 801558a:	4638      	mov	r0, r7
 801558c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015590:	89ab      	ldrh	r3, [r5, #12]
 8015592:	2b01      	cmp	r3, #1
 8015594:	d907      	bls.n	80155a6 <_fwalk_reent+0x3a>
 8015596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801559a:	3301      	adds	r3, #1
 801559c:	d003      	beq.n	80155a6 <_fwalk_reent+0x3a>
 801559e:	4629      	mov	r1, r5
 80155a0:	4630      	mov	r0, r6
 80155a2:	47c0      	blx	r8
 80155a4:	4307      	orrs	r7, r0
 80155a6:	3568      	adds	r5, #104	; 0x68
 80155a8:	e7e9      	b.n	801557e <_fwalk_reent+0x12>
	...

080155ac <__libc_init_array>:
 80155ac:	b570      	push	{r4, r5, r6, lr}
 80155ae:	4d0d      	ldr	r5, [pc, #52]	; (80155e4 <__libc_init_array+0x38>)
 80155b0:	4c0d      	ldr	r4, [pc, #52]	; (80155e8 <__libc_init_array+0x3c>)
 80155b2:	1b64      	subs	r4, r4, r5
 80155b4:	10a4      	asrs	r4, r4, #2
 80155b6:	2600      	movs	r6, #0
 80155b8:	42a6      	cmp	r6, r4
 80155ba:	d109      	bne.n	80155d0 <__libc_init_array+0x24>
 80155bc:	4d0b      	ldr	r5, [pc, #44]	; (80155ec <__libc_init_array+0x40>)
 80155be:	4c0c      	ldr	r4, [pc, #48]	; (80155f0 <__libc_init_array+0x44>)
 80155c0:	f001 fac2 	bl	8016b48 <_init>
 80155c4:	1b64      	subs	r4, r4, r5
 80155c6:	10a4      	asrs	r4, r4, #2
 80155c8:	2600      	movs	r6, #0
 80155ca:	42a6      	cmp	r6, r4
 80155cc:	d105      	bne.n	80155da <__libc_init_array+0x2e>
 80155ce:	bd70      	pop	{r4, r5, r6, pc}
 80155d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80155d4:	4798      	blx	r3
 80155d6:	3601      	adds	r6, #1
 80155d8:	e7ee      	b.n	80155b8 <__libc_init_array+0xc>
 80155da:	f855 3b04 	ldr.w	r3, [r5], #4
 80155de:	4798      	blx	r3
 80155e0:	3601      	adds	r6, #1
 80155e2:	e7f2      	b.n	80155ca <__libc_init_array+0x1e>
 80155e4:	08019e24 	.word	0x08019e24
 80155e8:	08019e24 	.word	0x08019e24
 80155ec:	08019e24 	.word	0x08019e24
 80155f0:	08019e28 	.word	0x08019e28

080155f4 <__retarget_lock_init_recursive>:
 80155f4:	4770      	bx	lr

080155f6 <__retarget_lock_close_recursive>:
 80155f6:	4770      	bx	lr

080155f8 <__retarget_lock_acquire_recursive>:
 80155f8:	4770      	bx	lr

080155fa <__retarget_lock_release_recursive>:
 80155fa:	4770      	bx	lr

080155fc <__swhatbuf_r>:
 80155fc:	b570      	push	{r4, r5, r6, lr}
 80155fe:	460e      	mov	r6, r1
 8015600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015604:	2900      	cmp	r1, #0
 8015606:	b096      	sub	sp, #88	; 0x58
 8015608:	4614      	mov	r4, r2
 801560a:	461d      	mov	r5, r3
 801560c:	da08      	bge.n	8015620 <__swhatbuf_r+0x24>
 801560e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015612:	2200      	movs	r2, #0
 8015614:	602a      	str	r2, [r5, #0]
 8015616:	061a      	lsls	r2, r3, #24
 8015618:	d410      	bmi.n	801563c <__swhatbuf_r+0x40>
 801561a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801561e:	e00e      	b.n	801563e <__swhatbuf_r+0x42>
 8015620:	466a      	mov	r2, sp
 8015622:	f000 fd6b 	bl	80160fc <_fstat_r>
 8015626:	2800      	cmp	r0, #0
 8015628:	dbf1      	blt.n	801560e <__swhatbuf_r+0x12>
 801562a:	9a01      	ldr	r2, [sp, #4]
 801562c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015630:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015634:	425a      	negs	r2, r3
 8015636:	415a      	adcs	r2, r3
 8015638:	602a      	str	r2, [r5, #0]
 801563a:	e7ee      	b.n	801561a <__swhatbuf_r+0x1e>
 801563c:	2340      	movs	r3, #64	; 0x40
 801563e:	2000      	movs	r0, #0
 8015640:	6023      	str	r3, [r4, #0]
 8015642:	b016      	add	sp, #88	; 0x58
 8015644:	bd70      	pop	{r4, r5, r6, pc}
	...

08015648 <__smakebuf_r>:
 8015648:	898b      	ldrh	r3, [r1, #12]
 801564a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801564c:	079d      	lsls	r5, r3, #30
 801564e:	4606      	mov	r6, r0
 8015650:	460c      	mov	r4, r1
 8015652:	d507      	bpl.n	8015664 <__smakebuf_r+0x1c>
 8015654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015658:	6023      	str	r3, [r4, #0]
 801565a:	6123      	str	r3, [r4, #16]
 801565c:	2301      	movs	r3, #1
 801565e:	6163      	str	r3, [r4, #20]
 8015660:	b002      	add	sp, #8
 8015662:	bd70      	pop	{r4, r5, r6, pc}
 8015664:	ab01      	add	r3, sp, #4
 8015666:	466a      	mov	r2, sp
 8015668:	f7ff ffc8 	bl	80155fc <__swhatbuf_r>
 801566c:	9900      	ldr	r1, [sp, #0]
 801566e:	4605      	mov	r5, r0
 8015670:	4630      	mov	r0, r6
 8015672:	f000 f8d5 	bl	8015820 <_malloc_r>
 8015676:	b948      	cbnz	r0, 801568c <__smakebuf_r+0x44>
 8015678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801567c:	059a      	lsls	r2, r3, #22
 801567e:	d4ef      	bmi.n	8015660 <__smakebuf_r+0x18>
 8015680:	f023 0303 	bic.w	r3, r3, #3
 8015684:	f043 0302 	orr.w	r3, r3, #2
 8015688:	81a3      	strh	r3, [r4, #12]
 801568a:	e7e3      	b.n	8015654 <__smakebuf_r+0xc>
 801568c:	4b0d      	ldr	r3, [pc, #52]	; (80156c4 <__smakebuf_r+0x7c>)
 801568e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015690:	89a3      	ldrh	r3, [r4, #12]
 8015692:	6020      	str	r0, [r4, #0]
 8015694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015698:	81a3      	strh	r3, [r4, #12]
 801569a:	9b00      	ldr	r3, [sp, #0]
 801569c:	6163      	str	r3, [r4, #20]
 801569e:	9b01      	ldr	r3, [sp, #4]
 80156a0:	6120      	str	r0, [r4, #16]
 80156a2:	b15b      	cbz	r3, 80156bc <__smakebuf_r+0x74>
 80156a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156a8:	4630      	mov	r0, r6
 80156aa:	f000 fd39 	bl	8016120 <_isatty_r>
 80156ae:	b128      	cbz	r0, 80156bc <__smakebuf_r+0x74>
 80156b0:	89a3      	ldrh	r3, [r4, #12]
 80156b2:	f023 0303 	bic.w	r3, r3, #3
 80156b6:	f043 0301 	orr.w	r3, r3, #1
 80156ba:	81a3      	strh	r3, [r4, #12]
 80156bc:	89a0      	ldrh	r0, [r4, #12]
 80156be:	4305      	orrs	r5, r0
 80156c0:	81a5      	strh	r5, [r4, #12]
 80156c2:	e7cd      	b.n	8015660 <__smakebuf_r+0x18>
 80156c4:	080151e5 	.word	0x080151e5

080156c8 <memcmp>:
 80156c8:	b510      	push	{r4, lr}
 80156ca:	3901      	subs	r1, #1
 80156cc:	4402      	add	r2, r0
 80156ce:	4290      	cmp	r0, r2
 80156d0:	d101      	bne.n	80156d6 <memcmp+0xe>
 80156d2:	2000      	movs	r0, #0
 80156d4:	e005      	b.n	80156e2 <memcmp+0x1a>
 80156d6:	7803      	ldrb	r3, [r0, #0]
 80156d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80156dc:	42a3      	cmp	r3, r4
 80156de:	d001      	beq.n	80156e4 <memcmp+0x1c>
 80156e0:	1b18      	subs	r0, r3, r4
 80156e2:	bd10      	pop	{r4, pc}
 80156e4:	3001      	adds	r0, #1
 80156e6:	e7f2      	b.n	80156ce <memcmp+0x6>

080156e8 <memcpy>:
 80156e8:	440a      	add	r2, r1
 80156ea:	4291      	cmp	r1, r2
 80156ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80156f0:	d100      	bne.n	80156f4 <memcpy+0xc>
 80156f2:	4770      	bx	lr
 80156f4:	b510      	push	{r4, lr}
 80156f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156fe:	4291      	cmp	r1, r2
 8015700:	d1f9      	bne.n	80156f6 <memcpy+0xe>
 8015702:	bd10      	pop	{r4, pc}

08015704 <memmove>:
 8015704:	4288      	cmp	r0, r1
 8015706:	b510      	push	{r4, lr}
 8015708:	eb01 0402 	add.w	r4, r1, r2
 801570c:	d902      	bls.n	8015714 <memmove+0x10>
 801570e:	4284      	cmp	r4, r0
 8015710:	4623      	mov	r3, r4
 8015712:	d807      	bhi.n	8015724 <memmove+0x20>
 8015714:	1e43      	subs	r3, r0, #1
 8015716:	42a1      	cmp	r1, r4
 8015718:	d008      	beq.n	801572c <memmove+0x28>
 801571a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801571e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015722:	e7f8      	b.n	8015716 <memmove+0x12>
 8015724:	4402      	add	r2, r0
 8015726:	4601      	mov	r1, r0
 8015728:	428a      	cmp	r2, r1
 801572a:	d100      	bne.n	801572e <memmove+0x2a>
 801572c:	bd10      	pop	{r4, pc}
 801572e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015736:	e7f7      	b.n	8015728 <memmove+0x24>

08015738 <memset>:
 8015738:	4402      	add	r2, r0
 801573a:	4603      	mov	r3, r0
 801573c:	4293      	cmp	r3, r2
 801573e:	d100      	bne.n	8015742 <memset+0xa>
 8015740:	4770      	bx	lr
 8015742:	f803 1b01 	strb.w	r1, [r3], #1
 8015746:	e7f9      	b.n	801573c <memset+0x4>

08015748 <_free_r>:
 8015748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801574a:	2900      	cmp	r1, #0
 801574c:	d044      	beq.n	80157d8 <_free_r+0x90>
 801574e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015752:	9001      	str	r0, [sp, #4]
 8015754:	2b00      	cmp	r3, #0
 8015756:	f1a1 0404 	sub.w	r4, r1, #4
 801575a:	bfb8      	it	lt
 801575c:	18e4      	addlt	r4, r4, r3
 801575e:	f000 fd09 	bl	8016174 <__malloc_lock>
 8015762:	4a1e      	ldr	r2, [pc, #120]	; (80157dc <_free_r+0x94>)
 8015764:	9801      	ldr	r0, [sp, #4]
 8015766:	6813      	ldr	r3, [r2, #0]
 8015768:	b933      	cbnz	r3, 8015778 <_free_r+0x30>
 801576a:	6063      	str	r3, [r4, #4]
 801576c:	6014      	str	r4, [r2, #0]
 801576e:	b003      	add	sp, #12
 8015770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015774:	f000 bd04 	b.w	8016180 <__malloc_unlock>
 8015778:	42a3      	cmp	r3, r4
 801577a:	d908      	bls.n	801578e <_free_r+0x46>
 801577c:	6825      	ldr	r5, [r4, #0]
 801577e:	1961      	adds	r1, r4, r5
 8015780:	428b      	cmp	r3, r1
 8015782:	bf01      	itttt	eq
 8015784:	6819      	ldreq	r1, [r3, #0]
 8015786:	685b      	ldreq	r3, [r3, #4]
 8015788:	1949      	addeq	r1, r1, r5
 801578a:	6021      	streq	r1, [r4, #0]
 801578c:	e7ed      	b.n	801576a <_free_r+0x22>
 801578e:	461a      	mov	r2, r3
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	b10b      	cbz	r3, 8015798 <_free_r+0x50>
 8015794:	42a3      	cmp	r3, r4
 8015796:	d9fa      	bls.n	801578e <_free_r+0x46>
 8015798:	6811      	ldr	r1, [r2, #0]
 801579a:	1855      	adds	r5, r2, r1
 801579c:	42a5      	cmp	r5, r4
 801579e:	d10b      	bne.n	80157b8 <_free_r+0x70>
 80157a0:	6824      	ldr	r4, [r4, #0]
 80157a2:	4421      	add	r1, r4
 80157a4:	1854      	adds	r4, r2, r1
 80157a6:	42a3      	cmp	r3, r4
 80157a8:	6011      	str	r1, [r2, #0]
 80157aa:	d1e0      	bne.n	801576e <_free_r+0x26>
 80157ac:	681c      	ldr	r4, [r3, #0]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	6053      	str	r3, [r2, #4]
 80157b2:	4421      	add	r1, r4
 80157b4:	6011      	str	r1, [r2, #0]
 80157b6:	e7da      	b.n	801576e <_free_r+0x26>
 80157b8:	d902      	bls.n	80157c0 <_free_r+0x78>
 80157ba:	230c      	movs	r3, #12
 80157bc:	6003      	str	r3, [r0, #0]
 80157be:	e7d6      	b.n	801576e <_free_r+0x26>
 80157c0:	6825      	ldr	r5, [r4, #0]
 80157c2:	1961      	adds	r1, r4, r5
 80157c4:	428b      	cmp	r3, r1
 80157c6:	bf04      	itt	eq
 80157c8:	6819      	ldreq	r1, [r3, #0]
 80157ca:	685b      	ldreq	r3, [r3, #4]
 80157cc:	6063      	str	r3, [r4, #4]
 80157ce:	bf04      	itt	eq
 80157d0:	1949      	addeq	r1, r1, r5
 80157d2:	6021      	streq	r1, [r4, #0]
 80157d4:	6054      	str	r4, [r2, #4]
 80157d6:	e7ca      	b.n	801576e <_free_r+0x26>
 80157d8:	b003      	add	sp, #12
 80157da:	bd30      	pop	{r4, r5, pc}
 80157dc:	2002f02c 	.word	0x2002f02c

080157e0 <sbrk_aligned>:
 80157e0:	b570      	push	{r4, r5, r6, lr}
 80157e2:	4e0e      	ldr	r6, [pc, #56]	; (801581c <sbrk_aligned+0x3c>)
 80157e4:	460c      	mov	r4, r1
 80157e6:	6831      	ldr	r1, [r6, #0]
 80157e8:	4605      	mov	r5, r0
 80157ea:	b911      	cbnz	r1, 80157f2 <sbrk_aligned+0x12>
 80157ec:	f000 f9d4 	bl	8015b98 <_sbrk_r>
 80157f0:	6030      	str	r0, [r6, #0]
 80157f2:	4621      	mov	r1, r4
 80157f4:	4628      	mov	r0, r5
 80157f6:	f000 f9cf 	bl	8015b98 <_sbrk_r>
 80157fa:	1c43      	adds	r3, r0, #1
 80157fc:	d00a      	beq.n	8015814 <sbrk_aligned+0x34>
 80157fe:	1cc4      	adds	r4, r0, #3
 8015800:	f024 0403 	bic.w	r4, r4, #3
 8015804:	42a0      	cmp	r0, r4
 8015806:	d007      	beq.n	8015818 <sbrk_aligned+0x38>
 8015808:	1a21      	subs	r1, r4, r0
 801580a:	4628      	mov	r0, r5
 801580c:	f000 f9c4 	bl	8015b98 <_sbrk_r>
 8015810:	3001      	adds	r0, #1
 8015812:	d101      	bne.n	8015818 <sbrk_aligned+0x38>
 8015814:	f04f 34ff 	mov.w	r4, #4294967295
 8015818:	4620      	mov	r0, r4
 801581a:	bd70      	pop	{r4, r5, r6, pc}
 801581c:	2002f030 	.word	0x2002f030

08015820 <_malloc_r>:
 8015820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015824:	1ccd      	adds	r5, r1, #3
 8015826:	f025 0503 	bic.w	r5, r5, #3
 801582a:	3508      	adds	r5, #8
 801582c:	2d0c      	cmp	r5, #12
 801582e:	bf38      	it	cc
 8015830:	250c      	movcc	r5, #12
 8015832:	2d00      	cmp	r5, #0
 8015834:	4607      	mov	r7, r0
 8015836:	db01      	blt.n	801583c <_malloc_r+0x1c>
 8015838:	42a9      	cmp	r1, r5
 801583a:	d905      	bls.n	8015848 <_malloc_r+0x28>
 801583c:	230c      	movs	r3, #12
 801583e:	603b      	str	r3, [r7, #0]
 8015840:	2600      	movs	r6, #0
 8015842:	4630      	mov	r0, r6
 8015844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015848:	4e2e      	ldr	r6, [pc, #184]	; (8015904 <_malloc_r+0xe4>)
 801584a:	f000 fc93 	bl	8016174 <__malloc_lock>
 801584e:	6833      	ldr	r3, [r6, #0]
 8015850:	461c      	mov	r4, r3
 8015852:	bb34      	cbnz	r4, 80158a2 <_malloc_r+0x82>
 8015854:	4629      	mov	r1, r5
 8015856:	4638      	mov	r0, r7
 8015858:	f7ff ffc2 	bl	80157e0 <sbrk_aligned>
 801585c:	1c43      	adds	r3, r0, #1
 801585e:	4604      	mov	r4, r0
 8015860:	d14d      	bne.n	80158fe <_malloc_r+0xde>
 8015862:	6834      	ldr	r4, [r6, #0]
 8015864:	4626      	mov	r6, r4
 8015866:	2e00      	cmp	r6, #0
 8015868:	d140      	bne.n	80158ec <_malloc_r+0xcc>
 801586a:	6823      	ldr	r3, [r4, #0]
 801586c:	4631      	mov	r1, r6
 801586e:	4638      	mov	r0, r7
 8015870:	eb04 0803 	add.w	r8, r4, r3
 8015874:	f000 f990 	bl	8015b98 <_sbrk_r>
 8015878:	4580      	cmp	r8, r0
 801587a:	d13a      	bne.n	80158f2 <_malloc_r+0xd2>
 801587c:	6821      	ldr	r1, [r4, #0]
 801587e:	3503      	adds	r5, #3
 8015880:	1a6d      	subs	r5, r5, r1
 8015882:	f025 0503 	bic.w	r5, r5, #3
 8015886:	3508      	adds	r5, #8
 8015888:	2d0c      	cmp	r5, #12
 801588a:	bf38      	it	cc
 801588c:	250c      	movcc	r5, #12
 801588e:	4629      	mov	r1, r5
 8015890:	4638      	mov	r0, r7
 8015892:	f7ff ffa5 	bl	80157e0 <sbrk_aligned>
 8015896:	3001      	adds	r0, #1
 8015898:	d02b      	beq.n	80158f2 <_malloc_r+0xd2>
 801589a:	6823      	ldr	r3, [r4, #0]
 801589c:	442b      	add	r3, r5
 801589e:	6023      	str	r3, [r4, #0]
 80158a0:	e00e      	b.n	80158c0 <_malloc_r+0xa0>
 80158a2:	6822      	ldr	r2, [r4, #0]
 80158a4:	1b52      	subs	r2, r2, r5
 80158a6:	d41e      	bmi.n	80158e6 <_malloc_r+0xc6>
 80158a8:	2a0b      	cmp	r2, #11
 80158aa:	d916      	bls.n	80158da <_malloc_r+0xba>
 80158ac:	1961      	adds	r1, r4, r5
 80158ae:	42a3      	cmp	r3, r4
 80158b0:	6025      	str	r5, [r4, #0]
 80158b2:	bf18      	it	ne
 80158b4:	6059      	strne	r1, [r3, #4]
 80158b6:	6863      	ldr	r3, [r4, #4]
 80158b8:	bf08      	it	eq
 80158ba:	6031      	streq	r1, [r6, #0]
 80158bc:	5162      	str	r2, [r4, r5]
 80158be:	604b      	str	r3, [r1, #4]
 80158c0:	4638      	mov	r0, r7
 80158c2:	f104 060b 	add.w	r6, r4, #11
 80158c6:	f000 fc5b 	bl	8016180 <__malloc_unlock>
 80158ca:	f026 0607 	bic.w	r6, r6, #7
 80158ce:	1d23      	adds	r3, r4, #4
 80158d0:	1af2      	subs	r2, r6, r3
 80158d2:	d0b6      	beq.n	8015842 <_malloc_r+0x22>
 80158d4:	1b9b      	subs	r3, r3, r6
 80158d6:	50a3      	str	r3, [r4, r2]
 80158d8:	e7b3      	b.n	8015842 <_malloc_r+0x22>
 80158da:	6862      	ldr	r2, [r4, #4]
 80158dc:	42a3      	cmp	r3, r4
 80158de:	bf0c      	ite	eq
 80158e0:	6032      	streq	r2, [r6, #0]
 80158e2:	605a      	strne	r2, [r3, #4]
 80158e4:	e7ec      	b.n	80158c0 <_malloc_r+0xa0>
 80158e6:	4623      	mov	r3, r4
 80158e8:	6864      	ldr	r4, [r4, #4]
 80158ea:	e7b2      	b.n	8015852 <_malloc_r+0x32>
 80158ec:	4634      	mov	r4, r6
 80158ee:	6876      	ldr	r6, [r6, #4]
 80158f0:	e7b9      	b.n	8015866 <_malloc_r+0x46>
 80158f2:	230c      	movs	r3, #12
 80158f4:	603b      	str	r3, [r7, #0]
 80158f6:	4638      	mov	r0, r7
 80158f8:	f000 fc42 	bl	8016180 <__malloc_unlock>
 80158fc:	e7a1      	b.n	8015842 <_malloc_r+0x22>
 80158fe:	6025      	str	r5, [r4, #0]
 8015900:	e7de      	b.n	80158c0 <_malloc_r+0xa0>
 8015902:	bf00      	nop
 8015904:	2002f02c 	.word	0x2002f02c

08015908 <_open_r>:
 8015908:	b538      	push	{r3, r4, r5, lr}
 801590a:	4d07      	ldr	r5, [pc, #28]	; (8015928 <_open_r+0x20>)
 801590c:	4604      	mov	r4, r0
 801590e:	4608      	mov	r0, r1
 8015910:	4611      	mov	r1, r2
 8015912:	2200      	movs	r2, #0
 8015914:	602a      	str	r2, [r5, #0]
 8015916:	461a      	mov	r2, r3
 8015918:	f7eb fa14 	bl	8000d44 <_open>
 801591c:	1c43      	adds	r3, r0, #1
 801591e:	d102      	bne.n	8015926 <_open_r+0x1e>
 8015920:	682b      	ldr	r3, [r5, #0]
 8015922:	b103      	cbz	r3, 8015926 <_open_r+0x1e>
 8015924:	6023      	str	r3, [r4, #0]
 8015926:	bd38      	pop	{r3, r4, r5, pc}
 8015928:	2002f034 	.word	0x2002f034

0801592c <iprintf>:
 801592c:	b40f      	push	{r0, r1, r2, r3}
 801592e:	4b0a      	ldr	r3, [pc, #40]	; (8015958 <iprintf+0x2c>)
 8015930:	b513      	push	{r0, r1, r4, lr}
 8015932:	681c      	ldr	r4, [r3, #0]
 8015934:	b124      	cbz	r4, 8015940 <iprintf+0x14>
 8015936:	69a3      	ldr	r3, [r4, #24]
 8015938:	b913      	cbnz	r3, 8015940 <iprintf+0x14>
 801593a:	4620      	mov	r0, r4
 801593c:	f7ff fc86 	bl	801524c <__sinit>
 8015940:	ab05      	add	r3, sp, #20
 8015942:	9a04      	ldr	r2, [sp, #16]
 8015944:	68a1      	ldr	r1, [r4, #8]
 8015946:	9301      	str	r3, [sp, #4]
 8015948:	4620      	mov	r0, r4
 801594a:	f000 fda5 	bl	8016498 <_vfiprintf_r>
 801594e:	b002      	add	sp, #8
 8015950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015954:	b004      	add	sp, #16
 8015956:	4770      	bx	lr
 8015958:	20000030 	.word	0x20000030

0801595c <_puts_r>:
 801595c:	b570      	push	{r4, r5, r6, lr}
 801595e:	460e      	mov	r6, r1
 8015960:	4605      	mov	r5, r0
 8015962:	b118      	cbz	r0, 801596c <_puts_r+0x10>
 8015964:	6983      	ldr	r3, [r0, #24]
 8015966:	b90b      	cbnz	r3, 801596c <_puts_r+0x10>
 8015968:	f7ff fc70 	bl	801524c <__sinit>
 801596c:	69ab      	ldr	r3, [r5, #24]
 801596e:	68ac      	ldr	r4, [r5, #8]
 8015970:	b913      	cbnz	r3, 8015978 <_puts_r+0x1c>
 8015972:	4628      	mov	r0, r5
 8015974:	f7ff fc6a 	bl	801524c <__sinit>
 8015978:	4b2c      	ldr	r3, [pc, #176]	; (8015a2c <_puts_r+0xd0>)
 801597a:	429c      	cmp	r4, r3
 801597c:	d120      	bne.n	80159c0 <_puts_r+0x64>
 801597e:	686c      	ldr	r4, [r5, #4]
 8015980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015982:	07db      	lsls	r3, r3, #31
 8015984:	d405      	bmi.n	8015992 <_puts_r+0x36>
 8015986:	89a3      	ldrh	r3, [r4, #12]
 8015988:	0598      	lsls	r0, r3, #22
 801598a:	d402      	bmi.n	8015992 <_puts_r+0x36>
 801598c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801598e:	f7ff fe33 	bl	80155f8 <__retarget_lock_acquire_recursive>
 8015992:	89a3      	ldrh	r3, [r4, #12]
 8015994:	0719      	lsls	r1, r3, #28
 8015996:	d51d      	bpl.n	80159d4 <_puts_r+0x78>
 8015998:	6923      	ldr	r3, [r4, #16]
 801599a:	b1db      	cbz	r3, 80159d4 <_puts_r+0x78>
 801599c:	3e01      	subs	r6, #1
 801599e:	68a3      	ldr	r3, [r4, #8]
 80159a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80159a4:	3b01      	subs	r3, #1
 80159a6:	60a3      	str	r3, [r4, #8]
 80159a8:	bb39      	cbnz	r1, 80159fa <_puts_r+0x9e>
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	da38      	bge.n	8015a20 <_puts_r+0xc4>
 80159ae:	4622      	mov	r2, r4
 80159b0:	210a      	movs	r1, #10
 80159b2:	4628      	mov	r0, r5
 80159b4:	f000 f998 	bl	8015ce8 <__swbuf_r>
 80159b8:	3001      	adds	r0, #1
 80159ba:	d011      	beq.n	80159e0 <_puts_r+0x84>
 80159bc:	250a      	movs	r5, #10
 80159be:	e011      	b.n	80159e4 <_puts_r+0x88>
 80159c0:	4b1b      	ldr	r3, [pc, #108]	; (8015a30 <_puts_r+0xd4>)
 80159c2:	429c      	cmp	r4, r3
 80159c4:	d101      	bne.n	80159ca <_puts_r+0x6e>
 80159c6:	68ac      	ldr	r4, [r5, #8]
 80159c8:	e7da      	b.n	8015980 <_puts_r+0x24>
 80159ca:	4b1a      	ldr	r3, [pc, #104]	; (8015a34 <_puts_r+0xd8>)
 80159cc:	429c      	cmp	r4, r3
 80159ce:	bf08      	it	eq
 80159d0:	68ec      	ldreq	r4, [r5, #12]
 80159d2:	e7d5      	b.n	8015980 <_puts_r+0x24>
 80159d4:	4621      	mov	r1, r4
 80159d6:	4628      	mov	r0, r5
 80159d8:	f000 f9ea 	bl	8015db0 <__swsetup_r>
 80159dc:	2800      	cmp	r0, #0
 80159de:	d0dd      	beq.n	801599c <_puts_r+0x40>
 80159e0:	f04f 35ff 	mov.w	r5, #4294967295
 80159e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80159e6:	07da      	lsls	r2, r3, #31
 80159e8:	d405      	bmi.n	80159f6 <_puts_r+0x9a>
 80159ea:	89a3      	ldrh	r3, [r4, #12]
 80159ec:	059b      	lsls	r3, r3, #22
 80159ee:	d402      	bmi.n	80159f6 <_puts_r+0x9a>
 80159f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159f2:	f7ff fe02 	bl	80155fa <__retarget_lock_release_recursive>
 80159f6:	4628      	mov	r0, r5
 80159f8:	bd70      	pop	{r4, r5, r6, pc}
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	da04      	bge.n	8015a08 <_puts_r+0xac>
 80159fe:	69a2      	ldr	r2, [r4, #24]
 8015a00:	429a      	cmp	r2, r3
 8015a02:	dc06      	bgt.n	8015a12 <_puts_r+0xb6>
 8015a04:	290a      	cmp	r1, #10
 8015a06:	d004      	beq.n	8015a12 <_puts_r+0xb6>
 8015a08:	6823      	ldr	r3, [r4, #0]
 8015a0a:	1c5a      	adds	r2, r3, #1
 8015a0c:	6022      	str	r2, [r4, #0]
 8015a0e:	7019      	strb	r1, [r3, #0]
 8015a10:	e7c5      	b.n	801599e <_puts_r+0x42>
 8015a12:	4622      	mov	r2, r4
 8015a14:	4628      	mov	r0, r5
 8015a16:	f000 f967 	bl	8015ce8 <__swbuf_r>
 8015a1a:	3001      	adds	r0, #1
 8015a1c:	d1bf      	bne.n	801599e <_puts_r+0x42>
 8015a1e:	e7df      	b.n	80159e0 <_puts_r+0x84>
 8015a20:	6823      	ldr	r3, [r4, #0]
 8015a22:	250a      	movs	r5, #10
 8015a24:	1c5a      	adds	r2, r3, #1
 8015a26:	6022      	str	r2, [r4, #0]
 8015a28:	701d      	strb	r5, [r3, #0]
 8015a2a:	e7db      	b.n	80159e4 <_puts_r+0x88>
 8015a2c:	08019cf4 	.word	0x08019cf4
 8015a30:	08019d14 	.word	0x08019d14
 8015a34:	08019cd4 	.word	0x08019cd4

08015a38 <puts>:
 8015a38:	4b02      	ldr	r3, [pc, #8]	; (8015a44 <puts+0xc>)
 8015a3a:	4601      	mov	r1, r0
 8015a3c:	6818      	ldr	r0, [r3, #0]
 8015a3e:	f7ff bf8d 	b.w	801595c <_puts_r>
 8015a42:	bf00      	nop
 8015a44:	20000030 	.word	0x20000030

08015a48 <rand>:
 8015a48:	4b16      	ldr	r3, [pc, #88]	; (8015aa4 <rand+0x5c>)
 8015a4a:	b510      	push	{r4, lr}
 8015a4c:	681c      	ldr	r4, [r3, #0]
 8015a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015a50:	b9b3      	cbnz	r3, 8015a80 <rand+0x38>
 8015a52:	2018      	movs	r0, #24
 8015a54:	f000 fb86 	bl	8016164 <malloc>
 8015a58:	63a0      	str	r0, [r4, #56]	; 0x38
 8015a5a:	b928      	cbnz	r0, 8015a68 <rand+0x20>
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	4b12      	ldr	r3, [pc, #72]	; (8015aa8 <rand+0x60>)
 8015a60:	4812      	ldr	r0, [pc, #72]	; (8015aac <rand+0x64>)
 8015a62:	214e      	movs	r1, #78	; 0x4e
 8015a64:	f000 fa12 	bl	8015e8c <__assert_func>
 8015a68:	4a11      	ldr	r2, [pc, #68]	; (8015ab0 <rand+0x68>)
 8015a6a:	4b12      	ldr	r3, [pc, #72]	; (8015ab4 <rand+0x6c>)
 8015a6c:	e9c0 2300 	strd	r2, r3, [r0]
 8015a70:	4b11      	ldr	r3, [pc, #68]	; (8015ab8 <rand+0x70>)
 8015a72:	6083      	str	r3, [r0, #8]
 8015a74:	230b      	movs	r3, #11
 8015a76:	8183      	strh	r3, [r0, #12]
 8015a78:	2201      	movs	r2, #1
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015a80:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015a82:	4a0e      	ldr	r2, [pc, #56]	; (8015abc <rand+0x74>)
 8015a84:	6920      	ldr	r0, [r4, #16]
 8015a86:	6963      	ldr	r3, [r4, #20]
 8015a88:	490d      	ldr	r1, [pc, #52]	; (8015ac0 <rand+0x78>)
 8015a8a:	4342      	muls	r2, r0
 8015a8c:	fb01 2203 	mla	r2, r1, r3, r2
 8015a90:	fba0 0101 	umull	r0, r1, r0, r1
 8015a94:	1c43      	adds	r3, r0, #1
 8015a96:	eb42 0001 	adc.w	r0, r2, r1
 8015a9a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8015a9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015aa2:	bd10      	pop	{r4, pc}
 8015aa4:	20000030 	.word	0x20000030
 8015aa8:	08019d38 	.word	0x08019d38
 8015aac:	08019d4f 	.word	0x08019d4f
 8015ab0:	abcd330e 	.word	0xabcd330e
 8015ab4:	e66d1234 	.word	0xe66d1234
 8015ab8:	0005deec 	.word	0x0005deec
 8015abc:	5851f42d 	.word	0x5851f42d
 8015ac0:	4c957f2d 	.word	0x4c957f2d

08015ac4 <cleanup_glue>:
 8015ac4:	b538      	push	{r3, r4, r5, lr}
 8015ac6:	460c      	mov	r4, r1
 8015ac8:	6809      	ldr	r1, [r1, #0]
 8015aca:	4605      	mov	r5, r0
 8015acc:	b109      	cbz	r1, 8015ad2 <cleanup_glue+0xe>
 8015ace:	f7ff fff9 	bl	8015ac4 <cleanup_glue>
 8015ad2:	4621      	mov	r1, r4
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ada:	f7ff be35 	b.w	8015748 <_free_r>
	...

08015ae0 <_reclaim_reent>:
 8015ae0:	4b2c      	ldr	r3, [pc, #176]	; (8015b94 <_reclaim_reent+0xb4>)
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	4283      	cmp	r3, r0
 8015ae6:	b570      	push	{r4, r5, r6, lr}
 8015ae8:	4604      	mov	r4, r0
 8015aea:	d051      	beq.n	8015b90 <_reclaim_reent+0xb0>
 8015aec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015aee:	b143      	cbz	r3, 8015b02 <_reclaim_reent+0x22>
 8015af0:	68db      	ldr	r3, [r3, #12]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d14a      	bne.n	8015b8c <_reclaim_reent+0xac>
 8015af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015af8:	6819      	ldr	r1, [r3, #0]
 8015afa:	b111      	cbz	r1, 8015b02 <_reclaim_reent+0x22>
 8015afc:	4620      	mov	r0, r4
 8015afe:	f7ff fe23 	bl	8015748 <_free_r>
 8015b02:	6961      	ldr	r1, [r4, #20]
 8015b04:	b111      	cbz	r1, 8015b0c <_reclaim_reent+0x2c>
 8015b06:	4620      	mov	r0, r4
 8015b08:	f7ff fe1e 	bl	8015748 <_free_r>
 8015b0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015b0e:	b111      	cbz	r1, 8015b16 <_reclaim_reent+0x36>
 8015b10:	4620      	mov	r0, r4
 8015b12:	f7ff fe19 	bl	8015748 <_free_r>
 8015b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015b18:	b111      	cbz	r1, 8015b20 <_reclaim_reent+0x40>
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	f7ff fe14 	bl	8015748 <_free_r>
 8015b20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015b22:	b111      	cbz	r1, 8015b2a <_reclaim_reent+0x4a>
 8015b24:	4620      	mov	r0, r4
 8015b26:	f7ff fe0f 	bl	8015748 <_free_r>
 8015b2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015b2c:	b111      	cbz	r1, 8015b34 <_reclaim_reent+0x54>
 8015b2e:	4620      	mov	r0, r4
 8015b30:	f7ff fe0a 	bl	8015748 <_free_r>
 8015b34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015b36:	b111      	cbz	r1, 8015b3e <_reclaim_reent+0x5e>
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f7ff fe05 	bl	8015748 <_free_r>
 8015b3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015b40:	b111      	cbz	r1, 8015b48 <_reclaim_reent+0x68>
 8015b42:	4620      	mov	r0, r4
 8015b44:	f7ff fe00 	bl	8015748 <_free_r>
 8015b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b4a:	b111      	cbz	r1, 8015b52 <_reclaim_reent+0x72>
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	f7ff fdfb 	bl	8015748 <_free_r>
 8015b52:	69a3      	ldr	r3, [r4, #24]
 8015b54:	b1e3      	cbz	r3, 8015b90 <_reclaim_reent+0xb0>
 8015b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015b58:	4620      	mov	r0, r4
 8015b5a:	4798      	blx	r3
 8015b5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015b5e:	b1b9      	cbz	r1, 8015b90 <_reclaim_reent+0xb0>
 8015b60:	4620      	mov	r0, r4
 8015b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b66:	f7ff bfad 	b.w	8015ac4 <cleanup_glue>
 8015b6a:	5949      	ldr	r1, [r1, r5]
 8015b6c:	b941      	cbnz	r1, 8015b80 <_reclaim_reent+0xa0>
 8015b6e:	3504      	adds	r5, #4
 8015b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b72:	2d80      	cmp	r5, #128	; 0x80
 8015b74:	68d9      	ldr	r1, [r3, #12]
 8015b76:	d1f8      	bne.n	8015b6a <_reclaim_reent+0x8a>
 8015b78:	4620      	mov	r0, r4
 8015b7a:	f7ff fde5 	bl	8015748 <_free_r>
 8015b7e:	e7ba      	b.n	8015af6 <_reclaim_reent+0x16>
 8015b80:	680e      	ldr	r6, [r1, #0]
 8015b82:	4620      	mov	r0, r4
 8015b84:	f7ff fde0 	bl	8015748 <_free_r>
 8015b88:	4631      	mov	r1, r6
 8015b8a:	e7ef      	b.n	8015b6c <_reclaim_reent+0x8c>
 8015b8c:	2500      	movs	r5, #0
 8015b8e:	e7ef      	b.n	8015b70 <_reclaim_reent+0x90>
 8015b90:	bd70      	pop	{r4, r5, r6, pc}
 8015b92:	bf00      	nop
 8015b94:	20000030 	.word	0x20000030

08015b98 <_sbrk_r>:
 8015b98:	b538      	push	{r3, r4, r5, lr}
 8015b9a:	4d06      	ldr	r5, [pc, #24]	; (8015bb4 <_sbrk_r+0x1c>)
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	4604      	mov	r4, r0
 8015ba0:	4608      	mov	r0, r1
 8015ba2:	602b      	str	r3, [r5, #0]
 8015ba4:	f7eb f8dc 	bl	8000d60 <_sbrk>
 8015ba8:	1c43      	adds	r3, r0, #1
 8015baa:	d102      	bne.n	8015bb2 <_sbrk_r+0x1a>
 8015bac:	682b      	ldr	r3, [r5, #0]
 8015bae:	b103      	cbz	r3, 8015bb2 <_sbrk_r+0x1a>
 8015bb0:	6023      	str	r3, [r4, #0]
 8015bb2:	bd38      	pop	{r3, r4, r5, pc}
 8015bb4:	2002f034 	.word	0x2002f034

08015bb8 <sniprintf>:
 8015bb8:	b40c      	push	{r2, r3}
 8015bba:	b530      	push	{r4, r5, lr}
 8015bbc:	4b17      	ldr	r3, [pc, #92]	; (8015c1c <sniprintf+0x64>)
 8015bbe:	1e0c      	subs	r4, r1, #0
 8015bc0:	681d      	ldr	r5, [r3, #0]
 8015bc2:	b09d      	sub	sp, #116	; 0x74
 8015bc4:	da08      	bge.n	8015bd8 <sniprintf+0x20>
 8015bc6:	238b      	movs	r3, #139	; 0x8b
 8015bc8:	602b      	str	r3, [r5, #0]
 8015bca:	f04f 30ff 	mov.w	r0, #4294967295
 8015bce:	b01d      	add	sp, #116	; 0x74
 8015bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015bd4:	b002      	add	sp, #8
 8015bd6:	4770      	bx	lr
 8015bd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015bdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015be0:	bf14      	ite	ne
 8015be2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015be6:	4623      	moveq	r3, r4
 8015be8:	9304      	str	r3, [sp, #16]
 8015bea:	9307      	str	r3, [sp, #28]
 8015bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015bf0:	9002      	str	r0, [sp, #8]
 8015bf2:	9006      	str	r0, [sp, #24]
 8015bf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015bf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015bfa:	ab21      	add	r3, sp, #132	; 0x84
 8015bfc:	a902      	add	r1, sp, #8
 8015bfe:	4628      	mov	r0, r5
 8015c00:	9301      	str	r3, [sp, #4]
 8015c02:	f000 fb1f 	bl	8016244 <_svfiprintf_r>
 8015c06:	1c43      	adds	r3, r0, #1
 8015c08:	bfbc      	itt	lt
 8015c0a:	238b      	movlt	r3, #139	; 0x8b
 8015c0c:	602b      	strlt	r3, [r5, #0]
 8015c0e:	2c00      	cmp	r4, #0
 8015c10:	d0dd      	beq.n	8015bce <sniprintf+0x16>
 8015c12:	9b02      	ldr	r3, [sp, #8]
 8015c14:	2200      	movs	r2, #0
 8015c16:	701a      	strb	r2, [r3, #0]
 8015c18:	e7d9      	b.n	8015bce <sniprintf+0x16>
 8015c1a:	bf00      	nop
 8015c1c:	20000030 	.word	0x20000030

08015c20 <siprintf>:
 8015c20:	b40e      	push	{r1, r2, r3}
 8015c22:	b500      	push	{lr}
 8015c24:	b09c      	sub	sp, #112	; 0x70
 8015c26:	ab1d      	add	r3, sp, #116	; 0x74
 8015c28:	9002      	str	r0, [sp, #8]
 8015c2a:	9006      	str	r0, [sp, #24]
 8015c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c30:	4809      	ldr	r0, [pc, #36]	; (8015c58 <siprintf+0x38>)
 8015c32:	9107      	str	r1, [sp, #28]
 8015c34:	9104      	str	r1, [sp, #16]
 8015c36:	4909      	ldr	r1, [pc, #36]	; (8015c5c <siprintf+0x3c>)
 8015c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c3c:	9105      	str	r1, [sp, #20]
 8015c3e:	6800      	ldr	r0, [r0, #0]
 8015c40:	9301      	str	r3, [sp, #4]
 8015c42:	a902      	add	r1, sp, #8
 8015c44:	f000 fafe 	bl	8016244 <_svfiprintf_r>
 8015c48:	9b02      	ldr	r3, [sp, #8]
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	701a      	strb	r2, [r3, #0]
 8015c4e:	b01c      	add	sp, #112	; 0x70
 8015c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c54:	b003      	add	sp, #12
 8015c56:	4770      	bx	lr
 8015c58:	20000030 	.word	0x20000030
 8015c5c:	ffff0208 	.word	0xffff0208

08015c60 <__sread>:
 8015c60:	b510      	push	{r4, lr}
 8015c62:	460c      	mov	r4, r1
 8015c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c68:	f000 feda 	bl	8016a20 <_read_r>
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	bfab      	itete	ge
 8015c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015c72:	89a3      	ldrhlt	r3, [r4, #12]
 8015c74:	181b      	addge	r3, r3, r0
 8015c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015c7a:	bfac      	ite	ge
 8015c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015c7e:	81a3      	strhlt	r3, [r4, #12]
 8015c80:	bd10      	pop	{r4, pc}

08015c82 <__swrite>:
 8015c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c86:	461f      	mov	r7, r3
 8015c88:	898b      	ldrh	r3, [r1, #12]
 8015c8a:	05db      	lsls	r3, r3, #23
 8015c8c:	4605      	mov	r5, r0
 8015c8e:	460c      	mov	r4, r1
 8015c90:	4616      	mov	r6, r2
 8015c92:	d505      	bpl.n	8015ca0 <__swrite+0x1e>
 8015c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c98:	2302      	movs	r3, #2
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	f000 fa50 	bl	8016140 <_lseek_r>
 8015ca0:	89a3      	ldrh	r3, [r4, #12]
 8015ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015caa:	81a3      	strh	r3, [r4, #12]
 8015cac:	4632      	mov	r2, r6
 8015cae:	463b      	mov	r3, r7
 8015cb0:	4628      	mov	r0, r5
 8015cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb6:	f000 b869 	b.w	8015d8c <_write_r>

08015cba <__sseek>:
 8015cba:	b510      	push	{r4, lr}
 8015cbc:	460c      	mov	r4, r1
 8015cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cc2:	f000 fa3d 	bl	8016140 <_lseek_r>
 8015cc6:	1c43      	adds	r3, r0, #1
 8015cc8:	89a3      	ldrh	r3, [r4, #12]
 8015cca:	bf15      	itete	ne
 8015ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8015cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015cd6:	81a3      	strheq	r3, [r4, #12]
 8015cd8:	bf18      	it	ne
 8015cda:	81a3      	strhne	r3, [r4, #12]
 8015cdc:	bd10      	pop	{r4, pc}

08015cde <__sclose>:
 8015cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ce2:	f000 b8f1 	b.w	8015ec8 <_close_r>
	...

08015ce8 <__swbuf_r>:
 8015ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cea:	460e      	mov	r6, r1
 8015cec:	4614      	mov	r4, r2
 8015cee:	4605      	mov	r5, r0
 8015cf0:	b118      	cbz	r0, 8015cfa <__swbuf_r+0x12>
 8015cf2:	6983      	ldr	r3, [r0, #24]
 8015cf4:	b90b      	cbnz	r3, 8015cfa <__swbuf_r+0x12>
 8015cf6:	f7ff faa9 	bl	801524c <__sinit>
 8015cfa:	4b21      	ldr	r3, [pc, #132]	; (8015d80 <__swbuf_r+0x98>)
 8015cfc:	429c      	cmp	r4, r3
 8015cfe:	d12b      	bne.n	8015d58 <__swbuf_r+0x70>
 8015d00:	686c      	ldr	r4, [r5, #4]
 8015d02:	69a3      	ldr	r3, [r4, #24]
 8015d04:	60a3      	str	r3, [r4, #8]
 8015d06:	89a3      	ldrh	r3, [r4, #12]
 8015d08:	071a      	lsls	r2, r3, #28
 8015d0a:	d52f      	bpl.n	8015d6c <__swbuf_r+0x84>
 8015d0c:	6923      	ldr	r3, [r4, #16]
 8015d0e:	b36b      	cbz	r3, 8015d6c <__swbuf_r+0x84>
 8015d10:	6923      	ldr	r3, [r4, #16]
 8015d12:	6820      	ldr	r0, [r4, #0]
 8015d14:	1ac0      	subs	r0, r0, r3
 8015d16:	6963      	ldr	r3, [r4, #20]
 8015d18:	b2f6      	uxtb	r6, r6
 8015d1a:	4283      	cmp	r3, r0
 8015d1c:	4637      	mov	r7, r6
 8015d1e:	dc04      	bgt.n	8015d2a <__swbuf_r+0x42>
 8015d20:	4621      	mov	r1, r4
 8015d22:	4628      	mov	r0, r5
 8015d24:	f000 f966 	bl	8015ff4 <_fflush_r>
 8015d28:	bb30      	cbnz	r0, 8015d78 <__swbuf_r+0x90>
 8015d2a:	68a3      	ldr	r3, [r4, #8]
 8015d2c:	3b01      	subs	r3, #1
 8015d2e:	60a3      	str	r3, [r4, #8]
 8015d30:	6823      	ldr	r3, [r4, #0]
 8015d32:	1c5a      	adds	r2, r3, #1
 8015d34:	6022      	str	r2, [r4, #0]
 8015d36:	701e      	strb	r6, [r3, #0]
 8015d38:	6963      	ldr	r3, [r4, #20]
 8015d3a:	3001      	adds	r0, #1
 8015d3c:	4283      	cmp	r3, r0
 8015d3e:	d004      	beq.n	8015d4a <__swbuf_r+0x62>
 8015d40:	89a3      	ldrh	r3, [r4, #12]
 8015d42:	07db      	lsls	r3, r3, #31
 8015d44:	d506      	bpl.n	8015d54 <__swbuf_r+0x6c>
 8015d46:	2e0a      	cmp	r6, #10
 8015d48:	d104      	bne.n	8015d54 <__swbuf_r+0x6c>
 8015d4a:	4621      	mov	r1, r4
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	f000 f951 	bl	8015ff4 <_fflush_r>
 8015d52:	b988      	cbnz	r0, 8015d78 <__swbuf_r+0x90>
 8015d54:	4638      	mov	r0, r7
 8015d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d58:	4b0a      	ldr	r3, [pc, #40]	; (8015d84 <__swbuf_r+0x9c>)
 8015d5a:	429c      	cmp	r4, r3
 8015d5c:	d101      	bne.n	8015d62 <__swbuf_r+0x7a>
 8015d5e:	68ac      	ldr	r4, [r5, #8]
 8015d60:	e7cf      	b.n	8015d02 <__swbuf_r+0x1a>
 8015d62:	4b09      	ldr	r3, [pc, #36]	; (8015d88 <__swbuf_r+0xa0>)
 8015d64:	429c      	cmp	r4, r3
 8015d66:	bf08      	it	eq
 8015d68:	68ec      	ldreq	r4, [r5, #12]
 8015d6a:	e7ca      	b.n	8015d02 <__swbuf_r+0x1a>
 8015d6c:	4621      	mov	r1, r4
 8015d6e:	4628      	mov	r0, r5
 8015d70:	f000 f81e 	bl	8015db0 <__swsetup_r>
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d0cb      	beq.n	8015d10 <__swbuf_r+0x28>
 8015d78:	f04f 37ff 	mov.w	r7, #4294967295
 8015d7c:	e7ea      	b.n	8015d54 <__swbuf_r+0x6c>
 8015d7e:	bf00      	nop
 8015d80:	08019cf4 	.word	0x08019cf4
 8015d84:	08019d14 	.word	0x08019d14
 8015d88:	08019cd4 	.word	0x08019cd4

08015d8c <_write_r>:
 8015d8c:	b538      	push	{r3, r4, r5, lr}
 8015d8e:	4d07      	ldr	r5, [pc, #28]	; (8015dac <_write_r+0x20>)
 8015d90:	4604      	mov	r4, r0
 8015d92:	4608      	mov	r0, r1
 8015d94:	4611      	mov	r1, r2
 8015d96:	2200      	movs	r2, #0
 8015d98:	602a      	str	r2, [r5, #0]
 8015d9a:	461a      	mov	r2, r3
 8015d9c:	f7ff f912 	bl	8014fc4 <_write>
 8015da0:	1c43      	adds	r3, r0, #1
 8015da2:	d102      	bne.n	8015daa <_write_r+0x1e>
 8015da4:	682b      	ldr	r3, [r5, #0]
 8015da6:	b103      	cbz	r3, 8015daa <_write_r+0x1e>
 8015da8:	6023      	str	r3, [r4, #0]
 8015daa:	bd38      	pop	{r3, r4, r5, pc}
 8015dac:	2002f034 	.word	0x2002f034

08015db0 <__swsetup_r>:
 8015db0:	4b32      	ldr	r3, [pc, #200]	; (8015e7c <__swsetup_r+0xcc>)
 8015db2:	b570      	push	{r4, r5, r6, lr}
 8015db4:	681d      	ldr	r5, [r3, #0]
 8015db6:	4606      	mov	r6, r0
 8015db8:	460c      	mov	r4, r1
 8015dba:	b125      	cbz	r5, 8015dc6 <__swsetup_r+0x16>
 8015dbc:	69ab      	ldr	r3, [r5, #24]
 8015dbe:	b913      	cbnz	r3, 8015dc6 <__swsetup_r+0x16>
 8015dc0:	4628      	mov	r0, r5
 8015dc2:	f7ff fa43 	bl	801524c <__sinit>
 8015dc6:	4b2e      	ldr	r3, [pc, #184]	; (8015e80 <__swsetup_r+0xd0>)
 8015dc8:	429c      	cmp	r4, r3
 8015dca:	d10f      	bne.n	8015dec <__swsetup_r+0x3c>
 8015dcc:	686c      	ldr	r4, [r5, #4]
 8015dce:	89a3      	ldrh	r3, [r4, #12]
 8015dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015dd4:	0719      	lsls	r1, r3, #28
 8015dd6:	d42c      	bmi.n	8015e32 <__swsetup_r+0x82>
 8015dd8:	06dd      	lsls	r5, r3, #27
 8015dda:	d411      	bmi.n	8015e00 <__swsetup_r+0x50>
 8015ddc:	2309      	movs	r3, #9
 8015dde:	6033      	str	r3, [r6, #0]
 8015de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015de4:	81a3      	strh	r3, [r4, #12]
 8015de6:	f04f 30ff 	mov.w	r0, #4294967295
 8015dea:	e03e      	b.n	8015e6a <__swsetup_r+0xba>
 8015dec:	4b25      	ldr	r3, [pc, #148]	; (8015e84 <__swsetup_r+0xd4>)
 8015dee:	429c      	cmp	r4, r3
 8015df0:	d101      	bne.n	8015df6 <__swsetup_r+0x46>
 8015df2:	68ac      	ldr	r4, [r5, #8]
 8015df4:	e7eb      	b.n	8015dce <__swsetup_r+0x1e>
 8015df6:	4b24      	ldr	r3, [pc, #144]	; (8015e88 <__swsetup_r+0xd8>)
 8015df8:	429c      	cmp	r4, r3
 8015dfa:	bf08      	it	eq
 8015dfc:	68ec      	ldreq	r4, [r5, #12]
 8015dfe:	e7e6      	b.n	8015dce <__swsetup_r+0x1e>
 8015e00:	0758      	lsls	r0, r3, #29
 8015e02:	d512      	bpl.n	8015e2a <__swsetup_r+0x7a>
 8015e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e06:	b141      	cbz	r1, 8015e1a <__swsetup_r+0x6a>
 8015e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e0c:	4299      	cmp	r1, r3
 8015e0e:	d002      	beq.n	8015e16 <__swsetup_r+0x66>
 8015e10:	4630      	mov	r0, r6
 8015e12:	f7ff fc99 	bl	8015748 <_free_r>
 8015e16:	2300      	movs	r3, #0
 8015e18:	6363      	str	r3, [r4, #52]	; 0x34
 8015e1a:	89a3      	ldrh	r3, [r4, #12]
 8015e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015e20:	81a3      	strh	r3, [r4, #12]
 8015e22:	2300      	movs	r3, #0
 8015e24:	6063      	str	r3, [r4, #4]
 8015e26:	6923      	ldr	r3, [r4, #16]
 8015e28:	6023      	str	r3, [r4, #0]
 8015e2a:	89a3      	ldrh	r3, [r4, #12]
 8015e2c:	f043 0308 	orr.w	r3, r3, #8
 8015e30:	81a3      	strh	r3, [r4, #12]
 8015e32:	6923      	ldr	r3, [r4, #16]
 8015e34:	b94b      	cbnz	r3, 8015e4a <__swsetup_r+0x9a>
 8015e36:	89a3      	ldrh	r3, [r4, #12]
 8015e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e40:	d003      	beq.n	8015e4a <__swsetup_r+0x9a>
 8015e42:	4621      	mov	r1, r4
 8015e44:	4630      	mov	r0, r6
 8015e46:	f7ff fbff 	bl	8015648 <__smakebuf_r>
 8015e4a:	89a0      	ldrh	r0, [r4, #12]
 8015e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e50:	f010 0301 	ands.w	r3, r0, #1
 8015e54:	d00a      	beq.n	8015e6c <__swsetup_r+0xbc>
 8015e56:	2300      	movs	r3, #0
 8015e58:	60a3      	str	r3, [r4, #8]
 8015e5a:	6963      	ldr	r3, [r4, #20]
 8015e5c:	425b      	negs	r3, r3
 8015e5e:	61a3      	str	r3, [r4, #24]
 8015e60:	6923      	ldr	r3, [r4, #16]
 8015e62:	b943      	cbnz	r3, 8015e76 <__swsetup_r+0xc6>
 8015e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015e68:	d1ba      	bne.n	8015de0 <__swsetup_r+0x30>
 8015e6a:	bd70      	pop	{r4, r5, r6, pc}
 8015e6c:	0781      	lsls	r1, r0, #30
 8015e6e:	bf58      	it	pl
 8015e70:	6963      	ldrpl	r3, [r4, #20]
 8015e72:	60a3      	str	r3, [r4, #8]
 8015e74:	e7f4      	b.n	8015e60 <__swsetup_r+0xb0>
 8015e76:	2000      	movs	r0, #0
 8015e78:	e7f7      	b.n	8015e6a <__swsetup_r+0xba>
 8015e7a:	bf00      	nop
 8015e7c:	20000030 	.word	0x20000030
 8015e80:	08019cf4 	.word	0x08019cf4
 8015e84:	08019d14 	.word	0x08019d14
 8015e88:	08019cd4 	.word	0x08019cd4

08015e8c <__assert_func>:
 8015e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e8e:	4614      	mov	r4, r2
 8015e90:	461a      	mov	r2, r3
 8015e92:	4b09      	ldr	r3, [pc, #36]	; (8015eb8 <__assert_func+0x2c>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	4605      	mov	r5, r0
 8015e98:	68d8      	ldr	r0, [r3, #12]
 8015e9a:	b14c      	cbz	r4, 8015eb0 <__assert_func+0x24>
 8015e9c:	4b07      	ldr	r3, [pc, #28]	; (8015ebc <__assert_func+0x30>)
 8015e9e:	9100      	str	r1, [sp, #0]
 8015ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015ea4:	4906      	ldr	r1, [pc, #24]	; (8015ec0 <__assert_func+0x34>)
 8015ea6:	462b      	mov	r3, r5
 8015ea8:	f000 f916 	bl	80160d8 <fiprintf>
 8015eac:	f000 fdca 	bl	8016a44 <abort>
 8015eb0:	4b04      	ldr	r3, [pc, #16]	; (8015ec4 <__assert_func+0x38>)
 8015eb2:	461c      	mov	r4, r3
 8015eb4:	e7f3      	b.n	8015e9e <__assert_func+0x12>
 8015eb6:	bf00      	nop
 8015eb8:	20000030 	.word	0x20000030
 8015ebc:	08019daa 	.word	0x08019daa
 8015ec0:	08019db7 	.word	0x08019db7
 8015ec4:	08019de5 	.word	0x08019de5

08015ec8 <_close_r>:
 8015ec8:	b538      	push	{r3, r4, r5, lr}
 8015eca:	4d06      	ldr	r5, [pc, #24]	; (8015ee4 <_close_r+0x1c>)
 8015ecc:	2300      	movs	r3, #0
 8015ece:	4604      	mov	r4, r0
 8015ed0:	4608      	mov	r0, r1
 8015ed2:	602b      	str	r3, [r5, #0]
 8015ed4:	f7ea ff02 	bl	8000cdc <_close>
 8015ed8:	1c43      	adds	r3, r0, #1
 8015eda:	d102      	bne.n	8015ee2 <_close_r+0x1a>
 8015edc:	682b      	ldr	r3, [r5, #0]
 8015ede:	b103      	cbz	r3, 8015ee2 <_close_r+0x1a>
 8015ee0:	6023      	str	r3, [r4, #0]
 8015ee2:	bd38      	pop	{r3, r4, r5, pc}
 8015ee4:	2002f034 	.word	0x2002f034

08015ee8 <__sflush_r>:
 8015ee8:	898a      	ldrh	r2, [r1, #12]
 8015eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eee:	4605      	mov	r5, r0
 8015ef0:	0710      	lsls	r0, r2, #28
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	d458      	bmi.n	8015fa8 <__sflush_r+0xc0>
 8015ef6:	684b      	ldr	r3, [r1, #4]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	dc05      	bgt.n	8015f08 <__sflush_r+0x20>
 8015efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	dc02      	bgt.n	8015f08 <__sflush_r+0x20>
 8015f02:	2000      	movs	r0, #0
 8015f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f0a:	2e00      	cmp	r6, #0
 8015f0c:	d0f9      	beq.n	8015f02 <__sflush_r+0x1a>
 8015f0e:	2300      	movs	r3, #0
 8015f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015f14:	682f      	ldr	r7, [r5, #0]
 8015f16:	602b      	str	r3, [r5, #0]
 8015f18:	d032      	beq.n	8015f80 <__sflush_r+0x98>
 8015f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015f1c:	89a3      	ldrh	r3, [r4, #12]
 8015f1e:	075a      	lsls	r2, r3, #29
 8015f20:	d505      	bpl.n	8015f2e <__sflush_r+0x46>
 8015f22:	6863      	ldr	r3, [r4, #4]
 8015f24:	1ac0      	subs	r0, r0, r3
 8015f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f28:	b10b      	cbz	r3, 8015f2e <__sflush_r+0x46>
 8015f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015f2c:	1ac0      	subs	r0, r0, r3
 8015f2e:	2300      	movs	r3, #0
 8015f30:	4602      	mov	r2, r0
 8015f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f34:	6a21      	ldr	r1, [r4, #32]
 8015f36:	4628      	mov	r0, r5
 8015f38:	47b0      	blx	r6
 8015f3a:	1c43      	adds	r3, r0, #1
 8015f3c:	89a3      	ldrh	r3, [r4, #12]
 8015f3e:	d106      	bne.n	8015f4e <__sflush_r+0x66>
 8015f40:	6829      	ldr	r1, [r5, #0]
 8015f42:	291d      	cmp	r1, #29
 8015f44:	d82c      	bhi.n	8015fa0 <__sflush_r+0xb8>
 8015f46:	4a2a      	ldr	r2, [pc, #168]	; (8015ff0 <__sflush_r+0x108>)
 8015f48:	40ca      	lsrs	r2, r1
 8015f4a:	07d6      	lsls	r6, r2, #31
 8015f4c:	d528      	bpl.n	8015fa0 <__sflush_r+0xb8>
 8015f4e:	2200      	movs	r2, #0
 8015f50:	6062      	str	r2, [r4, #4]
 8015f52:	04d9      	lsls	r1, r3, #19
 8015f54:	6922      	ldr	r2, [r4, #16]
 8015f56:	6022      	str	r2, [r4, #0]
 8015f58:	d504      	bpl.n	8015f64 <__sflush_r+0x7c>
 8015f5a:	1c42      	adds	r2, r0, #1
 8015f5c:	d101      	bne.n	8015f62 <__sflush_r+0x7a>
 8015f5e:	682b      	ldr	r3, [r5, #0]
 8015f60:	b903      	cbnz	r3, 8015f64 <__sflush_r+0x7c>
 8015f62:	6560      	str	r0, [r4, #84]	; 0x54
 8015f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f66:	602f      	str	r7, [r5, #0]
 8015f68:	2900      	cmp	r1, #0
 8015f6a:	d0ca      	beq.n	8015f02 <__sflush_r+0x1a>
 8015f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f70:	4299      	cmp	r1, r3
 8015f72:	d002      	beq.n	8015f7a <__sflush_r+0x92>
 8015f74:	4628      	mov	r0, r5
 8015f76:	f7ff fbe7 	bl	8015748 <_free_r>
 8015f7a:	2000      	movs	r0, #0
 8015f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8015f7e:	e7c1      	b.n	8015f04 <__sflush_r+0x1c>
 8015f80:	6a21      	ldr	r1, [r4, #32]
 8015f82:	2301      	movs	r3, #1
 8015f84:	4628      	mov	r0, r5
 8015f86:	47b0      	blx	r6
 8015f88:	1c41      	adds	r1, r0, #1
 8015f8a:	d1c7      	bne.n	8015f1c <__sflush_r+0x34>
 8015f8c:	682b      	ldr	r3, [r5, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d0c4      	beq.n	8015f1c <__sflush_r+0x34>
 8015f92:	2b1d      	cmp	r3, #29
 8015f94:	d001      	beq.n	8015f9a <__sflush_r+0xb2>
 8015f96:	2b16      	cmp	r3, #22
 8015f98:	d101      	bne.n	8015f9e <__sflush_r+0xb6>
 8015f9a:	602f      	str	r7, [r5, #0]
 8015f9c:	e7b1      	b.n	8015f02 <__sflush_r+0x1a>
 8015f9e:	89a3      	ldrh	r3, [r4, #12]
 8015fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fa4:	81a3      	strh	r3, [r4, #12]
 8015fa6:	e7ad      	b.n	8015f04 <__sflush_r+0x1c>
 8015fa8:	690f      	ldr	r7, [r1, #16]
 8015faa:	2f00      	cmp	r7, #0
 8015fac:	d0a9      	beq.n	8015f02 <__sflush_r+0x1a>
 8015fae:	0793      	lsls	r3, r2, #30
 8015fb0:	680e      	ldr	r6, [r1, #0]
 8015fb2:	bf08      	it	eq
 8015fb4:	694b      	ldreq	r3, [r1, #20]
 8015fb6:	600f      	str	r7, [r1, #0]
 8015fb8:	bf18      	it	ne
 8015fba:	2300      	movne	r3, #0
 8015fbc:	eba6 0807 	sub.w	r8, r6, r7
 8015fc0:	608b      	str	r3, [r1, #8]
 8015fc2:	f1b8 0f00 	cmp.w	r8, #0
 8015fc6:	dd9c      	ble.n	8015f02 <__sflush_r+0x1a>
 8015fc8:	6a21      	ldr	r1, [r4, #32]
 8015fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015fcc:	4643      	mov	r3, r8
 8015fce:	463a      	mov	r2, r7
 8015fd0:	4628      	mov	r0, r5
 8015fd2:	47b0      	blx	r6
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	dc06      	bgt.n	8015fe6 <__sflush_r+0xfe>
 8015fd8:	89a3      	ldrh	r3, [r4, #12]
 8015fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fde:	81a3      	strh	r3, [r4, #12]
 8015fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fe4:	e78e      	b.n	8015f04 <__sflush_r+0x1c>
 8015fe6:	4407      	add	r7, r0
 8015fe8:	eba8 0800 	sub.w	r8, r8, r0
 8015fec:	e7e9      	b.n	8015fc2 <__sflush_r+0xda>
 8015fee:	bf00      	nop
 8015ff0:	20400001 	.word	0x20400001

08015ff4 <_fflush_r>:
 8015ff4:	b538      	push	{r3, r4, r5, lr}
 8015ff6:	690b      	ldr	r3, [r1, #16]
 8015ff8:	4605      	mov	r5, r0
 8015ffa:	460c      	mov	r4, r1
 8015ffc:	b913      	cbnz	r3, 8016004 <_fflush_r+0x10>
 8015ffe:	2500      	movs	r5, #0
 8016000:	4628      	mov	r0, r5
 8016002:	bd38      	pop	{r3, r4, r5, pc}
 8016004:	b118      	cbz	r0, 801600e <_fflush_r+0x1a>
 8016006:	6983      	ldr	r3, [r0, #24]
 8016008:	b90b      	cbnz	r3, 801600e <_fflush_r+0x1a>
 801600a:	f7ff f91f 	bl	801524c <__sinit>
 801600e:	4b14      	ldr	r3, [pc, #80]	; (8016060 <_fflush_r+0x6c>)
 8016010:	429c      	cmp	r4, r3
 8016012:	d11b      	bne.n	801604c <_fflush_r+0x58>
 8016014:	686c      	ldr	r4, [r5, #4]
 8016016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d0ef      	beq.n	8015ffe <_fflush_r+0xa>
 801601e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016020:	07d0      	lsls	r0, r2, #31
 8016022:	d404      	bmi.n	801602e <_fflush_r+0x3a>
 8016024:	0599      	lsls	r1, r3, #22
 8016026:	d402      	bmi.n	801602e <_fflush_r+0x3a>
 8016028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801602a:	f7ff fae5 	bl	80155f8 <__retarget_lock_acquire_recursive>
 801602e:	4628      	mov	r0, r5
 8016030:	4621      	mov	r1, r4
 8016032:	f7ff ff59 	bl	8015ee8 <__sflush_r>
 8016036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016038:	07da      	lsls	r2, r3, #31
 801603a:	4605      	mov	r5, r0
 801603c:	d4e0      	bmi.n	8016000 <_fflush_r+0xc>
 801603e:	89a3      	ldrh	r3, [r4, #12]
 8016040:	059b      	lsls	r3, r3, #22
 8016042:	d4dd      	bmi.n	8016000 <_fflush_r+0xc>
 8016044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016046:	f7ff fad8 	bl	80155fa <__retarget_lock_release_recursive>
 801604a:	e7d9      	b.n	8016000 <_fflush_r+0xc>
 801604c:	4b05      	ldr	r3, [pc, #20]	; (8016064 <_fflush_r+0x70>)
 801604e:	429c      	cmp	r4, r3
 8016050:	d101      	bne.n	8016056 <_fflush_r+0x62>
 8016052:	68ac      	ldr	r4, [r5, #8]
 8016054:	e7df      	b.n	8016016 <_fflush_r+0x22>
 8016056:	4b04      	ldr	r3, [pc, #16]	; (8016068 <_fflush_r+0x74>)
 8016058:	429c      	cmp	r4, r3
 801605a:	bf08      	it	eq
 801605c:	68ec      	ldreq	r4, [r5, #12]
 801605e:	e7da      	b.n	8016016 <_fflush_r+0x22>
 8016060:	08019cf4 	.word	0x08019cf4
 8016064:	08019d14 	.word	0x08019d14
 8016068:	08019cd4 	.word	0x08019cd4

0801606c <__sflags>:
 801606c:	780b      	ldrb	r3, [r1, #0]
 801606e:	2b72      	cmp	r3, #114	; 0x72
 8016070:	b530      	push	{r4, r5, lr}
 8016072:	d022      	beq.n	80160ba <__sflags+0x4e>
 8016074:	2b77      	cmp	r3, #119	; 0x77
 8016076:	d024      	beq.n	80160c2 <__sflags+0x56>
 8016078:	2b61      	cmp	r3, #97	; 0x61
 801607a:	d027      	beq.n	80160cc <__sflags+0x60>
 801607c:	2316      	movs	r3, #22
 801607e:	6003      	str	r3, [r0, #0]
 8016080:	2000      	movs	r0, #0
 8016082:	bd30      	pop	{r4, r5, pc}
 8016084:	2d62      	cmp	r5, #98	; 0x62
 8016086:	d012      	beq.n	80160ae <__sflags+0x42>
 8016088:	2d78      	cmp	r5, #120	; 0x78
 801608a:	d013      	beq.n	80160b4 <__sflags+0x48>
 801608c:	2d2b      	cmp	r5, #43	; 0x2b
 801608e:	d107      	bne.n	80160a0 <__sflags+0x34>
 8016090:	f020 001c 	bic.w	r0, r0, #28
 8016094:	f023 0303 	bic.w	r3, r3, #3
 8016098:	f040 0010 	orr.w	r0, r0, #16
 801609c:	f043 0302 	orr.w	r3, r3, #2
 80160a0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80160a4:	2d00      	cmp	r5, #0
 80160a6:	d1ed      	bne.n	8016084 <__sflags+0x18>
 80160a8:	4323      	orrs	r3, r4
 80160aa:	6013      	str	r3, [r2, #0]
 80160ac:	e7e9      	b.n	8016082 <__sflags+0x16>
 80160ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80160b2:	e7f5      	b.n	80160a0 <__sflags+0x34>
 80160b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80160b8:	e7f2      	b.n	80160a0 <__sflags+0x34>
 80160ba:	2400      	movs	r4, #0
 80160bc:	4623      	mov	r3, r4
 80160be:	2004      	movs	r0, #4
 80160c0:	e7ee      	b.n	80160a0 <__sflags+0x34>
 80160c2:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80160c6:	2301      	movs	r3, #1
 80160c8:	2008      	movs	r0, #8
 80160ca:	e7e9      	b.n	80160a0 <__sflags+0x34>
 80160cc:	f44f 7402 	mov.w	r4, #520	; 0x208
 80160d0:	2301      	movs	r3, #1
 80160d2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80160d6:	e7e3      	b.n	80160a0 <__sflags+0x34>

080160d8 <fiprintf>:
 80160d8:	b40e      	push	{r1, r2, r3}
 80160da:	b503      	push	{r0, r1, lr}
 80160dc:	4601      	mov	r1, r0
 80160de:	ab03      	add	r3, sp, #12
 80160e0:	4805      	ldr	r0, [pc, #20]	; (80160f8 <fiprintf+0x20>)
 80160e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80160e6:	6800      	ldr	r0, [r0, #0]
 80160e8:	9301      	str	r3, [sp, #4]
 80160ea:	f000 f9d5 	bl	8016498 <_vfiprintf_r>
 80160ee:	b002      	add	sp, #8
 80160f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80160f4:	b003      	add	sp, #12
 80160f6:	4770      	bx	lr
 80160f8:	20000030 	.word	0x20000030

080160fc <_fstat_r>:
 80160fc:	b538      	push	{r3, r4, r5, lr}
 80160fe:	4d07      	ldr	r5, [pc, #28]	; (801611c <_fstat_r+0x20>)
 8016100:	2300      	movs	r3, #0
 8016102:	4604      	mov	r4, r0
 8016104:	4608      	mov	r0, r1
 8016106:	4611      	mov	r1, r2
 8016108:	602b      	str	r3, [r5, #0]
 801610a:	f7ea fdf3 	bl	8000cf4 <_fstat>
 801610e:	1c43      	adds	r3, r0, #1
 8016110:	d102      	bne.n	8016118 <_fstat_r+0x1c>
 8016112:	682b      	ldr	r3, [r5, #0]
 8016114:	b103      	cbz	r3, 8016118 <_fstat_r+0x1c>
 8016116:	6023      	str	r3, [r4, #0]
 8016118:	bd38      	pop	{r3, r4, r5, pc}
 801611a:	bf00      	nop
 801611c:	2002f034 	.word	0x2002f034

08016120 <_isatty_r>:
 8016120:	b538      	push	{r3, r4, r5, lr}
 8016122:	4d06      	ldr	r5, [pc, #24]	; (801613c <_isatty_r+0x1c>)
 8016124:	2300      	movs	r3, #0
 8016126:	4604      	mov	r4, r0
 8016128:	4608      	mov	r0, r1
 801612a:	602b      	str	r3, [r5, #0]
 801612c:	f7ea fdf2 	bl	8000d14 <_isatty>
 8016130:	1c43      	adds	r3, r0, #1
 8016132:	d102      	bne.n	801613a <_isatty_r+0x1a>
 8016134:	682b      	ldr	r3, [r5, #0]
 8016136:	b103      	cbz	r3, 801613a <_isatty_r+0x1a>
 8016138:	6023      	str	r3, [r4, #0]
 801613a:	bd38      	pop	{r3, r4, r5, pc}
 801613c:	2002f034 	.word	0x2002f034

08016140 <_lseek_r>:
 8016140:	b538      	push	{r3, r4, r5, lr}
 8016142:	4d07      	ldr	r5, [pc, #28]	; (8016160 <_lseek_r+0x20>)
 8016144:	4604      	mov	r4, r0
 8016146:	4608      	mov	r0, r1
 8016148:	4611      	mov	r1, r2
 801614a:	2200      	movs	r2, #0
 801614c:	602a      	str	r2, [r5, #0]
 801614e:	461a      	mov	r2, r3
 8016150:	f7ea fdeb 	bl	8000d2a <_lseek>
 8016154:	1c43      	adds	r3, r0, #1
 8016156:	d102      	bne.n	801615e <_lseek_r+0x1e>
 8016158:	682b      	ldr	r3, [r5, #0]
 801615a:	b103      	cbz	r3, 801615e <_lseek_r+0x1e>
 801615c:	6023      	str	r3, [r4, #0]
 801615e:	bd38      	pop	{r3, r4, r5, pc}
 8016160:	2002f034 	.word	0x2002f034

08016164 <malloc>:
 8016164:	4b02      	ldr	r3, [pc, #8]	; (8016170 <malloc+0xc>)
 8016166:	4601      	mov	r1, r0
 8016168:	6818      	ldr	r0, [r3, #0]
 801616a:	f7ff bb59 	b.w	8015820 <_malloc_r>
 801616e:	bf00      	nop
 8016170:	20000030 	.word	0x20000030

08016174 <__malloc_lock>:
 8016174:	4801      	ldr	r0, [pc, #4]	; (801617c <__malloc_lock+0x8>)
 8016176:	f7ff ba3f 	b.w	80155f8 <__retarget_lock_acquire_recursive>
 801617a:	bf00      	nop
 801617c:	2002f027 	.word	0x2002f027

08016180 <__malloc_unlock>:
 8016180:	4801      	ldr	r0, [pc, #4]	; (8016188 <__malloc_unlock+0x8>)
 8016182:	f7ff ba3a 	b.w	80155fa <__retarget_lock_release_recursive>
 8016186:	bf00      	nop
 8016188:	2002f027 	.word	0x2002f027

0801618c <__ssputs_r>:
 801618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016190:	688e      	ldr	r6, [r1, #8]
 8016192:	429e      	cmp	r6, r3
 8016194:	4682      	mov	sl, r0
 8016196:	460c      	mov	r4, r1
 8016198:	4690      	mov	r8, r2
 801619a:	461f      	mov	r7, r3
 801619c:	d838      	bhi.n	8016210 <__ssputs_r+0x84>
 801619e:	898a      	ldrh	r2, [r1, #12]
 80161a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80161a4:	d032      	beq.n	801620c <__ssputs_r+0x80>
 80161a6:	6825      	ldr	r5, [r4, #0]
 80161a8:	6909      	ldr	r1, [r1, #16]
 80161aa:	eba5 0901 	sub.w	r9, r5, r1
 80161ae:	6965      	ldr	r5, [r4, #20]
 80161b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80161b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80161b8:	3301      	adds	r3, #1
 80161ba:	444b      	add	r3, r9
 80161bc:	106d      	asrs	r5, r5, #1
 80161be:	429d      	cmp	r5, r3
 80161c0:	bf38      	it	cc
 80161c2:	461d      	movcc	r5, r3
 80161c4:	0553      	lsls	r3, r2, #21
 80161c6:	d531      	bpl.n	801622c <__ssputs_r+0xa0>
 80161c8:	4629      	mov	r1, r5
 80161ca:	f7ff fb29 	bl	8015820 <_malloc_r>
 80161ce:	4606      	mov	r6, r0
 80161d0:	b950      	cbnz	r0, 80161e8 <__ssputs_r+0x5c>
 80161d2:	230c      	movs	r3, #12
 80161d4:	f8ca 3000 	str.w	r3, [sl]
 80161d8:	89a3      	ldrh	r3, [r4, #12]
 80161da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161de:	81a3      	strh	r3, [r4, #12]
 80161e0:	f04f 30ff 	mov.w	r0, #4294967295
 80161e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161e8:	6921      	ldr	r1, [r4, #16]
 80161ea:	464a      	mov	r2, r9
 80161ec:	f7ff fa7c 	bl	80156e8 <memcpy>
 80161f0:	89a3      	ldrh	r3, [r4, #12]
 80161f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80161f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161fa:	81a3      	strh	r3, [r4, #12]
 80161fc:	6126      	str	r6, [r4, #16]
 80161fe:	6165      	str	r5, [r4, #20]
 8016200:	444e      	add	r6, r9
 8016202:	eba5 0509 	sub.w	r5, r5, r9
 8016206:	6026      	str	r6, [r4, #0]
 8016208:	60a5      	str	r5, [r4, #8]
 801620a:	463e      	mov	r6, r7
 801620c:	42be      	cmp	r6, r7
 801620e:	d900      	bls.n	8016212 <__ssputs_r+0x86>
 8016210:	463e      	mov	r6, r7
 8016212:	6820      	ldr	r0, [r4, #0]
 8016214:	4632      	mov	r2, r6
 8016216:	4641      	mov	r1, r8
 8016218:	f7ff fa74 	bl	8015704 <memmove>
 801621c:	68a3      	ldr	r3, [r4, #8]
 801621e:	1b9b      	subs	r3, r3, r6
 8016220:	60a3      	str	r3, [r4, #8]
 8016222:	6823      	ldr	r3, [r4, #0]
 8016224:	4433      	add	r3, r6
 8016226:	6023      	str	r3, [r4, #0]
 8016228:	2000      	movs	r0, #0
 801622a:	e7db      	b.n	80161e4 <__ssputs_r+0x58>
 801622c:	462a      	mov	r2, r5
 801622e:	f000 fc10 	bl	8016a52 <_realloc_r>
 8016232:	4606      	mov	r6, r0
 8016234:	2800      	cmp	r0, #0
 8016236:	d1e1      	bne.n	80161fc <__ssputs_r+0x70>
 8016238:	6921      	ldr	r1, [r4, #16]
 801623a:	4650      	mov	r0, sl
 801623c:	f7ff fa84 	bl	8015748 <_free_r>
 8016240:	e7c7      	b.n	80161d2 <__ssputs_r+0x46>
	...

08016244 <_svfiprintf_r>:
 8016244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016248:	4698      	mov	r8, r3
 801624a:	898b      	ldrh	r3, [r1, #12]
 801624c:	061b      	lsls	r3, r3, #24
 801624e:	b09d      	sub	sp, #116	; 0x74
 8016250:	4607      	mov	r7, r0
 8016252:	460d      	mov	r5, r1
 8016254:	4614      	mov	r4, r2
 8016256:	d50e      	bpl.n	8016276 <_svfiprintf_r+0x32>
 8016258:	690b      	ldr	r3, [r1, #16]
 801625a:	b963      	cbnz	r3, 8016276 <_svfiprintf_r+0x32>
 801625c:	2140      	movs	r1, #64	; 0x40
 801625e:	f7ff fadf 	bl	8015820 <_malloc_r>
 8016262:	6028      	str	r0, [r5, #0]
 8016264:	6128      	str	r0, [r5, #16]
 8016266:	b920      	cbnz	r0, 8016272 <_svfiprintf_r+0x2e>
 8016268:	230c      	movs	r3, #12
 801626a:	603b      	str	r3, [r7, #0]
 801626c:	f04f 30ff 	mov.w	r0, #4294967295
 8016270:	e0d1      	b.n	8016416 <_svfiprintf_r+0x1d2>
 8016272:	2340      	movs	r3, #64	; 0x40
 8016274:	616b      	str	r3, [r5, #20]
 8016276:	2300      	movs	r3, #0
 8016278:	9309      	str	r3, [sp, #36]	; 0x24
 801627a:	2320      	movs	r3, #32
 801627c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016280:	f8cd 800c 	str.w	r8, [sp, #12]
 8016284:	2330      	movs	r3, #48	; 0x30
 8016286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016430 <_svfiprintf_r+0x1ec>
 801628a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801628e:	f04f 0901 	mov.w	r9, #1
 8016292:	4623      	mov	r3, r4
 8016294:	469a      	mov	sl, r3
 8016296:	f813 2b01 	ldrb.w	r2, [r3], #1
 801629a:	b10a      	cbz	r2, 80162a0 <_svfiprintf_r+0x5c>
 801629c:	2a25      	cmp	r2, #37	; 0x25
 801629e:	d1f9      	bne.n	8016294 <_svfiprintf_r+0x50>
 80162a0:	ebba 0b04 	subs.w	fp, sl, r4
 80162a4:	d00b      	beq.n	80162be <_svfiprintf_r+0x7a>
 80162a6:	465b      	mov	r3, fp
 80162a8:	4622      	mov	r2, r4
 80162aa:	4629      	mov	r1, r5
 80162ac:	4638      	mov	r0, r7
 80162ae:	f7ff ff6d 	bl	801618c <__ssputs_r>
 80162b2:	3001      	adds	r0, #1
 80162b4:	f000 80aa 	beq.w	801640c <_svfiprintf_r+0x1c8>
 80162b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162ba:	445a      	add	r2, fp
 80162bc:	9209      	str	r2, [sp, #36]	; 0x24
 80162be:	f89a 3000 	ldrb.w	r3, [sl]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	f000 80a2 	beq.w	801640c <_svfiprintf_r+0x1c8>
 80162c8:	2300      	movs	r3, #0
 80162ca:	f04f 32ff 	mov.w	r2, #4294967295
 80162ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162d2:	f10a 0a01 	add.w	sl, sl, #1
 80162d6:	9304      	str	r3, [sp, #16]
 80162d8:	9307      	str	r3, [sp, #28]
 80162da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162de:	931a      	str	r3, [sp, #104]	; 0x68
 80162e0:	4654      	mov	r4, sl
 80162e2:	2205      	movs	r2, #5
 80162e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162e8:	4851      	ldr	r0, [pc, #324]	; (8016430 <_svfiprintf_r+0x1ec>)
 80162ea:	f7e9 ff99 	bl	8000220 <memchr>
 80162ee:	9a04      	ldr	r2, [sp, #16]
 80162f0:	b9d8      	cbnz	r0, 801632a <_svfiprintf_r+0xe6>
 80162f2:	06d0      	lsls	r0, r2, #27
 80162f4:	bf44      	itt	mi
 80162f6:	2320      	movmi	r3, #32
 80162f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162fc:	0711      	lsls	r1, r2, #28
 80162fe:	bf44      	itt	mi
 8016300:	232b      	movmi	r3, #43	; 0x2b
 8016302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016306:	f89a 3000 	ldrb.w	r3, [sl]
 801630a:	2b2a      	cmp	r3, #42	; 0x2a
 801630c:	d015      	beq.n	801633a <_svfiprintf_r+0xf6>
 801630e:	9a07      	ldr	r2, [sp, #28]
 8016310:	4654      	mov	r4, sl
 8016312:	2000      	movs	r0, #0
 8016314:	f04f 0c0a 	mov.w	ip, #10
 8016318:	4621      	mov	r1, r4
 801631a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801631e:	3b30      	subs	r3, #48	; 0x30
 8016320:	2b09      	cmp	r3, #9
 8016322:	d94e      	bls.n	80163c2 <_svfiprintf_r+0x17e>
 8016324:	b1b0      	cbz	r0, 8016354 <_svfiprintf_r+0x110>
 8016326:	9207      	str	r2, [sp, #28]
 8016328:	e014      	b.n	8016354 <_svfiprintf_r+0x110>
 801632a:	eba0 0308 	sub.w	r3, r0, r8
 801632e:	fa09 f303 	lsl.w	r3, r9, r3
 8016332:	4313      	orrs	r3, r2
 8016334:	9304      	str	r3, [sp, #16]
 8016336:	46a2      	mov	sl, r4
 8016338:	e7d2      	b.n	80162e0 <_svfiprintf_r+0x9c>
 801633a:	9b03      	ldr	r3, [sp, #12]
 801633c:	1d19      	adds	r1, r3, #4
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	9103      	str	r1, [sp, #12]
 8016342:	2b00      	cmp	r3, #0
 8016344:	bfbb      	ittet	lt
 8016346:	425b      	neglt	r3, r3
 8016348:	f042 0202 	orrlt.w	r2, r2, #2
 801634c:	9307      	strge	r3, [sp, #28]
 801634e:	9307      	strlt	r3, [sp, #28]
 8016350:	bfb8      	it	lt
 8016352:	9204      	strlt	r2, [sp, #16]
 8016354:	7823      	ldrb	r3, [r4, #0]
 8016356:	2b2e      	cmp	r3, #46	; 0x2e
 8016358:	d10c      	bne.n	8016374 <_svfiprintf_r+0x130>
 801635a:	7863      	ldrb	r3, [r4, #1]
 801635c:	2b2a      	cmp	r3, #42	; 0x2a
 801635e:	d135      	bne.n	80163cc <_svfiprintf_r+0x188>
 8016360:	9b03      	ldr	r3, [sp, #12]
 8016362:	1d1a      	adds	r2, r3, #4
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	9203      	str	r2, [sp, #12]
 8016368:	2b00      	cmp	r3, #0
 801636a:	bfb8      	it	lt
 801636c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016370:	3402      	adds	r4, #2
 8016372:	9305      	str	r3, [sp, #20]
 8016374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016440 <_svfiprintf_r+0x1fc>
 8016378:	7821      	ldrb	r1, [r4, #0]
 801637a:	2203      	movs	r2, #3
 801637c:	4650      	mov	r0, sl
 801637e:	f7e9 ff4f 	bl	8000220 <memchr>
 8016382:	b140      	cbz	r0, 8016396 <_svfiprintf_r+0x152>
 8016384:	2340      	movs	r3, #64	; 0x40
 8016386:	eba0 000a 	sub.w	r0, r0, sl
 801638a:	fa03 f000 	lsl.w	r0, r3, r0
 801638e:	9b04      	ldr	r3, [sp, #16]
 8016390:	4303      	orrs	r3, r0
 8016392:	3401      	adds	r4, #1
 8016394:	9304      	str	r3, [sp, #16]
 8016396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801639a:	4826      	ldr	r0, [pc, #152]	; (8016434 <_svfiprintf_r+0x1f0>)
 801639c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80163a0:	2206      	movs	r2, #6
 80163a2:	f7e9 ff3d 	bl	8000220 <memchr>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	d038      	beq.n	801641c <_svfiprintf_r+0x1d8>
 80163aa:	4b23      	ldr	r3, [pc, #140]	; (8016438 <_svfiprintf_r+0x1f4>)
 80163ac:	bb1b      	cbnz	r3, 80163f6 <_svfiprintf_r+0x1b2>
 80163ae:	9b03      	ldr	r3, [sp, #12]
 80163b0:	3307      	adds	r3, #7
 80163b2:	f023 0307 	bic.w	r3, r3, #7
 80163b6:	3308      	adds	r3, #8
 80163b8:	9303      	str	r3, [sp, #12]
 80163ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163bc:	4433      	add	r3, r6
 80163be:	9309      	str	r3, [sp, #36]	; 0x24
 80163c0:	e767      	b.n	8016292 <_svfiprintf_r+0x4e>
 80163c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80163c6:	460c      	mov	r4, r1
 80163c8:	2001      	movs	r0, #1
 80163ca:	e7a5      	b.n	8016318 <_svfiprintf_r+0xd4>
 80163cc:	2300      	movs	r3, #0
 80163ce:	3401      	adds	r4, #1
 80163d0:	9305      	str	r3, [sp, #20]
 80163d2:	4619      	mov	r1, r3
 80163d4:	f04f 0c0a 	mov.w	ip, #10
 80163d8:	4620      	mov	r0, r4
 80163da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163de:	3a30      	subs	r2, #48	; 0x30
 80163e0:	2a09      	cmp	r2, #9
 80163e2:	d903      	bls.n	80163ec <_svfiprintf_r+0x1a8>
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d0c5      	beq.n	8016374 <_svfiprintf_r+0x130>
 80163e8:	9105      	str	r1, [sp, #20]
 80163ea:	e7c3      	b.n	8016374 <_svfiprintf_r+0x130>
 80163ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80163f0:	4604      	mov	r4, r0
 80163f2:	2301      	movs	r3, #1
 80163f4:	e7f0      	b.n	80163d8 <_svfiprintf_r+0x194>
 80163f6:	ab03      	add	r3, sp, #12
 80163f8:	9300      	str	r3, [sp, #0]
 80163fa:	462a      	mov	r2, r5
 80163fc:	4b0f      	ldr	r3, [pc, #60]	; (801643c <_svfiprintf_r+0x1f8>)
 80163fe:	a904      	add	r1, sp, #16
 8016400:	4638      	mov	r0, r7
 8016402:	f3af 8000 	nop.w
 8016406:	1c42      	adds	r2, r0, #1
 8016408:	4606      	mov	r6, r0
 801640a:	d1d6      	bne.n	80163ba <_svfiprintf_r+0x176>
 801640c:	89ab      	ldrh	r3, [r5, #12]
 801640e:	065b      	lsls	r3, r3, #25
 8016410:	f53f af2c 	bmi.w	801626c <_svfiprintf_r+0x28>
 8016414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016416:	b01d      	add	sp, #116	; 0x74
 8016418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801641c:	ab03      	add	r3, sp, #12
 801641e:	9300      	str	r3, [sp, #0]
 8016420:	462a      	mov	r2, r5
 8016422:	4b06      	ldr	r3, [pc, #24]	; (801643c <_svfiprintf_r+0x1f8>)
 8016424:	a904      	add	r1, sp, #16
 8016426:	4638      	mov	r0, r7
 8016428:	f000 f9d4 	bl	80167d4 <_printf_i>
 801642c:	e7eb      	b.n	8016406 <_svfiprintf_r+0x1c2>
 801642e:	bf00      	nop
 8016430:	08019de6 	.word	0x08019de6
 8016434:	08019df0 	.word	0x08019df0
 8016438:	00000000 	.word	0x00000000
 801643c:	0801618d 	.word	0x0801618d
 8016440:	08019dec 	.word	0x08019dec

08016444 <__sfputc_r>:
 8016444:	6893      	ldr	r3, [r2, #8]
 8016446:	3b01      	subs	r3, #1
 8016448:	2b00      	cmp	r3, #0
 801644a:	b410      	push	{r4}
 801644c:	6093      	str	r3, [r2, #8]
 801644e:	da08      	bge.n	8016462 <__sfputc_r+0x1e>
 8016450:	6994      	ldr	r4, [r2, #24]
 8016452:	42a3      	cmp	r3, r4
 8016454:	db01      	blt.n	801645a <__sfputc_r+0x16>
 8016456:	290a      	cmp	r1, #10
 8016458:	d103      	bne.n	8016462 <__sfputc_r+0x1e>
 801645a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801645e:	f7ff bc43 	b.w	8015ce8 <__swbuf_r>
 8016462:	6813      	ldr	r3, [r2, #0]
 8016464:	1c58      	adds	r0, r3, #1
 8016466:	6010      	str	r0, [r2, #0]
 8016468:	7019      	strb	r1, [r3, #0]
 801646a:	4608      	mov	r0, r1
 801646c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016470:	4770      	bx	lr

08016472 <__sfputs_r>:
 8016472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016474:	4606      	mov	r6, r0
 8016476:	460f      	mov	r7, r1
 8016478:	4614      	mov	r4, r2
 801647a:	18d5      	adds	r5, r2, r3
 801647c:	42ac      	cmp	r4, r5
 801647e:	d101      	bne.n	8016484 <__sfputs_r+0x12>
 8016480:	2000      	movs	r0, #0
 8016482:	e007      	b.n	8016494 <__sfputs_r+0x22>
 8016484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016488:	463a      	mov	r2, r7
 801648a:	4630      	mov	r0, r6
 801648c:	f7ff ffda 	bl	8016444 <__sfputc_r>
 8016490:	1c43      	adds	r3, r0, #1
 8016492:	d1f3      	bne.n	801647c <__sfputs_r+0xa>
 8016494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016498 <_vfiprintf_r>:
 8016498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801649c:	460d      	mov	r5, r1
 801649e:	b09d      	sub	sp, #116	; 0x74
 80164a0:	4614      	mov	r4, r2
 80164a2:	4698      	mov	r8, r3
 80164a4:	4606      	mov	r6, r0
 80164a6:	b118      	cbz	r0, 80164b0 <_vfiprintf_r+0x18>
 80164a8:	6983      	ldr	r3, [r0, #24]
 80164aa:	b90b      	cbnz	r3, 80164b0 <_vfiprintf_r+0x18>
 80164ac:	f7fe fece 	bl	801524c <__sinit>
 80164b0:	4b89      	ldr	r3, [pc, #548]	; (80166d8 <_vfiprintf_r+0x240>)
 80164b2:	429d      	cmp	r5, r3
 80164b4:	d11b      	bne.n	80164ee <_vfiprintf_r+0x56>
 80164b6:	6875      	ldr	r5, [r6, #4]
 80164b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80164ba:	07d9      	lsls	r1, r3, #31
 80164bc:	d405      	bmi.n	80164ca <_vfiprintf_r+0x32>
 80164be:	89ab      	ldrh	r3, [r5, #12]
 80164c0:	059a      	lsls	r2, r3, #22
 80164c2:	d402      	bmi.n	80164ca <_vfiprintf_r+0x32>
 80164c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80164c6:	f7ff f897 	bl	80155f8 <__retarget_lock_acquire_recursive>
 80164ca:	89ab      	ldrh	r3, [r5, #12]
 80164cc:	071b      	lsls	r3, r3, #28
 80164ce:	d501      	bpl.n	80164d4 <_vfiprintf_r+0x3c>
 80164d0:	692b      	ldr	r3, [r5, #16]
 80164d2:	b9eb      	cbnz	r3, 8016510 <_vfiprintf_r+0x78>
 80164d4:	4629      	mov	r1, r5
 80164d6:	4630      	mov	r0, r6
 80164d8:	f7ff fc6a 	bl	8015db0 <__swsetup_r>
 80164dc:	b1c0      	cbz	r0, 8016510 <_vfiprintf_r+0x78>
 80164de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80164e0:	07dc      	lsls	r4, r3, #31
 80164e2:	d50e      	bpl.n	8016502 <_vfiprintf_r+0x6a>
 80164e4:	f04f 30ff 	mov.w	r0, #4294967295
 80164e8:	b01d      	add	sp, #116	; 0x74
 80164ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ee:	4b7b      	ldr	r3, [pc, #492]	; (80166dc <_vfiprintf_r+0x244>)
 80164f0:	429d      	cmp	r5, r3
 80164f2:	d101      	bne.n	80164f8 <_vfiprintf_r+0x60>
 80164f4:	68b5      	ldr	r5, [r6, #8]
 80164f6:	e7df      	b.n	80164b8 <_vfiprintf_r+0x20>
 80164f8:	4b79      	ldr	r3, [pc, #484]	; (80166e0 <_vfiprintf_r+0x248>)
 80164fa:	429d      	cmp	r5, r3
 80164fc:	bf08      	it	eq
 80164fe:	68f5      	ldreq	r5, [r6, #12]
 8016500:	e7da      	b.n	80164b8 <_vfiprintf_r+0x20>
 8016502:	89ab      	ldrh	r3, [r5, #12]
 8016504:	0598      	lsls	r0, r3, #22
 8016506:	d4ed      	bmi.n	80164e4 <_vfiprintf_r+0x4c>
 8016508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801650a:	f7ff f876 	bl	80155fa <__retarget_lock_release_recursive>
 801650e:	e7e9      	b.n	80164e4 <_vfiprintf_r+0x4c>
 8016510:	2300      	movs	r3, #0
 8016512:	9309      	str	r3, [sp, #36]	; 0x24
 8016514:	2320      	movs	r3, #32
 8016516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801651a:	f8cd 800c 	str.w	r8, [sp, #12]
 801651e:	2330      	movs	r3, #48	; 0x30
 8016520:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80166e4 <_vfiprintf_r+0x24c>
 8016524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016528:	f04f 0901 	mov.w	r9, #1
 801652c:	4623      	mov	r3, r4
 801652e:	469a      	mov	sl, r3
 8016530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016534:	b10a      	cbz	r2, 801653a <_vfiprintf_r+0xa2>
 8016536:	2a25      	cmp	r2, #37	; 0x25
 8016538:	d1f9      	bne.n	801652e <_vfiprintf_r+0x96>
 801653a:	ebba 0b04 	subs.w	fp, sl, r4
 801653e:	d00b      	beq.n	8016558 <_vfiprintf_r+0xc0>
 8016540:	465b      	mov	r3, fp
 8016542:	4622      	mov	r2, r4
 8016544:	4629      	mov	r1, r5
 8016546:	4630      	mov	r0, r6
 8016548:	f7ff ff93 	bl	8016472 <__sfputs_r>
 801654c:	3001      	adds	r0, #1
 801654e:	f000 80aa 	beq.w	80166a6 <_vfiprintf_r+0x20e>
 8016552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016554:	445a      	add	r2, fp
 8016556:	9209      	str	r2, [sp, #36]	; 0x24
 8016558:	f89a 3000 	ldrb.w	r3, [sl]
 801655c:	2b00      	cmp	r3, #0
 801655e:	f000 80a2 	beq.w	80166a6 <_vfiprintf_r+0x20e>
 8016562:	2300      	movs	r3, #0
 8016564:	f04f 32ff 	mov.w	r2, #4294967295
 8016568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801656c:	f10a 0a01 	add.w	sl, sl, #1
 8016570:	9304      	str	r3, [sp, #16]
 8016572:	9307      	str	r3, [sp, #28]
 8016574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016578:	931a      	str	r3, [sp, #104]	; 0x68
 801657a:	4654      	mov	r4, sl
 801657c:	2205      	movs	r2, #5
 801657e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016582:	4858      	ldr	r0, [pc, #352]	; (80166e4 <_vfiprintf_r+0x24c>)
 8016584:	f7e9 fe4c 	bl	8000220 <memchr>
 8016588:	9a04      	ldr	r2, [sp, #16]
 801658a:	b9d8      	cbnz	r0, 80165c4 <_vfiprintf_r+0x12c>
 801658c:	06d1      	lsls	r1, r2, #27
 801658e:	bf44      	itt	mi
 8016590:	2320      	movmi	r3, #32
 8016592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016596:	0713      	lsls	r3, r2, #28
 8016598:	bf44      	itt	mi
 801659a:	232b      	movmi	r3, #43	; 0x2b
 801659c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165a0:	f89a 3000 	ldrb.w	r3, [sl]
 80165a4:	2b2a      	cmp	r3, #42	; 0x2a
 80165a6:	d015      	beq.n	80165d4 <_vfiprintf_r+0x13c>
 80165a8:	9a07      	ldr	r2, [sp, #28]
 80165aa:	4654      	mov	r4, sl
 80165ac:	2000      	movs	r0, #0
 80165ae:	f04f 0c0a 	mov.w	ip, #10
 80165b2:	4621      	mov	r1, r4
 80165b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165b8:	3b30      	subs	r3, #48	; 0x30
 80165ba:	2b09      	cmp	r3, #9
 80165bc:	d94e      	bls.n	801665c <_vfiprintf_r+0x1c4>
 80165be:	b1b0      	cbz	r0, 80165ee <_vfiprintf_r+0x156>
 80165c0:	9207      	str	r2, [sp, #28]
 80165c2:	e014      	b.n	80165ee <_vfiprintf_r+0x156>
 80165c4:	eba0 0308 	sub.w	r3, r0, r8
 80165c8:	fa09 f303 	lsl.w	r3, r9, r3
 80165cc:	4313      	orrs	r3, r2
 80165ce:	9304      	str	r3, [sp, #16]
 80165d0:	46a2      	mov	sl, r4
 80165d2:	e7d2      	b.n	801657a <_vfiprintf_r+0xe2>
 80165d4:	9b03      	ldr	r3, [sp, #12]
 80165d6:	1d19      	adds	r1, r3, #4
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	9103      	str	r1, [sp, #12]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	bfbb      	ittet	lt
 80165e0:	425b      	neglt	r3, r3
 80165e2:	f042 0202 	orrlt.w	r2, r2, #2
 80165e6:	9307      	strge	r3, [sp, #28]
 80165e8:	9307      	strlt	r3, [sp, #28]
 80165ea:	bfb8      	it	lt
 80165ec:	9204      	strlt	r2, [sp, #16]
 80165ee:	7823      	ldrb	r3, [r4, #0]
 80165f0:	2b2e      	cmp	r3, #46	; 0x2e
 80165f2:	d10c      	bne.n	801660e <_vfiprintf_r+0x176>
 80165f4:	7863      	ldrb	r3, [r4, #1]
 80165f6:	2b2a      	cmp	r3, #42	; 0x2a
 80165f8:	d135      	bne.n	8016666 <_vfiprintf_r+0x1ce>
 80165fa:	9b03      	ldr	r3, [sp, #12]
 80165fc:	1d1a      	adds	r2, r3, #4
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	9203      	str	r2, [sp, #12]
 8016602:	2b00      	cmp	r3, #0
 8016604:	bfb8      	it	lt
 8016606:	f04f 33ff 	movlt.w	r3, #4294967295
 801660a:	3402      	adds	r4, #2
 801660c:	9305      	str	r3, [sp, #20]
 801660e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80166f4 <_vfiprintf_r+0x25c>
 8016612:	7821      	ldrb	r1, [r4, #0]
 8016614:	2203      	movs	r2, #3
 8016616:	4650      	mov	r0, sl
 8016618:	f7e9 fe02 	bl	8000220 <memchr>
 801661c:	b140      	cbz	r0, 8016630 <_vfiprintf_r+0x198>
 801661e:	2340      	movs	r3, #64	; 0x40
 8016620:	eba0 000a 	sub.w	r0, r0, sl
 8016624:	fa03 f000 	lsl.w	r0, r3, r0
 8016628:	9b04      	ldr	r3, [sp, #16]
 801662a:	4303      	orrs	r3, r0
 801662c:	3401      	adds	r4, #1
 801662e:	9304      	str	r3, [sp, #16]
 8016630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016634:	482c      	ldr	r0, [pc, #176]	; (80166e8 <_vfiprintf_r+0x250>)
 8016636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801663a:	2206      	movs	r2, #6
 801663c:	f7e9 fdf0 	bl	8000220 <memchr>
 8016640:	2800      	cmp	r0, #0
 8016642:	d03f      	beq.n	80166c4 <_vfiprintf_r+0x22c>
 8016644:	4b29      	ldr	r3, [pc, #164]	; (80166ec <_vfiprintf_r+0x254>)
 8016646:	bb1b      	cbnz	r3, 8016690 <_vfiprintf_r+0x1f8>
 8016648:	9b03      	ldr	r3, [sp, #12]
 801664a:	3307      	adds	r3, #7
 801664c:	f023 0307 	bic.w	r3, r3, #7
 8016650:	3308      	adds	r3, #8
 8016652:	9303      	str	r3, [sp, #12]
 8016654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016656:	443b      	add	r3, r7
 8016658:	9309      	str	r3, [sp, #36]	; 0x24
 801665a:	e767      	b.n	801652c <_vfiprintf_r+0x94>
 801665c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016660:	460c      	mov	r4, r1
 8016662:	2001      	movs	r0, #1
 8016664:	e7a5      	b.n	80165b2 <_vfiprintf_r+0x11a>
 8016666:	2300      	movs	r3, #0
 8016668:	3401      	adds	r4, #1
 801666a:	9305      	str	r3, [sp, #20]
 801666c:	4619      	mov	r1, r3
 801666e:	f04f 0c0a 	mov.w	ip, #10
 8016672:	4620      	mov	r0, r4
 8016674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016678:	3a30      	subs	r2, #48	; 0x30
 801667a:	2a09      	cmp	r2, #9
 801667c:	d903      	bls.n	8016686 <_vfiprintf_r+0x1ee>
 801667e:	2b00      	cmp	r3, #0
 8016680:	d0c5      	beq.n	801660e <_vfiprintf_r+0x176>
 8016682:	9105      	str	r1, [sp, #20]
 8016684:	e7c3      	b.n	801660e <_vfiprintf_r+0x176>
 8016686:	fb0c 2101 	mla	r1, ip, r1, r2
 801668a:	4604      	mov	r4, r0
 801668c:	2301      	movs	r3, #1
 801668e:	e7f0      	b.n	8016672 <_vfiprintf_r+0x1da>
 8016690:	ab03      	add	r3, sp, #12
 8016692:	9300      	str	r3, [sp, #0]
 8016694:	462a      	mov	r2, r5
 8016696:	4b16      	ldr	r3, [pc, #88]	; (80166f0 <_vfiprintf_r+0x258>)
 8016698:	a904      	add	r1, sp, #16
 801669a:	4630      	mov	r0, r6
 801669c:	f3af 8000 	nop.w
 80166a0:	4607      	mov	r7, r0
 80166a2:	1c78      	adds	r0, r7, #1
 80166a4:	d1d6      	bne.n	8016654 <_vfiprintf_r+0x1bc>
 80166a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166a8:	07d9      	lsls	r1, r3, #31
 80166aa:	d405      	bmi.n	80166b8 <_vfiprintf_r+0x220>
 80166ac:	89ab      	ldrh	r3, [r5, #12]
 80166ae:	059a      	lsls	r2, r3, #22
 80166b0:	d402      	bmi.n	80166b8 <_vfiprintf_r+0x220>
 80166b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166b4:	f7fe ffa1 	bl	80155fa <__retarget_lock_release_recursive>
 80166b8:	89ab      	ldrh	r3, [r5, #12]
 80166ba:	065b      	lsls	r3, r3, #25
 80166bc:	f53f af12 	bmi.w	80164e4 <_vfiprintf_r+0x4c>
 80166c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166c2:	e711      	b.n	80164e8 <_vfiprintf_r+0x50>
 80166c4:	ab03      	add	r3, sp, #12
 80166c6:	9300      	str	r3, [sp, #0]
 80166c8:	462a      	mov	r2, r5
 80166ca:	4b09      	ldr	r3, [pc, #36]	; (80166f0 <_vfiprintf_r+0x258>)
 80166cc:	a904      	add	r1, sp, #16
 80166ce:	4630      	mov	r0, r6
 80166d0:	f000 f880 	bl	80167d4 <_printf_i>
 80166d4:	e7e4      	b.n	80166a0 <_vfiprintf_r+0x208>
 80166d6:	bf00      	nop
 80166d8:	08019cf4 	.word	0x08019cf4
 80166dc:	08019d14 	.word	0x08019d14
 80166e0:	08019cd4 	.word	0x08019cd4
 80166e4:	08019de6 	.word	0x08019de6
 80166e8:	08019df0 	.word	0x08019df0
 80166ec:	00000000 	.word	0x00000000
 80166f0:	08016473 	.word	0x08016473
 80166f4:	08019dec 	.word	0x08019dec

080166f8 <_printf_common>:
 80166f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166fc:	4616      	mov	r6, r2
 80166fe:	4699      	mov	r9, r3
 8016700:	688a      	ldr	r2, [r1, #8]
 8016702:	690b      	ldr	r3, [r1, #16]
 8016704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016708:	4293      	cmp	r3, r2
 801670a:	bfb8      	it	lt
 801670c:	4613      	movlt	r3, r2
 801670e:	6033      	str	r3, [r6, #0]
 8016710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016714:	4607      	mov	r7, r0
 8016716:	460c      	mov	r4, r1
 8016718:	b10a      	cbz	r2, 801671e <_printf_common+0x26>
 801671a:	3301      	adds	r3, #1
 801671c:	6033      	str	r3, [r6, #0]
 801671e:	6823      	ldr	r3, [r4, #0]
 8016720:	0699      	lsls	r1, r3, #26
 8016722:	bf42      	ittt	mi
 8016724:	6833      	ldrmi	r3, [r6, #0]
 8016726:	3302      	addmi	r3, #2
 8016728:	6033      	strmi	r3, [r6, #0]
 801672a:	6825      	ldr	r5, [r4, #0]
 801672c:	f015 0506 	ands.w	r5, r5, #6
 8016730:	d106      	bne.n	8016740 <_printf_common+0x48>
 8016732:	f104 0a19 	add.w	sl, r4, #25
 8016736:	68e3      	ldr	r3, [r4, #12]
 8016738:	6832      	ldr	r2, [r6, #0]
 801673a:	1a9b      	subs	r3, r3, r2
 801673c:	42ab      	cmp	r3, r5
 801673e:	dc26      	bgt.n	801678e <_printf_common+0x96>
 8016740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016744:	1e13      	subs	r3, r2, #0
 8016746:	6822      	ldr	r2, [r4, #0]
 8016748:	bf18      	it	ne
 801674a:	2301      	movne	r3, #1
 801674c:	0692      	lsls	r2, r2, #26
 801674e:	d42b      	bmi.n	80167a8 <_printf_common+0xb0>
 8016750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016754:	4649      	mov	r1, r9
 8016756:	4638      	mov	r0, r7
 8016758:	47c0      	blx	r8
 801675a:	3001      	adds	r0, #1
 801675c:	d01e      	beq.n	801679c <_printf_common+0xa4>
 801675e:	6823      	ldr	r3, [r4, #0]
 8016760:	68e5      	ldr	r5, [r4, #12]
 8016762:	6832      	ldr	r2, [r6, #0]
 8016764:	f003 0306 	and.w	r3, r3, #6
 8016768:	2b04      	cmp	r3, #4
 801676a:	bf08      	it	eq
 801676c:	1aad      	subeq	r5, r5, r2
 801676e:	68a3      	ldr	r3, [r4, #8]
 8016770:	6922      	ldr	r2, [r4, #16]
 8016772:	bf0c      	ite	eq
 8016774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016778:	2500      	movne	r5, #0
 801677a:	4293      	cmp	r3, r2
 801677c:	bfc4      	itt	gt
 801677e:	1a9b      	subgt	r3, r3, r2
 8016780:	18ed      	addgt	r5, r5, r3
 8016782:	2600      	movs	r6, #0
 8016784:	341a      	adds	r4, #26
 8016786:	42b5      	cmp	r5, r6
 8016788:	d11a      	bne.n	80167c0 <_printf_common+0xc8>
 801678a:	2000      	movs	r0, #0
 801678c:	e008      	b.n	80167a0 <_printf_common+0xa8>
 801678e:	2301      	movs	r3, #1
 8016790:	4652      	mov	r2, sl
 8016792:	4649      	mov	r1, r9
 8016794:	4638      	mov	r0, r7
 8016796:	47c0      	blx	r8
 8016798:	3001      	adds	r0, #1
 801679a:	d103      	bne.n	80167a4 <_printf_common+0xac>
 801679c:	f04f 30ff 	mov.w	r0, #4294967295
 80167a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167a4:	3501      	adds	r5, #1
 80167a6:	e7c6      	b.n	8016736 <_printf_common+0x3e>
 80167a8:	18e1      	adds	r1, r4, r3
 80167aa:	1c5a      	adds	r2, r3, #1
 80167ac:	2030      	movs	r0, #48	; 0x30
 80167ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80167b2:	4422      	add	r2, r4
 80167b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80167b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80167bc:	3302      	adds	r3, #2
 80167be:	e7c7      	b.n	8016750 <_printf_common+0x58>
 80167c0:	2301      	movs	r3, #1
 80167c2:	4622      	mov	r2, r4
 80167c4:	4649      	mov	r1, r9
 80167c6:	4638      	mov	r0, r7
 80167c8:	47c0      	blx	r8
 80167ca:	3001      	adds	r0, #1
 80167cc:	d0e6      	beq.n	801679c <_printf_common+0xa4>
 80167ce:	3601      	adds	r6, #1
 80167d0:	e7d9      	b.n	8016786 <_printf_common+0x8e>
	...

080167d4 <_printf_i>:
 80167d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167d8:	7e0f      	ldrb	r7, [r1, #24]
 80167da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80167dc:	2f78      	cmp	r7, #120	; 0x78
 80167de:	4691      	mov	r9, r2
 80167e0:	4680      	mov	r8, r0
 80167e2:	460c      	mov	r4, r1
 80167e4:	469a      	mov	sl, r3
 80167e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80167ea:	d807      	bhi.n	80167fc <_printf_i+0x28>
 80167ec:	2f62      	cmp	r7, #98	; 0x62
 80167ee:	d80a      	bhi.n	8016806 <_printf_i+0x32>
 80167f0:	2f00      	cmp	r7, #0
 80167f2:	f000 80d8 	beq.w	80169a6 <_printf_i+0x1d2>
 80167f6:	2f58      	cmp	r7, #88	; 0x58
 80167f8:	f000 80a3 	beq.w	8016942 <_printf_i+0x16e>
 80167fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016804:	e03a      	b.n	801687c <_printf_i+0xa8>
 8016806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801680a:	2b15      	cmp	r3, #21
 801680c:	d8f6      	bhi.n	80167fc <_printf_i+0x28>
 801680e:	a101      	add	r1, pc, #4	; (adr r1, 8016814 <_printf_i+0x40>)
 8016810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016814:	0801686d 	.word	0x0801686d
 8016818:	08016881 	.word	0x08016881
 801681c:	080167fd 	.word	0x080167fd
 8016820:	080167fd 	.word	0x080167fd
 8016824:	080167fd 	.word	0x080167fd
 8016828:	080167fd 	.word	0x080167fd
 801682c:	08016881 	.word	0x08016881
 8016830:	080167fd 	.word	0x080167fd
 8016834:	080167fd 	.word	0x080167fd
 8016838:	080167fd 	.word	0x080167fd
 801683c:	080167fd 	.word	0x080167fd
 8016840:	0801698d 	.word	0x0801698d
 8016844:	080168b1 	.word	0x080168b1
 8016848:	0801696f 	.word	0x0801696f
 801684c:	080167fd 	.word	0x080167fd
 8016850:	080167fd 	.word	0x080167fd
 8016854:	080169af 	.word	0x080169af
 8016858:	080167fd 	.word	0x080167fd
 801685c:	080168b1 	.word	0x080168b1
 8016860:	080167fd 	.word	0x080167fd
 8016864:	080167fd 	.word	0x080167fd
 8016868:	08016977 	.word	0x08016977
 801686c:	682b      	ldr	r3, [r5, #0]
 801686e:	1d1a      	adds	r2, r3, #4
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	602a      	str	r2, [r5, #0]
 8016874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801687c:	2301      	movs	r3, #1
 801687e:	e0a3      	b.n	80169c8 <_printf_i+0x1f4>
 8016880:	6820      	ldr	r0, [r4, #0]
 8016882:	6829      	ldr	r1, [r5, #0]
 8016884:	0606      	lsls	r6, r0, #24
 8016886:	f101 0304 	add.w	r3, r1, #4
 801688a:	d50a      	bpl.n	80168a2 <_printf_i+0xce>
 801688c:	680e      	ldr	r6, [r1, #0]
 801688e:	602b      	str	r3, [r5, #0]
 8016890:	2e00      	cmp	r6, #0
 8016892:	da03      	bge.n	801689c <_printf_i+0xc8>
 8016894:	232d      	movs	r3, #45	; 0x2d
 8016896:	4276      	negs	r6, r6
 8016898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801689c:	485e      	ldr	r0, [pc, #376]	; (8016a18 <_printf_i+0x244>)
 801689e:	230a      	movs	r3, #10
 80168a0:	e019      	b.n	80168d6 <_printf_i+0x102>
 80168a2:	680e      	ldr	r6, [r1, #0]
 80168a4:	602b      	str	r3, [r5, #0]
 80168a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80168aa:	bf18      	it	ne
 80168ac:	b236      	sxthne	r6, r6
 80168ae:	e7ef      	b.n	8016890 <_printf_i+0xbc>
 80168b0:	682b      	ldr	r3, [r5, #0]
 80168b2:	6820      	ldr	r0, [r4, #0]
 80168b4:	1d19      	adds	r1, r3, #4
 80168b6:	6029      	str	r1, [r5, #0]
 80168b8:	0601      	lsls	r1, r0, #24
 80168ba:	d501      	bpl.n	80168c0 <_printf_i+0xec>
 80168bc:	681e      	ldr	r6, [r3, #0]
 80168be:	e002      	b.n	80168c6 <_printf_i+0xf2>
 80168c0:	0646      	lsls	r6, r0, #25
 80168c2:	d5fb      	bpl.n	80168bc <_printf_i+0xe8>
 80168c4:	881e      	ldrh	r6, [r3, #0]
 80168c6:	4854      	ldr	r0, [pc, #336]	; (8016a18 <_printf_i+0x244>)
 80168c8:	2f6f      	cmp	r7, #111	; 0x6f
 80168ca:	bf0c      	ite	eq
 80168cc:	2308      	moveq	r3, #8
 80168ce:	230a      	movne	r3, #10
 80168d0:	2100      	movs	r1, #0
 80168d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80168d6:	6865      	ldr	r5, [r4, #4]
 80168d8:	60a5      	str	r5, [r4, #8]
 80168da:	2d00      	cmp	r5, #0
 80168dc:	bfa2      	ittt	ge
 80168de:	6821      	ldrge	r1, [r4, #0]
 80168e0:	f021 0104 	bicge.w	r1, r1, #4
 80168e4:	6021      	strge	r1, [r4, #0]
 80168e6:	b90e      	cbnz	r6, 80168ec <_printf_i+0x118>
 80168e8:	2d00      	cmp	r5, #0
 80168ea:	d04d      	beq.n	8016988 <_printf_i+0x1b4>
 80168ec:	4615      	mov	r5, r2
 80168ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80168f2:	fb03 6711 	mls	r7, r3, r1, r6
 80168f6:	5dc7      	ldrb	r7, [r0, r7]
 80168f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80168fc:	4637      	mov	r7, r6
 80168fe:	42bb      	cmp	r3, r7
 8016900:	460e      	mov	r6, r1
 8016902:	d9f4      	bls.n	80168ee <_printf_i+0x11a>
 8016904:	2b08      	cmp	r3, #8
 8016906:	d10b      	bne.n	8016920 <_printf_i+0x14c>
 8016908:	6823      	ldr	r3, [r4, #0]
 801690a:	07de      	lsls	r6, r3, #31
 801690c:	d508      	bpl.n	8016920 <_printf_i+0x14c>
 801690e:	6923      	ldr	r3, [r4, #16]
 8016910:	6861      	ldr	r1, [r4, #4]
 8016912:	4299      	cmp	r1, r3
 8016914:	bfde      	ittt	le
 8016916:	2330      	movle	r3, #48	; 0x30
 8016918:	f805 3c01 	strble.w	r3, [r5, #-1]
 801691c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016920:	1b52      	subs	r2, r2, r5
 8016922:	6122      	str	r2, [r4, #16]
 8016924:	f8cd a000 	str.w	sl, [sp]
 8016928:	464b      	mov	r3, r9
 801692a:	aa03      	add	r2, sp, #12
 801692c:	4621      	mov	r1, r4
 801692e:	4640      	mov	r0, r8
 8016930:	f7ff fee2 	bl	80166f8 <_printf_common>
 8016934:	3001      	adds	r0, #1
 8016936:	d14c      	bne.n	80169d2 <_printf_i+0x1fe>
 8016938:	f04f 30ff 	mov.w	r0, #4294967295
 801693c:	b004      	add	sp, #16
 801693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016942:	4835      	ldr	r0, [pc, #212]	; (8016a18 <_printf_i+0x244>)
 8016944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016948:	6829      	ldr	r1, [r5, #0]
 801694a:	6823      	ldr	r3, [r4, #0]
 801694c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016950:	6029      	str	r1, [r5, #0]
 8016952:	061d      	lsls	r5, r3, #24
 8016954:	d514      	bpl.n	8016980 <_printf_i+0x1ac>
 8016956:	07df      	lsls	r7, r3, #31
 8016958:	bf44      	itt	mi
 801695a:	f043 0320 	orrmi.w	r3, r3, #32
 801695e:	6023      	strmi	r3, [r4, #0]
 8016960:	b91e      	cbnz	r6, 801696a <_printf_i+0x196>
 8016962:	6823      	ldr	r3, [r4, #0]
 8016964:	f023 0320 	bic.w	r3, r3, #32
 8016968:	6023      	str	r3, [r4, #0]
 801696a:	2310      	movs	r3, #16
 801696c:	e7b0      	b.n	80168d0 <_printf_i+0xfc>
 801696e:	6823      	ldr	r3, [r4, #0]
 8016970:	f043 0320 	orr.w	r3, r3, #32
 8016974:	6023      	str	r3, [r4, #0]
 8016976:	2378      	movs	r3, #120	; 0x78
 8016978:	4828      	ldr	r0, [pc, #160]	; (8016a1c <_printf_i+0x248>)
 801697a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801697e:	e7e3      	b.n	8016948 <_printf_i+0x174>
 8016980:	0659      	lsls	r1, r3, #25
 8016982:	bf48      	it	mi
 8016984:	b2b6      	uxthmi	r6, r6
 8016986:	e7e6      	b.n	8016956 <_printf_i+0x182>
 8016988:	4615      	mov	r5, r2
 801698a:	e7bb      	b.n	8016904 <_printf_i+0x130>
 801698c:	682b      	ldr	r3, [r5, #0]
 801698e:	6826      	ldr	r6, [r4, #0]
 8016990:	6961      	ldr	r1, [r4, #20]
 8016992:	1d18      	adds	r0, r3, #4
 8016994:	6028      	str	r0, [r5, #0]
 8016996:	0635      	lsls	r5, r6, #24
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	d501      	bpl.n	80169a0 <_printf_i+0x1cc>
 801699c:	6019      	str	r1, [r3, #0]
 801699e:	e002      	b.n	80169a6 <_printf_i+0x1d2>
 80169a0:	0670      	lsls	r0, r6, #25
 80169a2:	d5fb      	bpl.n	801699c <_printf_i+0x1c8>
 80169a4:	8019      	strh	r1, [r3, #0]
 80169a6:	2300      	movs	r3, #0
 80169a8:	6123      	str	r3, [r4, #16]
 80169aa:	4615      	mov	r5, r2
 80169ac:	e7ba      	b.n	8016924 <_printf_i+0x150>
 80169ae:	682b      	ldr	r3, [r5, #0]
 80169b0:	1d1a      	adds	r2, r3, #4
 80169b2:	602a      	str	r2, [r5, #0]
 80169b4:	681d      	ldr	r5, [r3, #0]
 80169b6:	6862      	ldr	r2, [r4, #4]
 80169b8:	2100      	movs	r1, #0
 80169ba:	4628      	mov	r0, r5
 80169bc:	f7e9 fc30 	bl	8000220 <memchr>
 80169c0:	b108      	cbz	r0, 80169c6 <_printf_i+0x1f2>
 80169c2:	1b40      	subs	r0, r0, r5
 80169c4:	6060      	str	r0, [r4, #4]
 80169c6:	6863      	ldr	r3, [r4, #4]
 80169c8:	6123      	str	r3, [r4, #16]
 80169ca:	2300      	movs	r3, #0
 80169cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80169d0:	e7a8      	b.n	8016924 <_printf_i+0x150>
 80169d2:	6923      	ldr	r3, [r4, #16]
 80169d4:	462a      	mov	r2, r5
 80169d6:	4649      	mov	r1, r9
 80169d8:	4640      	mov	r0, r8
 80169da:	47d0      	blx	sl
 80169dc:	3001      	adds	r0, #1
 80169de:	d0ab      	beq.n	8016938 <_printf_i+0x164>
 80169e0:	6823      	ldr	r3, [r4, #0]
 80169e2:	079b      	lsls	r3, r3, #30
 80169e4:	d413      	bmi.n	8016a0e <_printf_i+0x23a>
 80169e6:	68e0      	ldr	r0, [r4, #12]
 80169e8:	9b03      	ldr	r3, [sp, #12]
 80169ea:	4298      	cmp	r0, r3
 80169ec:	bfb8      	it	lt
 80169ee:	4618      	movlt	r0, r3
 80169f0:	e7a4      	b.n	801693c <_printf_i+0x168>
 80169f2:	2301      	movs	r3, #1
 80169f4:	4632      	mov	r2, r6
 80169f6:	4649      	mov	r1, r9
 80169f8:	4640      	mov	r0, r8
 80169fa:	47d0      	blx	sl
 80169fc:	3001      	adds	r0, #1
 80169fe:	d09b      	beq.n	8016938 <_printf_i+0x164>
 8016a00:	3501      	adds	r5, #1
 8016a02:	68e3      	ldr	r3, [r4, #12]
 8016a04:	9903      	ldr	r1, [sp, #12]
 8016a06:	1a5b      	subs	r3, r3, r1
 8016a08:	42ab      	cmp	r3, r5
 8016a0a:	dcf2      	bgt.n	80169f2 <_printf_i+0x21e>
 8016a0c:	e7eb      	b.n	80169e6 <_printf_i+0x212>
 8016a0e:	2500      	movs	r5, #0
 8016a10:	f104 0619 	add.w	r6, r4, #25
 8016a14:	e7f5      	b.n	8016a02 <_printf_i+0x22e>
 8016a16:	bf00      	nop
 8016a18:	08019df7 	.word	0x08019df7
 8016a1c:	08019e08 	.word	0x08019e08

08016a20 <_read_r>:
 8016a20:	b538      	push	{r3, r4, r5, lr}
 8016a22:	4d07      	ldr	r5, [pc, #28]	; (8016a40 <_read_r+0x20>)
 8016a24:	4604      	mov	r4, r0
 8016a26:	4608      	mov	r0, r1
 8016a28:	4611      	mov	r1, r2
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	602a      	str	r2, [r5, #0]
 8016a2e:	461a      	mov	r2, r3
 8016a30:	f7fe fade 	bl	8014ff0 <_read>
 8016a34:	1c43      	adds	r3, r0, #1
 8016a36:	d102      	bne.n	8016a3e <_read_r+0x1e>
 8016a38:	682b      	ldr	r3, [r5, #0]
 8016a3a:	b103      	cbz	r3, 8016a3e <_read_r+0x1e>
 8016a3c:	6023      	str	r3, [r4, #0]
 8016a3e:	bd38      	pop	{r3, r4, r5, pc}
 8016a40:	2002f034 	.word	0x2002f034

08016a44 <abort>:
 8016a44:	b508      	push	{r3, lr}
 8016a46:	2006      	movs	r0, #6
 8016a48:	f000 f85a 	bl	8016b00 <raise>
 8016a4c:	2001      	movs	r0, #1
 8016a4e:	f7ea f93b 	bl	8000cc8 <_exit>

08016a52 <_realloc_r>:
 8016a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a56:	4680      	mov	r8, r0
 8016a58:	4614      	mov	r4, r2
 8016a5a:	460e      	mov	r6, r1
 8016a5c:	b921      	cbnz	r1, 8016a68 <_realloc_r+0x16>
 8016a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a62:	4611      	mov	r1, r2
 8016a64:	f7fe bedc 	b.w	8015820 <_malloc_r>
 8016a68:	b92a      	cbnz	r2, 8016a76 <_realloc_r+0x24>
 8016a6a:	f7fe fe6d 	bl	8015748 <_free_r>
 8016a6e:	4625      	mov	r5, r4
 8016a70:	4628      	mov	r0, r5
 8016a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a76:	f000 f85f 	bl	8016b38 <_malloc_usable_size_r>
 8016a7a:	4284      	cmp	r4, r0
 8016a7c:	4607      	mov	r7, r0
 8016a7e:	d802      	bhi.n	8016a86 <_realloc_r+0x34>
 8016a80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016a84:	d812      	bhi.n	8016aac <_realloc_r+0x5a>
 8016a86:	4621      	mov	r1, r4
 8016a88:	4640      	mov	r0, r8
 8016a8a:	f7fe fec9 	bl	8015820 <_malloc_r>
 8016a8e:	4605      	mov	r5, r0
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d0ed      	beq.n	8016a70 <_realloc_r+0x1e>
 8016a94:	42bc      	cmp	r4, r7
 8016a96:	4622      	mov	r2, r4
 8016a98:	4631      	mov	r1, r6
 8016a9a:	bf28      	it	cs
 8016a9c:	463a      	movcs	r2, r7
 8016a9e:	f7fe fe23 	bl	80156e8 <memcpy>
 8016aa2:	4631      	mov	r1, r6
 8016aa4:	4640      	mov	r0, r8
 8016aa6:	f7fe fe4f 	bl	8015748 <_free_r>
 8016aaa:	e7e1      	b.n	8016a70 <_realloc_r+0x1e>
 8016aac:	4635      	mov	r5, r6
 8016aae:	e7df      	b.n	8016a70 <_realloc_r+0x1e>

08016ab0 <_raise_r>:
 8016ab0:	291f      	cmp	r1, #31
 8016ab2:	b538      	push	{r3, r4, r5, lr}
 8016ab4:	4604      	mov	r4, r0
 8016ab6:	460d      	mov	r5, r1
 8016ab8:	d904      	bls.n	8016ac4 <_raise_r+0x14>
 8016aba:	2316      	movs	r3, #22
 8016abc:	6003      	str	r3, [r0, #0]
 8016abe:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac2:	bd38      	pop	{r3, r4, r5, pc}
 8016ac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016ac6:	b112      	cbz	r2, 8016ace <_raise_r+0x1e>
 8016ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016acc:	b94b      	cbnz	r3, 8016ae2 <_raise_r+0x32>
 8016ace:	4620      	mov	r0, r4
 8016ad0:	f000 f830 	bl	8016b34 <_getpid_r>
 8016ad4:	462a      	mov	r2, r5
 8016ad6:	4601      	mov	r1, r0
 8016ad8:	4620      	mov	r0, r4
 8016ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ade:	f000 b817 	b.w	8016b10 <_kill_r>
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d00a      	beq.n	8016afc <_raise_r+0x4c>
 8016ae6:	1c59      	adds	r1, r3, #1
 8016ae8:	d103      	bne.n	8016af2 <_raise_r+0x42>
 8016aea:	2316      	movs	r3, #22
 8016aec:	6003      	str	r3, [r0, #0]
 8016aee:	2001      	movs	r0, #1
 8016af0:	e7e7      	b.n	8016ac2 <_raise_r+0x12>
 8016af2:	2400      	movs	r4, #0
 8016af4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016af8:	4628      	mov	r0, r5
 8016afa:	4798      	blx	r3
 8016afc:	2000      	movs	r0, #0
 8016afe:	e7e0      	b.n	8016ac2 <_raise_r+0x12>

08016b00 <raise>:
 8016b00:	4b02      	ldr	r3, [pc, #8]	; (8016b0c <raise+0xc>)
 8016b02:	4601      	mov	r1, r0
 8016b04:	6818      	ldr	r0, [r3, #0]
 8016b06:	f7ff bfd3 	b.w	8016ab0 <_raise_r>
 8016b0a:	bf00      	nop
 8016b0c:	20000030 	.word	0x20000030

08016b10 <_kill_r>:
 8016b10:	b538      	push	{r3, r4, r5, lr}
 8016b12:	4d07      	ldr	r5, [pc, #28]	; (8016b30 <_kill_r+0x20>)
 8016b14:	2300      	movs	r3, #0
 8016b16:	4604      	mov	r4, r0
 8016b18:	4608      	mov	r0, r1
 8016b1a:	4611      	mov	r1, r2
 8016b1c:	602b      	str	r3, [r5, #0]
 8016b1e:	f7ea f8c1 	bl	8000ca4 <_kill>
 8016b22:	1c43      	adds	r3, r0, #1
 8016b24:	d102      	bne.n	8016b2c <_kill_r+0x1c>
 8016b26:	682b      	ldr	r3, [r5, #0]
 8016b28:	b103      	cbz	r3, 8016b2c <_kill_r+0x1c>
 8016b2a:	6023      	str	r3, [r4, #0]
 8016b2c:	bd38      	pop	{r3, r4, r5, pc}
 8016b2e:	bf00      	nop
 8016b30:	2002f034 	.word	0x2002f034

08016b34 <_getpid_r>:
 8016b34:	f7ea b8ae 	b.w	8000c94 <_getpid>

08016b38 <_malloc_usable_size_r>:
 8016b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b3c:	1f18      	subs	r0, r3, #4
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	bfbc      	itt	lt
 8016b42:	580b      	ldrlt	r3, [r1, r0]
 8016b44:	18c0      	addlt	r0, r0, r3
 8016b46:	4770      	bx	lr

08016b48 <_init>:
 8016b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b4a:	bf00      	nop
 8016b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b4e:	bc08      	pop	{r3}
 8016b50:	469e      	mov	lr, r3
 8016b52:	4770      	bx	lr

08016b54 <_fini>:
 8016b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b56:	bf00      	nop
 8016b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b5a:	bc08      	pop	{r3}
 8016b5c:	469e      	mov	lr, r3
 8016b5e:	4770      	bx	lr
